(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var Log = exports.Log = __webpack_require__(1);
	var OidcClient = exports.OidcClient = __webpack_require__(2);
	var OidcClientSettings = exports.OidcClientSettings = __webpack_require__(3);
	var WebStorageStateStore = exports.WebStorageStateStore = __webpack_require__(4);
	var InMemoryWebStorage = exports.InMemoryWebStorage = __webpack_require__(22);
	var UserManager = exports.UserManager = __webpack_require__(23);
	var AccessTokenEvents = exports.AccessTokenEvents = __webpack_require__(32);
	var MetadataService = exports.MetadataService = __webpack_require__(7);
	var CordovaPopupNavigator = exports.CordovaPopupNavigator = __webpack_require__(39);
	var CordovaIFrameNavigator = exports.CordovaIFrameNavigator = __webpack_require__(41);
	var CheckSessionIFrame = exports.CheckSessionIFrame = __webpack_require__(37);
	var TokenRevocationClient = exports.TokenRevocationClient = __webpack_require__(38);
	var SessionMonitor = exports.SessionMonitor = __webpack_require__(36);
	var Global = exports.Global = __webpack_require__(5);
	var User = exports.User = __webpack_require__(30);
	
	exports.default = {
	    Log: Log,
	    OidcClient: OidcClient,
	    OidcClientSettings: OidcClientSettings,
	    WebStorageStateStore: WebStorageStateStore,
	    InMemoryWebStorage: InMemoryWebStorage,
	    UserManager: UserManager,
	    AccessTokenEvents: AccessTokenEvents,
	    MetadataService: MetadataService,
	    CordovaPopupNavigator: CordovaPopupNavigator,
	    CordovaIFrameNavigator: CordovaIFrameNavigator,
	    CheckSessionIFrame: CheckSessionIFrame,
	    TokenRevocationClient: TokenRevocationClient,
	    SessionMonitor: SessionMonitor,
	    Global: Global,
	    User: User
	};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var nopLogger = {
	    debug: function debug() {},
	    info: function info() {},
	    warn: function warn() {},
	    error: function error() {}
	};
	
	var NONE = 0;
	var ERROR = 1;
	var WARN = 2;
	var INFO = 3;
	var DEBUG = 4;
	
	var logger = void 0;
	var level = void 0;
	
	var Log = function () {
	    function Log() {
	        _classCallCheck(this, Log);
	    }
	
	    Log.reset = function reset() {
	        level = INFO;
	        logger = nopLogger;
	    };
	
	    Log.debug = function debug() {
	        if (level >= DEBUG) {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }
	
	            logger.debug.apply(logger, Array.from(args));
	        }
	    };
	
	    Log.info = function info() {
	        if (level >= INFO) {
	            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                args[_key2] = arguments[_key2];
	            }
	
	            logger.info.apply(logger, Array.from(args));
	        }
	    };
	
	    Log.warn = function warn() {
	        if (level >= WARN) {
	            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                args[_key3] = arguments[_key3];
	            }
	
	            logger.warn.apply(logger, Array.from(args));
	        }
	    };
	
	    Log.error = function error() {
	        if (level >= ERROR) {
	            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	                args[_key4] = arguments[_key4];
	            }
	
	            logger.error.apply(logger, Array.from(args));
	        }
	    };
	
	    _createClass(Log, null, [{
	        key: "NONE",
	        get: function get() {
	            return NONE;
	        }
	    }, {
	        key: "ERROR",
	        get: function get() {
	            return ERROR;
	        }
	    }, {
	        key: "WARN",
	        get: function get() {
	            return WARN;
	        }
	    }, {
	        key: "INFO",
	        get: function get() {
	            return INFO;
	        }
	    }, {
	        key: "DEBUG",
	        get: function get() {
	            return DEBUG;
	        }
	    }, {
	        key: "level",
	        get: function get() {
	            return level;
	        },
	        set: function set(value) {
	            if (NONE <= value && value <= DEBUG) {
	                level = value;
	            } else {
	                throw new Error("Invalid log level");
	            }
	        }
	    }, {
	        key: "logger",
	        get: function get() {
	            return logger;
	        },
	        set: function set(value) {
	            if (!value.debug && value.info) {
	                // just to stay backwards compat. can remove in 2.0
	                value.debug = value.info;
	            }
	
	            if (value.debug && value.info && value.warn && value.error) {
	                logger = value;
	            } else {
	                throw new Error("Invalid logger");
	            }
	        }
	    }]);
	
	    return Log;
	}();
	
	exports.default = Log;
	
	
	Log.reset();
	module.exports = exports['default'];

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _OidcClientSettings = __webpack_require__(3);
	
	var _OidcClientSettings2 = _interopRequireDefault(_OidcClientSettings);
	
	var _ErrorResponse = __webpack_require__(10);
	
	var _ErrorResponse2 = _interopRequireDefault(_ErrorResponse);
	
	var _SigninRequest = __webpack_require__(14);
	
	var _SigninRequest2 = _interopRequireDefault(_SigninRequest);
	
	var _SigninResponse = __webpack_require__(19);
	
	var _SigninResponse2 = _interopRequireDefault(_SigninResponse);
	
	var _SignoutRequest = __webpack_require__(20);
	
	var _SignoutRequest2 = _interopRequireDefault(_SignoutRequest);
	
	var _SignoutResponse = __webpack_require__(21);
	
	var _SignoutResponse2 = _interopRequireDefault(_SignoutResponse);
	
	var _SigninState = __webpack_require__(16);
	
	var _SigninState2 = _interopRequireDefault(_SigninState);
	
	var _State = __webpack_require__(17);
	
	var _State2 = _interopRequireDefault(_State);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcClient = function () {
	    function OidcClient() {
	        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _classCallCheck(this, OidcClient);
	
	        if (settings instanceof _OidcClientSettings2.default) {
	            this._settings = settings;
	        } else {
	            this._settings = new _OidcClientSettings2.default(settings);
	        }
	    }
	
	    OidcClient.prototype.createSigninRequest = function createSigninRequest() {
	        var _this = this;
	
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            response_type = _ref.response_type,
	            scope = _ref.scope,
	            redirect_uri = _ref.redirect_uri,
	            data = _ref.data,
	            state = _ref.state,
	            prompt = _ref.prompt,
	            display = _ref.display,
	            max_age = _ref.max_age,
	            ui_locales = _ref.ui_locales,
	            id_token_hint = _ref.id_token_hint,
	            login_hint = _ref.login_hint,
	            acr_values = _ref.acr_values,
	            resource = _ref.resource,
	            request = _ref.request,
	            request_uri = _ref.request_uri,
	            extraQueryParams = _ref.extraQueryParams;
	
	        var stateStore = arguments[1];
	
	        _Log2.default.debug("OidcClient.createSigninRequest");
	
	        var client_id = this._settings.client_id;
	        response_type = response_type || this._settings.response_type;
	        scope = scope || this._settings.scope;
	        redirect_uri = redirect_uri || this._settings.redirect_uri;
	
	        // id_token_hint, login_hint aren't allowed on _settings
	        prompt = prompt || this._settings.prompt;
	        display = display || this._settings.display;
	        max_age = max_age || this._settings.max_age;
	        ui_locales = ui_locales || this._settings.ui_locales;
	        acr_values = acr_values || this._settings.acr_values;
	        resource = resource || this._settings.resource;
	        extraQueryParams = extraQueryParams || this._settings.extraQueryParams;
	
	        var authority = this._settings.authority;
	
	        return this._metadataService.getAuthorizationEndpoint().then(function (url) {
	            _Log2.default.debug("Received authorization endpoint", url);
	
	            var signinRequest = new _SigninRequest2.default({
	                url: url,
	                client_id: client_id,
	                redirect_uri: redirect_uri,
	                response_type: response_type,
	                scope: scope,
	                data: data || state,
	                authority: authority,
	                prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values,
	                resource: resource, request: request, request_uri: request_uri, extraQueryParams: extraQueryParams
	            });
	
	            var signinState = signinRequest.state;
	            stateStore = stateStore || _this._stateStore;
	
	            return stateStore.set(signinState.id, signinState.toStorageString()).then(function () {
	                return signinRequest;
	            });
	        });
	    };
	
	    OidcClient.prototype.processSigninResponse = function processSigninResponse(url, stateStore) {
	        var _this2 = this;
	
	        _Log2.default.debug("OidcClient.processSigninResponse");
	
	        var response = new _SigninResponse2.default(url);
	
	        if (!response.state) {
	            _Log2.default.error("No state in response");
	            return Promise.reject(new Error("No state in response"));
	        }
	
	        stateStore = stateStore || this._stateStore;
	
	        return stateStore.remove(response.state).then(function (storedStateString) {
	            if (!storedStateString) {
	                _Log2.default.error("No matching state found in storage");
	                throw new Error("No matching state found in storage");
	            }
	
	            var state = _SigninState2.default.fromStorageString(storedStateString);
	
	            _Log2.default.debug("Received state from storage; validating response");
	            return _this2._validator.validateSigninResponse(state, response);
	        });
	    };
	
	    OidcClient.prototype.createSignoutRequest = function createSignoutRequest() {
	        var _this3 = this;
	
	        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            id_token_hint = _ref2.id_token_hint,
	            data = _ref2.data,
	            state = _ref2.state,
	            post_logout_redirect_uri = _ref2.post_logout_redirect_uri;
	
	        var stateStore = arguments[1];
	
	        _Log2.default.debug("OidcClient.createSignoutRequest");
	
	        post_logout_redirect_uri = post_logout_redirect_uri || this._settings.post_logout_redirect_uri;
	
	        return this._metadataService.getEndSessionEndpoint().then(function (url) {
	            if (!url) {
	                _Log2.default.error("No end session endpoint url returned");
	                throw new Error("no end session endpoint");
	            }
	
	            _Log2.default.debug("Received end session endpoint", url);
	
	            var request = new _SignoutRequest2.default({
	                url: url,
	                id_token_hint: id_token_hint,
	                post_logout_redirect_uri: post_logout_redirect_uri,
	                data: data || state
	            });
	
	            var signoutState = request.state;
	            if (signoutState) {
	                _Log2.default.debug("Signout request has state to persist");
	
	                stateStore = stateStore || _this3._stateStore;
	                stateStore.set(signoutState.id, signoutState.toStorageString());
	            }
	
	            return request;
	        });
	    };
	
	    OidcClient.prototype.processSignoutResponse = function processSignoutResponse(url, stateStore) {
	        var _this4 = this;
	
	        _Log2.default.debug("OidcClient.processSignoutResponse");
	
	        var response = new _SignoutResponse2.default(url);
	        if (!response.state) {
	            _Log2.default.debug("No state in response");
	
	            if (response.error) {
	                _Log2.default.warn("Response was error", response.error);
	                return Promise.reject(new _ErrorResponse2.default(response));
	            }
	
	            return Promise.resolve(response);
	        }
	
	        var stateKey = response.state;
	
	        stateStore = stateStore || this._stateStore;
	
	        return stateStore.remove(stateKey).then(function (storedStateString) {
	            if (!storedStateString) {
	                _Log2.default.error("No matching state found in storage");
	                throw new Error("No matching state found in storage");
	            }
	
	            var state = _State2.default.fromStorageString(storedStateString);
	
	            _Log2.default.debug("Received state from storage; validating response");
	            return _this4._validator.validateSignoutResponse(state, response);
	        });
	    };
	
	    OidcClient.prototype.clearStaleState = function clearStaleState(stateStore) {
	        _Log2.default.debug("OidcClient.clearStaleState");
	
	        stateStore = stateStore || this._stateStore;
	
	        return _State2.default.clearStaleState(stateStore, this.settings.staleStateAge);
	    };
	
	    _createClass(OidcClient, [{
	        key: '_stateStore',
	        get: function get() {
	            return this.settings.stateStore;
	        }
	    }, {
	        key: '_validator',
	        get: function get() {
	            return this.settings.validator;
	        }
	    }, {
	        key: '_metadataService',
	        get: function get() {
	            return this.settings.metadataService;
	        }
	    }, {
	        key: 'settings',
	        get: function get() {
	            return this._settings;
	        }
	    }, {
	        key: 'metadataService',
	        get: function get() {
	            return this._metadataService;
	        }
	    }]);
	
	    return OidcClient;
	}();
	
	exports.default = OidcClient;
	module.exports = exports['default'];

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _WebStorageStateStore = __webpack_require__(4);
	
	var _WebStorageStateStore2 = _interopRequireDefault(_WebStorageStateStore);
	
	var _ResponseValidator = __webpack_require__(6);
	
	var _ResponseValidator2 = _interopRequireDefault(_ResponseValidator);
	
	var _MetadataService = __webpack_require__(7);
	
	var _MetadataService2 = _interopRequireDefault(_MetadataService);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcMetadataUrlPath = '.well-known/openid-configuration';
	
	var DefaultResponseType = "id_token";
	var DefaultScope = "openid";
	var DefaultStaleStateAge = 60 * 5; // seconds
	var DefaultClockSkewInSeconds = 60 * 5;
	
	var OidcClientSettings = function () {
	    function OidcClientSettings() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            authority = _ref.authority,
	            metadataUrl = _ref.metadataUrl,
	            metadata = _ref.metadata,
	            signingKeys = _ref.signingKeys,
	            client_id = _ref.client_id,
	            client_secret = _ref.client_secret,
	            _ref$response_type = _ref.response_type,
	            response_type = _ref$response_type === undefined ? DefaultResponseType : _ref$response_type,
	            _ref$scope = _ref.scope,
	            scope = _ref$scope === undefined ? DefaultScope : _ref$scope,
	            redirect_uri = _ref.redirect_uri,
	            post_logout_redirect_uri = _ref.post_logout_redirect_uri,
	            prompt = _ref.prompt,
	            display = _ref.display,
	            max_age = _ref.max_age,
	            ui_locales = _ref.ui_locales,
	            acr_values = _ref.acr_values,
	            resource = _ref.resource,
	            _ref$filterProtocolCl = _ref.filterProtocolClaims,
	            filterProtocolClaims = _ref$filterProtocolCl === undefined ? true : _ref$filterProtocolCl,
	            _ref$loadUserInfo = _ref.loadUserInfo,
	            loadUserInfo = _ref$loadUserInfo === undefined ? true : _ref$loadUserInfo,
	            _ref$staleStateAge = _ref.staleStateAge,
	            staleStateAge = _ref$staleStateAge === undefined ? DefaultStaleStateAge : _ref$staleStateAge,
	            _ref$clockSkew = _ref.clockSkew,
	            clockSkew = _ref$clockSkew === undefined ? DefaultClockSkewInSeconds : _ref$clockSkew,
	            _ref$stateStore = _ref.stateStore,
	            stateStore = _ref$stateStore === undefined ? new _WebStorageStateStore2.default() : _ref$stateStore,
	            _ref$ResponseValidato = _ref.ResponseValidatorCtor,
	            ResponseValidatorCtor = _ref$ResponseValidato === undefined ? _ResponseValidator2.default : _ref$ResponseValidato,
	            _ref$MetadataServiceC = _ref.MetadataServiceCtor,
	            MetadataServiceCtor = _ref$MetadataServiceC === undefined ? _MetadataService2.default : _ref$MetadataServiceC,
	            _ref$extraQueryParams = _ref.extraQueryParams,
	            extraQueryParams = _ref$extraQueryParams === undefined ? {} : _ref$extraQueryParams;
	
	        _classCallCheck(this, OidcClientSettings);
	
	        this._authority = authority;
	        this._metadataUrl = metadataUrl;
	        this._metadata = metadata;
	        this._signingKeys = signingKeys;
	
	        this._client_id = client_id;
	        this._client_secret = client_secret;
	        this._response_type = response_type;
	        this._scope = scope;
	        this._redirect_uri = redirect_uri;
	        this._post_logout_redirect_uri = post_logout_redirect_uri;
	
	        this._prompt = prompt;
	        this._display = display;
	        this._max_age = max_age;
	        this._ui_locales = ui_locales;
	        this._acr_values = acr_values;
	        this._resource = resource;
	
	        this._filterProtocolClaims = !!filterProtocolClaims;
	        this._loadUserInfo = !!loadUserInfo;
	        this._staleStateAge = staleStateAge;
	        this._clockSkew = clockSkew;
	
	        this._stateStore = stateStore;
	        this._validator = new ResponseValidatorCtor(this);
	        this._metadataService = new MetadataServiceCtor(this);
	
	        this._extraQueryParams = (typeof extraQueryParams === 'undefined' ? 'undefined' : _typeof(extraQueryParams)) === 'object' ? extraQueryParams : {};
	    }
	
	    // client config
	
	
	    _createClass(OidcClientSettings, [{
	        key: 'client_id',
	        get: function get() {
	            return this._client_id;
	        },
	        set: function set(value) {
	            if (!this._client_id) {
	                // one-time set only
	                this._client_id = value;
	            } else {
	                _Log2.default.error("client_id has already been assigned.");
	                throw new Error("client_id has already been assigned.");
	            }
	        }
	    }, {
	        key: 'client_secret',
	        get: function get() {
	            return this._client_secret;
	        }
	    }, {
	        key: 'response_type',
	        get: function get() {
	            return this._response_type;
	        }
	    }, {
	        key: 'scope',
	        get: function get() {
	            return this._scope;
	        }
	    }, {
	        key: 'redirect_uri',
	        get: function get() {
	            return this._redirect_uri;
	        }
	    }, {
	        key: 'post_logout_redirect_uri',
	        get: function get() {
	            return this._post_logout_redirect_uri;
	        }
	
	        // optional protocol params
	
	    }, {
	        key: 'prompt',
	        get: function get() {
	            return this._prompt;
	        }
	    }, {
	        key: 'display',
	        get: function get() {
	            return this._display;
	        }
	    }, {
	        key: 'max_age',
	        get: function get() {
	            return this._max_age;
	        }
	    }, {
	        key: 'ui_locales',
	        get: function get() {
	            return this._ui_locales;
	        }
	    }, {
	        key: 'acr_values',
	        get: function get() {
	            return this._acr_values;
	        }
	    }, {
	        key: 'resource',
	        get: function get() {
	            return this._resource;
	        }
	
	        // metadata
	
	    }, {
	        key: 'authority',
	        get: function get() {
	            return this._authority;
	        },
	        set: function set(value) {
	            if (!this._authority) {
	                // one-time set only
	                this._authority = value;
	            } else {
	                _Log2.default.error("authority has already been assigned.");
	                throw new Error("authority has already been assigned.");
	            }
	        }
	    }, {
	        key: 'metadataUrl',
	        get: function get() {
	            if (!this._metadataUrl) {
	                this._metadataUrl = this.authority;
	
	                if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
	                    if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
	                        this._metadataUrl += '/';
	                    }
	                    this._metadataUrl += OidcMetadataUrlPath;
	                }
	            }
	
	            return this._metadataUrl;
	        }
	
	        // settable/cachable metadata values
	
	    }, {
	        key: 'metadata',
	        get: function get() {
	            return this._metadata;
	        },
	        set: function set(value) {
	            this._metadata = value;
	        }
	    }, {
	        key: 'signingKeys',
	        get: function get() {
	            return this._signingKeys;
	        },
	        set: function set(value) {
	            this._signingKeys = value;
	        }
	
	        // behavior flags
	
	    }, {
	        key: 'filterProtocolClaims',
	        get: function get() {
	            return this._filterProtocolClaims;
	        }
	    }, {
	        key: 'loadUserInfo',
	        get: function get() {
	            return this._loadUserInfo;
	        }
	    }, {
	        key: 'staleStateAge',
	        get: function get() {
	            return this._staleStateAge;
	        }
	    }, {
	        key: 'clockSkew',
	        get: function get() {
	            return this._clockSkew;
	        }
	    }, {
	        key: 'stateStore',
	        get: function get() {
	            return this._stateStore;
	        }
	    }, {
	        key: 'validator',
	        get: function get() {
	            return this._validator;
	        }
	    }, {
	        key: 'metadataService',
	        get: function get() {
	            return this._metadataService;
	        }
	
	        // extra query params
	
	    }, {
	        key: 'extraQueryParams',
	        get: function get() {
	            return this._extraQueryParams;
	        },
	        set: function set(value) {
	            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	                this._extraQueryParams = value;
	            } else {
	                this._extraQueryParams = {};
	            }
	        }
	    }]);
	
	    return OidcClientSettings;
	}();
	
	exports.default = OidcClientSettings;
	module.exports = exports['default'];

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var WebStorageStateStore = function () {
	    function WebStorageStateStore() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            _ref$prefix = _ref.prefix,
	            prefix = _ref$prefix === undefined ? "oidc." : _ref$prefix,
	            _ref$store = _ref.store,
	            store = _ref$store === undefined ? _Global2.default.localStorage : _ref$store;
	
	        _classCallCheck(this, WebStorageStateStore);
	
	        this._store = store;
	        this._prefix = prefix;
	    }
	
	    WebStorageStateStore.prototype.set = function set(key, value) {
	        _Log2.default.debug("WebStorageStateStore.set", key);
	
	        key = this._prefix + key;
	
	        this._store.setItem(key, value);
	
	        return Promise.resolve();
	    };
	
	    WebStorageStateStore.prototype.get = function get(key) {
	        _Log2.default.debug("WebStorageStateStore.get", key);
	
	        key = this._prefix + key;
	
	        var item = this._store.getItem(key);
	
	        return Promise.resolve(item);
	    };
	
	    WebStorageStateStore.prototype.remove = function remove(key) {
	        _Log2.default.debug("WebStorageStateStore.remove", key);
	
	        key = this._prefix + key;
	
	        var item = this._store.getItem(key);
	        this._store.removeItem(key);
	
	        return Promise.resolve(item);
	    };
	
	    WebStorageStateStore.prototype.getAllKeys = function getAllKeys() {
	        _Log2.default.debug("WebStorageStateStore.getAllKeys");
	
	        var keys = [];
	
	        for (var index = 0; index < this._store.length; index++) {
	            var key = this._store.key(index);
	
	            if (key.indexOf(this._prefix) === 0) {
	                keys.push(key.substr(this._prefix.length));
	            }
	        }
	
	        return Promise.resolve(keys);
	    };
	
	    return WebStorageStateStore;
	}();
	
	exports.default = WebStorageStateStore;
	module.exports = exports['default'];

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var timer = {
	    setInterval: function (_setInterval) {
	        function setInterval(_x, _x2) {
	            return _setInterval.apply(this, arguments);
	        }
	
	        setInterval.toString = function () {
	            return _setInterval.toString();
	        };
	
	        return setInterval;
	    }(function (cb, duration) {
	        return setInterval(cb, duration);
	    }),
	    clearInterval: function (_clearInterval) {
	        function clearInterval(_x3) {
	            return _clearInterval.apply(this, arguments);
	        }
	
	        clearInterval.toString = function () {
	            return _clearInterval.toString();
	        };
	
	        return clearInterval;
	    }(function (handle) {
	        return clearInterval(handle);
	    })
	};
	
	var testing = false;
	var request = null;
	
	var Global = function () {
	    function Global() {
	        _classCallCheck(this, Global);
	    }
	
	    Global._testing = function _testing() {
	        testing = true;
	    };
	
	    Global.setXMLHttpRequest = function setXMLHttpRequest(newRequest) {
	        request = newRequest;
	    };
	
	    _createClass(Global, null, [{
	        key: "location",
	        get: function get() {
	            if (!testing) {
	                return location;
	            }
	        }
	    }, {
	        key: "localStorage",
	        get: function get() {
	            if (!testing) {
	                return localStorage;
	            }
	        }
	    }, {
	        key: "sessionStorage",
	        get: function get() {
	            if (!testing) {
	                return sessionStorage;
	            }
	        }
	    }, {
	        key: "XMLHttpRequest",
	        get: function get() {
	            if (!testing) {
	                return request || XMLHttpRequest;
	            }
	        }
	    }, {
	        key: "timer",
	        get: function get() {
	            if (!testing) {
	                return timer;
	            }
	        }
	    }]);
	
	    return Global;
	}();
	
	exports.default = Global;
	;
	module.exports = exports['default'];

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _MetadataService = __webpack_require__(7);
	
	var _MetadataService2 = _interopRequireDefault(_MetadataService);
	
	var _UserInfoService = __webpack_require__(9);
	
	var _UserInfoService2 = _interopRequireDefault(_UserInfoService);
	
	var _ErrorResponse = __webpack_require__(10);
	
	var _ErrorResponse2 = _interopRequireDefault(_ErrorResponse);
	
	var _JoseUtil = __webpack_require__(11);
	
	var _JoseUtil2 = _interopRequireDefault(_JoseUtil);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var ProtocolClaims = ["nonce", "at_hash", "iat", "nbf", "exp", "aud", "iss", "c_hash"];
	
	var ResponseValidator = function () {
	    function ResponseValidator(settings) {
	        var MetadataServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _MetadataService2.default;
	        var UserInfoServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _UserInfoService2.default;
	        var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil2.default;
	
	        _classCallCheck(this, ResponseValidator);
	
	        if (!settings) {
	            _Log2.default.error("No settings passed to ResponseValidator");
	            throw new Error("settings");
	        }
	
	        this._settings = settings;
	        this._metadataService = new MetadataServiceCtor(this._settings);
	        this._userInfoService = new UserInfoServiceCtor(this._settings);
	        this._joseUtil = joseUtil;
	    }
	
	    ResponseValidator.prototype.validateSigninResponse = function validateSigninResponse(state, response) {
	        var _this = this;
	
	        _Log2.default.debug("ResponseValidator.validateSigninResponse");
	
	        return this._processSigninParams(state, response).then(function (response) {
	            _Log2.default.debug("state processed");
	            return _this._validateTokens(state, response).then(function (response) {
	                _Log2.default.debug("tokens validated");
	                return _this._processClaims(response).then(function (response) {
	                    _Log2.default.debug("claims processed");
	                    return response;
	                });
	            });
	        });
	    };
	
	    ResponseValidator.prototype.validateSignoutResponse = function validateSignoutResponse(state, response) {
	        _Log2.default.debug("ResponseValidator.validateSignoutResponse");
	
	        if (state.id !== response.state) {
	            _Log2.default.error("State does not match");
	            return Promise.reject(new Error("State does not match"));
	        }
	
	        // now that we know the state matches, take the stored data
	        // and set it into the response so callers can get their state
	        // this is important for both success & error outcomes
	        _Log2.default.debug("state validated");
	        response.state = state.data;
	
	        if (response.error) {
	            _Log2.default.warn("Response was error", response.error);
	            return Promise.reject(new _ErrorResponse2.default(response));
	        }
	
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._processSigninParams = function _processSigninParams(state, response) {
	        _Log2.default.debug("ResponseValidator._processSigninParams");
	
	        if (state.id !== response.state) {
	            _Log2.default.error("State does not match");
	            return Promise.reject(new Error("State does not match"));
	        }
	
	        if (!state.client_id) {
	            _Log2.default.error("No client_id on state");
	            return Promise.reject(new Error("No client_id on state"));
	        }
	
	        if (!state.authority) {
	            _Log2.default.error("No authority on state");
	            return Promise.reject(new Error("No authority on state"));
	        }
	
	        // this allows the authority to be loaded from the signin state
	        if (!this._settings.authority) {
	            this._settings.authority = state.authority;
	        }
	        // ensure we're using the correct authority if the authority is not loaded from signin state
	        else if (this._settings.authority && this._settings.authority !== state.authority) {
	                _Log2.default.error("authority mismatch on settings vs. signin state");
	                return Promise.reject(new Error("authority mismatch on settings vs. signin state"));
	            }
	        // this allows the client_id to be loaded from the signin state
	        if (!this._settings.client_id) {
	            this._settings.client_id = state.client_id;
	        }
	        // ensure we're using the correct client_id if the client_id is not loaded from signin state
	        else if (this._settings.client_id && this._settings.client_id !== state.client_id) {
	                _Log2.default.error("client_id mismatch on settings vs. signin state");
	                return Promise.reject(new Error("client_id mismatch on settings vs. signin state"));
	            }
	
	        // now that we know the state matches, take the stored data
	        // and set it into the response so callers can get their state
	        // this is important for both success & error outcomes
	        _Log2.default.debug("state validated");
	        response.state = state.data;
	
	        if (response.error) {
	            _Log2.default.warn("Response was error", response.error);
	            return Promise.reject(new _ErrorResponse2.default(response));
	        }
	
	        if (state.nonce && !response.id_token) {
	            _Log2.default.error("Expecting id_token in response");
	            return Promise.reject(new Error("No id_token in response"));
	        }
	
	        if (!state.nonce && response.id_token) {
	            _Log2.default.error("Not expecting id_token in response");
	            return Promise.reject(new Error("Unexpected id_token in response"));
	        }
	
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._processClaims = function _processClaims(response) {
	        var _this2 = this;
	
	        _Log2.default.debug("ResponseValidator._processClaims");
	
	        if (response.isOpenIdConnect) {
	            _Log2.default.debug("response is OIDC, processing claims");
	
	            response.profile = this._filterProtocolClaims(response.profile);
	
	            if (this._settings.loadUserInfo && response.access_token) {
	                _Log2.default.debug("loading user info");
	
	                return this._userInfoService.getClaims(response.access_token).then(function (claims) {
	                    _Log2.default.debug("user info claims received from user info endpoint");
	
	                    if (claims.sub !== response.profile.sub) {
	                        _Log2.default.error("sub from user info endpoint does not match sub in access_token");
	                        return Promise.reject(new Error("sub from user info endpoint does not match sub in access_token"));
	                    }
	
	                    response.profile = _this2._mergeClaims(response.profile, claims);
	                    _Log2.default.debug("user info claims received, updated profile:", response.profile);
	
	                    return response;
	                });
	            } else {
	                _Log2.default.debug("not loading user info");
	            }
	        } else {
	            _Log2.default.debug("response is not OIDC, not processing claims");
	        }
	
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._mergeClaims = function _mergeClaims(claims1, claims2) {
	        var result = Object.assign({}, claims1);
	
	        for (var name in claims2) {
	            var values = claims2[name];
	            if (!Array.isArray(values)) {
	                values = [values];
	            }
	
	            for (var i = 0; i < values.length; i++) {
	                var value = values[i];
	                if (!result[name]) {
	                    result[name] = value;
	                } else if (Array.isArray(result[name])) {
	                    if (result[name].indexOf(value) < 0) {
	                        result[name].push(value);
	                    }
	                } else if (result[name] !== value) {
	                    result[name] = [result[name], value];
	                }
	            }
	        }
	
	        return result;
	    };
	
	    ResponseValidator.prototype._filterProtocolClaims = function _filterProtocolClaims(claims) {
	        _Log2.default.debug("ResponseValidator._filterProtocolClaims, incoming claims:", claims);
	
	        var result = Object.assign({}, claims);
	
	        if (this._settings._filterProtocolClaims) {
	            ProtocolClaims.forEach(function (type) {
	                delete result[type];
	            });
	
	            _Log2.default.debug("protocol claims filtered", result);
	        } else {
	            _Log2.default.debug("protocol claims not filtered");
	        }
	
	        return result;
	    };
	
	    ResponseValidator.prototype._validateTokens = function _validateTokens(state, response) {
	        _Log2.default.debug("ResponseValidator._validateTokens");
	
	        if (response.id_token) {
	
	            if (response.access_token) {
	                _Log2.default.debug("Validating id_token and access_token");
	                return this._validateIdTokenAndAccessToken(state, response);
	            }
	
	            _Log2.default.debug("Validating id_token");
	            return this._validateIdToken(state, response);
	        }
	
	        _Log2.default.debug("No id_token to validate");
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._validateIdTokenAndAccessToken = function _validateIdTokenAndAccessToken(state, response) {
	        var _this3 = this;
	
	        _Log2.default.debug("ResponseValidator._validateIdTokenAndAccessToken");
	
	        return this._validateIdToken(state, response).then(function (response) {
	            return _this3._validateAccessToken(response);
	        });
	    };
	
	    ResponseValidator.prototype._validateIdToken = function _validateIdToken(state, response) {
	        var _this4 = this;
	
	        _Log2.default.debug("ResponseValidator._validateIdToken");
	
	        if (!state.nonce) {
	            _Log2.default.error("No nonce on state");
	            return Promise.reject(new Error("No nonce on state"));
	        }
	
	        var jwt = this._joseUtil.parseJwt(response.id_token);
	        if (!jwt || !jwt.header || !jwt.payload) {
	            _Log2.default.error("Failed to parse id_token", jwt);
	            return Promise.reject(new Error("Failed to parse id_token"));
	        }
	
	        if (state.nonce !== jwt.payload.nonce) {
	            _Log2.default.error("Invalid nonce in id_token");
	            return Promise.reject(new Error("Invalid nonce in id_token"));
	        }
	
	        var kid = jwt.header.kid;
	
	        return this._metadataService.getIssuer().then(function (issuer) {
	            _Log2.default.debug("Received issuer");
	
	            return _this4._metadataService.getSigningKeys().then(function (keys) {
	                if (!keys) {
	                    _Log2.default.error("No signing keys from metadata");
	                    return Promise.reject(new Error("No signing keys from metadata"));
	                }
	
	                _Log2.default.debug("Received signing keys");
	                var key = void 0;
	                if (!kid) {
	                    keys = _this4._filterByAlg(keys, jwt.header.alg);
	
	                    if (keys.length > 1) {
	                        _Log2.default.error("No kid found in id_token and more than one key found in metadata");
	                        return Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
	                    } else {
	                        // kid is mandatory only when there are multiple keys in the referenced JWK Set document
	                        // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
	                        key = keys[0];
	                    }
	                } else {
	                    key = keys.filter(function (key) {
	                        return key.kid === kid;
	                    })[0];
	                }
	
	                if (!key) {
	                    _Log2.default.error("No key matching kid or alg found in signing keys");
	                    return Promise.reject(new Error("No key matching kid or alg found in signing keys"));
	                }
	
	                var audience = state.client_id;
	
	                var clockSkewInSeconds = _this4._settings.clockSkew;
	                _Log2.default.debug("Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);
	
	                return _this4._joseUtil.validateJwt(response.id_token, key, issuer, audience, clockSkewInSeconds).then(function () {
	                    _Log2.default.debug("JWT validation successful");
	
	                    if (!jwt.payload.sub) {
	                        _Log2.default.error("No sub present in id_token");
	                        return Promise.reject(new Error("No sub present in id_token"));
	                    }
	
	                    response.profile = jwt.payload;
	
	                    return response;
	                });
	            });
	        });
	    };
	
	    ResponseValidator.prototype._filterByAlg = function _filterByAlg(keys, alg) {
	        _Log2.default.debug("ResponseValidator._filterByAlg", alg);
	
	        var kty = null;
	        if (alg.startsWith("RS")) {
	            kty = "RSA";
	        } else if (alg.startsWith("PS")) {
	            kty = "PS";
	        } else if (alg.startsWith("ES")) {
	            kty = "EC";
	        } else {
	            _Log2.default.debug("alg not supported: ", alg);
	            return [];
	        }
	
	        _Log2.default.debug("Looking for keys that match kty: ", kty);
	
	        keys = keys.filter(function (key) {
	            return key.kty === kty;
	        });
	
	        _Log2.default.debug("Number of keys that match kty: ", kty, keys.length);
	
	        return keys;
	    };
	
	    ResponseValidator.prototype._validateAccessToken = function _validateAccessToken(response) {
	        _Log2.default.debug("ResponseValidator._validateAccessToken");
	
	        if (!response.profile) {
	            _Log2.default.error("No profile loaded from id_token");
	            return Promise.reject(new Error("No profile loaded from id_token"));
	        }
	
	        if (!response.profile.at_hash) {
	            _Log2.default.error("No at_hash in id_token");
	            return Promise.reject(new Error("No at_hash in id_token"));
	        }
	
	        if (!response.id_token) {
	            _Log2.default.error("No id_token");
	            return Promise.reject(new Error("No id_token"));
	        }
	
	        var jwt = this._joseUtil.parseJwt(response.id_token);
	        if (!jwt || !jwt.header) {
	            _Log2.default.error("Failed to parse id_token", jwt);
	            return Promise.reject(new Error("Failed to parse id_token"));
	        }
	
	        var hashAlg = jwt.header.alg;
	        if (!hashAlg || hashAlg.length !== 5) {
	            _Log2.default.error("Unsupported alg:", hashAlg);
	            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
	        }
	
	        var hashBits = hashAlg.substr(2, 3);
	        if (!hashBits) {
	            _Log2.default.error("Unsupported alg:", hashAlg, hashBits);
	            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
	        }
	
	        hashBits = parseInt(hashBits);
	        if (hashBits !== 256 && hashBits !== 384 && hashBits !== 512) {
	            _Log2.default.error("Unsupported alg:", hashAlg, hashBits);
	            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
	        }
	
	        var sha = "sha" + hashBits;
	        var hash = this._joseUtil.hashString(response.access_token, sha);
	        if (!hash) {
	            _Log2.default.error("access_token hash failed:", sha);
	            return Promise.reject(new Error("Failed to validate at_hash"));
	        }
	
	        var left = hash.substr(0, hash.length / 2);
	        var left_b64u = this._joseUtil.hexToBase64Url(left);
	        if (left_b64u !== response.profile.at_hash) {
	            _Log2.default.error("Failed to validate at_hash", left_b64u, response.profile.at_hash);
	            return Promise.reject(new Error("Failed to validate at_hash"));
	        }
	
	        return Promise.resolve(response);
	    };
	
	    return ResponseValidator;
	}();
	
	exports.default = ResponseValidator;
	module.exports = exports['default'];

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _JsonService = __webpack_require__(8);
	
	var _JsonService2 = _interopRequireDefault(_JsonService);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcMetadataUrlPath = '.well-known/openid-configuration';
	
	var MetadataService = function () {
	    function MetadataService(settings) {
	        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService2.default;
	
	        _classCallCheck(this, MetadataService);
	
	        if (!settings) {
	            _Log2.default.error("No settings passed to MetadataService");
	            throw new Error("settings");
	        }
	
	        this._settings = settings;
	        this._jsonService = new JsonServiceCtor();
	    }
	
	    MetadataService.prototype.getMetadata = function getMetadata() {
	        var _this = this;
	
	        _Log2.default.debug("MetadataService.getMetadata");
	
	        if (this._settings.metadata) {
	            _Log2.default.debug("Returning metadata from settings");
	            return Promise.resolve(this._settings.metadata);
	        }
	
	        if (!this.metadataUrl) {
	            _Log2.default.error("No authority or metadataUrl configured on settings");
	            return Promise.reject(new Error("No authority or metadataUrl configured on settings"));
	        }
	
	        _Log2.default.debug("getting metadata from", this.metadataUrl);
	
	        return this._jsonService.getJson(this.metadataUrl).then(function (metadata) {
	            _Log2.default.debug("json received");
	            _this._settings.metadata = metadata;
	            return metadata;
	        });
	    };
	
	    MetadataService.prototype.getIssuer = function getIssuer() {
	        _Log2.default.debug("MetadataService.getIssuer");
	        return this._getMetadataProperty("issuer");
	    };
	
	    MetadataService.prototype.getAuthorizationEndpoint = function getAuthorizationEndpoint() {
	        _Log2.default.debug("MetadataService.getAuthorizationEndpoint");
	        return this._getMetadataProperty("authorization_endpoint");
	    };
	
	    MetadataService.prototype.getUserInfoEndpoint = function getUserInfoEndpoint() {
	        _Log2.default.debug("MetadataService.getUserInfoEndpoint");
	        return this._getMetadataProperty("userinfo_endpoint");
	    };
	
	    MetadataService.prototype.getTokenEndpoint = function getTokenEndpoint() {
	        _Log2.default.debug("MetadataService.getTokenEndpoint");
	        return this._getMetadataProperty("token_endpoint", true);
	    };
	
	    MetadataService.prototype.getCheckSessionIframe = function getCheckSessionIframe() {
	        _Log2.default.debug("MetadataService.getCheckSessionIframe");
	        return this._getMetadataProperty("check_session_iframe", true);
	    };
	
	    MetadataService.prototype.getEndSessionEndpoint = function getEndSessionEndpoint() {
	        _Log2.default.debug("MetadataService.getEndSessionEndpoint");
	        return this._getMetadataProperty("end_session_endpoint", true);
	    };
	
	    MetadataService.prototype.getRevocationEndpoint = function getRevocationEndpoint() {
	        _Log2.default.debug("MetadataService.getRevocationEndpoint");
	        return this._getMetadataProperty("revocation_endpoint", true);
	    };
	
	    MetadataService.prototype._getMetadataProperty = function _getMetadataProperty(name) {
	        var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	        _Log2.default.debug("MetadataService._getMetadataProperty", name);
	
	        return this.getMetadata().then(function (metadata) {
	            _Log2.default.debug("metadata recieved");
	
	            if (metadata[name] === undefined) {
	
	                if (optional === true) {
	                    _Log2.default.warn("Metadata does not contain optional property " + name);
	                    return undefined;
	                } else {
	                    _Log2.default.error("Metadata does not contain property " + name);
	                    throw new Error("Metadata does not contain property " + name);
	                }
	            }
	
	            return metadata[name];
	        });
	    };
	
	    MetadataService.prototype.getSigningKeys = function getSigningKeys() {
	        var _this2 = this;
	
	        _Log2.default.debug("MetadataService.getSigningKeys");
	
	        if (this._settings.signingKeys) {
	            _Log2.default.debug("Returning signingKeys from settings");
	            return Promise.resolve(this._settings.signingKeys);
	        }
	
	        return this._getMetadataProperty("jwks_uri").then(function (jwks_uri) {
	            _Log2.default.debug("jwks_uri received", jwks_uri);
	
	            return _this2._jsonService.getJson(jwks_uri).then(function (keySet) {
	                _Log2.default.debug("key set received", keySet);
	
	                if (!keySet.keys) {
	                    _Log2.default.error("Missing keys on keyset");
	                    throw new Error("Missing keys on keyset");
	                }
	
	                _this2._settings.signingKeys = keySet.keys;
	                return _this2._settings.signingKeys;
	            });
	        });
	    };
	
	    _createClass(MetadataService, [{
	        key: 'metadataUrl',
	        get: function get() {
	            if (!this._metadataUrl) {
	                if (this._settings.metadataUrl) {
	                    this._metadataUrl = this._settings.metadataUrl;
	                } else {
	                    this._metadataUrl = this._settings.authority;
	
	                    if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
	                        if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
	                            this._metadataUrl += '/';
	                        }
	                        this._metadataUrl += OidcMetadataUrlPath;
	                    }
	                }
	            }
	
	            return this._metadataUrl;
	        }
	    }]);
	
	    return MetadataService;
	}();
	
	exports.default = MetadataService;
	module.exports = exports['default'];

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var JsonService = function () {
	    function JsonService() {
	        var XMLHttpRequestCtor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Global2.default.XMLHttpRequest;
	
	        _classCallCheck(this, JsonService);
	
	        this._XMLHttpRequest = XMLHttpRequestCtor;
	    }
	
	    JsonService.prototype.getJson = function getJson(url, token) {
	        var _this = this;
	
	        _Log2.default.debug("JsonService.getJson", url);
	
	        if (!url) {
	            _Log2.default.error("No url passed");
	            throw new Error("url");
	        }
	
	        return new Promise(function (resolve, reject) {
	
	            var req = new _this._XMLHttpRequest();
	            req.open('GET', url);
	
	            req.onload = function () {
	                _Log2.default.debug("HTTP response received, status", req.status);
	
	                if (req.status === 200) {
	                    try {
	                        resolve(JSON.parse(req.responseText));
	                    } catch (e) {
	                        _Log2.default.error("Error parsing JSON response", e.message);
	                        reject(e);
	                    }
	                } else {
	                    reject(Error(req.statusText + " (" + req.status + ")"));
	                }
	            };
	
	            req.onerror = function () {
	                _Log2.default.error("network error");
	                reject(Error("Network Error"));
	            };
	
	            if (token) {
	                _Log2.default.debug("token passed, setting Authorization header");
	                req.setRequestHeader("Authorization", "Bearer " + token);
	            }
	
	            req.send();
	        });
	    };
	
	    return JsonService;
	}();
	
	exports.default = JsonService;
	module.exports = exports['default'];

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _JsonService = __webpack_require__(8);
	
	var _JsonService2 = _interopRequireDefault(_JsonService);
	
	var _MetadataService = __webpack_require__(7);
	
	var _MetadataService2 = _interopRequireDefault(_MetadataService);
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UserInfoService = function () {
	    function UserInfoService(settings) {
	        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService2.default;
	        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService2.default;
	
	        _classCallCheck(this, UserInfoService);
	
	        if (!settings) {
	            _Log2.default.error("No settings passed to UserInfoService");
	            throw new Error("settings");
	        }
	
	        this._settings = settings;
	        this._jsonService = new JsonServiceCtor();
	        this._metadataService = new MetadataServiceCtor(this._settings);
	    }
	
	    UserInfoService.prototype.getClaims = function getClaims(token) {
	        var _this = this;
	
	        _Log2.default.debug("UserInfoService.getClaims");
	
	        if (!token) {
	            _Log2.default.error("No token passed");
	            return Promise.reject(new Error("A token is required"));
	        }
	
	        return this._metadataService.getUserInfoEndpoint().then(function (url) {
	            _Log2.default.debug("received userinfo url", url);
	
	            return _this._jsonService.getJson(url, token).then(function (claims) {
	                _Log2.default.debug("claims received", claims);
	                return claims;
	            });
	        });
	    };
	
	    return UserInfoService;
	}();
	
	exports.default = UserInfoService;
	module.exports = exports['default'];

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var ErrorResponse = function (_Error) {
	    _inherits(ErrorResponse, _Error);
	
	    function ErrorResponse() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            error = _ref.error,
	            error_description = _ref.error_description,
	            error_uri = _ref.error_uri,
	            state = _ref.state;
	
	        _classCallCheck(this, ErrorResponse);
	
	        if (!error) {
	            _Log2.default.error("No error passed to ErrorResponse");
	            throw new Error("error");
	        }
	
	        var _this = _possibleConstructorReturn(this, _Error.call(this, error_description || error));
	
	        _this.name = "ErrorResponse";
	
	        _this.error = error;
	        _this.error_description = error_description;
	        _this.error_uri = error_uri;
	
	        _this.state = state;
	        return _this;
	    }
	
	    return ErrorResponse;
	}(Error);
	
	exports.default = ErrorResponse;
	module.exports = exports['default'];

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _jsrsasign = __webpack_require__(12);
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	//import { jws, KEYUTIL as KeyUtil, X509, crypto, hextob64u, b64tohex } from 'jsrsasign';
	
	
	var AllowedSigningAlgs = ['RS256', 'RS384', 'RS512', 'PS256', 'PS384', 'PS512', 'ES256', 'ES384', 'ES512'];
	
	var JoseUtil = function () {
	    function JoseUtil() {
	        _classCallCheck(this, JoseUtil);
	    }
	
	    JoseUtil.parseJwt = function parseJwt(jwt) {
	        _Log2.default.debug("JoseUtil.parseJwt");
	        try {
	            var token = _jsrsasign.jws.JWS.parse(jwt);
	            return {
	                header: token.headerObj,
	                payload: token.payloadObj
	            };
	        } catch (e) {
	            _Log2.default.error(e);
	        }
	    };
	
	    JoseUtil.validateJwt = function validateJwt(jwt, key, issuer, audience, clockSkew, now) {
	        _Log2.default.debug("JoseUtil.validateJwt");
	
	        try {
	            if (key.kty === "RSA") {
	                if (key.e && key.n) {
	                    key = _jsrsasign.KEYUTIL.getKey(key);
	                } else if (key.x5c && key.x5c.length) {
	                    var hex = (0, _jsrsasign.b64tohex)(key.x5c[0]);
	                    key = _jsrsasign.X509.getPublicKeyFromCertHex(hex);
	                } else {
	                    _Log2.default.error("RSA key missing key material", key);
	                    return Promise.reject(new Error("RSA key missing key material"));
	                }
	            } else if (key.kty === "EC") {
	                if (key.crv && key.x && key.y) {
	                    key = _jsrsasign.KEYUTIL.getKey(key);
	                } else {
	                    _Log2.default.error("EC key missing key material", key);
	                    return Promise.reject(new Error("EC key missing key material"));
	                }
	            } else {
	                _Log2.default.error("Unsupported key type", key && key.kty);
	                return Promise.reject(new Error("Unsupported key type: " + key && key.kty));
	            }
	
	            return JoseUtil._validateJwt(jwt, key, issuer, audience, clockSkew, now);
	        } catch (e) {
	            _Log2.default.error(e && e.message || e);
	            return Promise.reject("JWT validation failed");
	        }
	    };
	
	    JoseUtil._validateJwt = function _validateJwt(jwt, key, issuer, audience, clockSkew, now) {
	        _Log2.default.debug("JoseUtil._validateJwt");
	
	        if (!clockSkew) {
	            clockSkew = 0;
	        }
	
	        if (!now) {
	            now = parseInt(Date.now() / 1000);
	        }
	
	        var payload = JoseUtil.parseJwt(jwt).payload;
	
	        if (!payload.iss) {
	            _Log2.default.error("issuer was not provided");
	            return Promise.reject(new Error("issuer was not provided"));
	        }
	        if (payload.iss !== issuer) {
	            _Log2.default.error("Invalid issuer in token", payload.iss);
	            return Promise.reject(new Error("Invalid issuer in token: " + payload.iss));
	        }
	
	        if (!payload.aud) {
	            _Log2.default.error("aud was not provided");
	            return Promise.reject(new Error("aud was not provided"));
	        }
	        var validAudience = payload.aud === audience || Array.isArray(payload.aud) && payload.aud.indexOf(audience) >= 0;
	        if (!validAudience) {
	            _Log2.default.error("Invalid audience in token", payload.aud);
	            return Promise.reject(new Error("Invalid audience in token: " + payload.aud));
	        }
	
	        var lowerNow = now + clockSkew;
	        var upperNow = now - clockSkew;
	
	        if (!payload.iat) {
	            _Log2.default.error("iat was not provided");
	            return Promise.reject(new Error("iat was not provided"));
	        }
	        if (lowerNow < payload.iat) {
	            _Log2.default.error("iat is in the future", payload.iat);
	            return Promise.reject(new Error("iat is in the future: " + payload.iat));
	        }
	
	        if (payload.nbf && lowerNow < payload.nbf) {
	            _Log2.default.error("nbf is in the future", payload.nbf);
	            return Promise.reject(new Error("nbf is in the future: " + payload.nbf));
	        }
	
	        if (!payload.exp) {
	            _Log2.default.error("exp was not provided");
	            return Promise.reject(new Error("exp was not provided"));
	        }
	        if (payload.exp < upperNow) {
	            _Log2.default.error("exp is in the past", payload.exp);
	            return Promise.reject(new Error("exp is in the past:" + payload.exp));
	        }
	
	        try {
	            if (!_jsrsasign.jws.JWS.verify(jwt, key, AllowedSigningAlgs)) {
	                _Log2.default.error("signature validation failed");
	                return Promise.reject(new Error("signature validation failed"));
	            }
	        } catch (e) {
	            _Log2.default.error(e && e.message || e);
	            return Promise.reject(new Error("signature validation failed"));
	        }
	
	        return Promise.resolve();
	    };
	
	    JoseUtil.hashString = function hashString(value, alg) {
	        _Log2.default.debug("JoseUtil.hashString", value, alg);
	        try {
	            return _jsrsasign.crypto.Util.hashString(value, alg);
	        } catch (e) {
	            _Log2.default.error(e);
	        }
	    };
	
	    JoseUtil.hexToBase64Url = function hexToBase64Url(value) {
	        _Log2.default.debug("JoseUtil.hexToBase64Url", value);
	        try {
	            return (0, _jsrsasign.hextob64u)(value);
	        } catch (e) {
	            _Log2.default.error(e);
	        }
	    };
	
	    return JoseUtil;
	}();
	
	exports.default = JoseUtil;
	module.exports = exports['default'];

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var navigator = {};
	navigator.userAgent = false;
	
	var window = {};
	
	/*!
	Copyright (c) 2011, Yahoo! Inc. All rights reserved.
	Code licensed under the BSD License:
	http://developer.yahoo.com/yui/license.html
	version: 2.9.0
	*/
	if (YAHOO === undefined) {
	  var YAHOO = {};
	}YAHOO.lang = { extend: function extend(g, h, f) {
	    if (!h || !g) {
	      throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");
	    }var d = function d() {};d.prototype = h.prototype;g.prototype = new d();g.prototype.constructor = g;g.superclass = h.prototype;if (h.prototype.constructor == Object.prototype.constructor) {
	      h.prototype.constructor = h;
	    }if (f) {
	      var b;for (b in f) {
	        g.prototype[b] = f[b];
	      }var e = function e() {},
	          c = ["toString", "valueOf"];try {
	        if (/MSIE/.test(navigator.userAgent)) {
	          e = function e(j, i) {
	            for (b = 0; b < c.length; b = b + 1) {
	              var l = c[b],
	                  k = i[l];if (typeof k === "function" && k != Object.prototype[l]) {
	                j[l] = k;
	              }
	            }
	          };
	        }
	      } catch (a) {}e(g.prototype, f);
	    }
	  } };
	/*! CryptoJS v3.1.2 core-fix.js
	 * code.google.com/p/crypto-js
	 * (c) 2009-2013 by Jeff Mott. All rights reserved.
	 * code.google.com/p/crypto-js/wiki/License
	 * THIS IS FIX of 'core.js' to fix Hmac issue.
	 * https://code.google.com/p/crypto-js/issues/detail?id=84
	 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
	 */
	var CryptoJS = CryptoJS || function (e, g) {
	  var a = {};var b = a.lib = {};var j = b.Base = function () {
	    function n() {}return { extend: function extend(p) {
	        n.prototype = this;var o = new n();if (p) {
	          o.mixIn(p);
	        }if (!o.hasOwnProperty("init")) {
	          o.init = function () {
	            o.$super.init.apply(this, arguments);
	          };
	        }o.init.prototype = o;o.$super = this;return o;
	      }, create: function create() {
	        var o = this.extend();o.init.apply(o, arguments);return o;
	      }, init: function init() {}, mixIn: function mixIn(p) {
	        for (var o in p) {
	          if (p.hasOwnProperty(o)) {
	            this[o] = p[o];
	          }
	        }if (p.hasOwnProperty("toString")) {
	          this.toString = p.toString;
	        }
	      }, clone: function clone() {
	        return this.init.prototype.extend(this);
	      } };
	  }();var l = b.WordArray = j.extend({ init: function init(o, n) {
	      o = this.words = o || [];if (n != g) {
	        this.sigBytes = n;
	      } else {
	        this.sigBytes = o.length * 4;
	      }
	    }, toString: function toString(n) {
	      return (n || h).stringify(this);
	    }, concat: function concat(t) {
	      var q = this.words;var p = t.words;var n = this.sigBytes;var s = t.sigBytes;this.clamp();if (n % 4) {
	        for (var r = 0; r < s; r++) {
	          var o = p[r >>> 2] >>> 24 - r % 4 * 8 & 255;q[n + r >>> 2] |= o << 24 - (n + r) % 4 * 8;
	        }
	      } else {
	        for (var r = 0; r < s; r += 4) {
	          q[n + r >>> 2] = p[r >>> 2];
	        }
	      }this.sigBytes += s;return this;
	    }, clamp: function clamp() {
	      var o = this.words;var n = this.sigBytes;o[n >>> 2] &= 4294967295 << 32 - n % 4 * 8;o.length = e.ceil(n / 4);
	    }, clone: function clone() {
	      var n = j.clone.call(this);n.words = this.words.slice(0);return n;
	    }, random: function random(p) {
	      var o = [];for (var n = 0; n < p; n += 4) {
	        o.push(e.random() * 4294967296 | 0);
	      }return new l.init(o, p);
	    } });var m = a.enc = {};var h = m.Hex = { stringify: function stringify(p) {
	      var r = p.words;var o = p.sigBytes;var q = [];for (var n = 0; n < o; n++) {
	        var s = r[n >>> 2] >>> 24 - n % 4 * 8 & 255;q.push((s >>> 4).toString(16));q.push((s & 15).toString(16));
	      }return q.join("");
	    }, parse: function parse(p) {
	      var n = p.length;var q = [];for (var o = 0; o < n; o += 2) {
	        q[o >>> 3] |= parseInt(p.substr(o, 2), 16) << 24 - o % 8 * 4;
	      }return new l.init(q, n / 2);
	    } };var d = m.Latin1 = { stringify: function stringify(q) {
	      var r = q.words;var p = q.sigBytes;var n = [];for (var o = 0; o < p; o++) {
	        var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;n.push(String.fromCharCode(s));
	      }return n.join("");
	    }, parse: function parse(p) {
	      var n = p.length;var q = [];for (var o = 0; o < n; o++) {
	        q[o >>> 2] |= (p.charCodeAt(o) & 255) << 24 - o % 4 * 8;
	      }return new l.init(q, n);
	    } };var c = m.Utf8 = { stringify: function stringify(n) {
	      try {
	        return decodeURIComponent(escape(d.stringify(n)));
	      } catch (o) {
	        throw new Error("Malformed UTF-8 data");
	      }
	    }, parse: function parse(n) {
	      return d.parse(unescape(encodeURIComponent(n)));
	    } };var i = b.BufferedBlockAlgorithm = j.extend({ reset: function reset() {
	      this._data = new l.init();this._nDataBytes = 0;
	    }, _append: function _append(n) {
	      if (typeof n == "string") {
	        n = c.parse(n);
	      }this._data.concat(n);this._nDataBytes += n.sigBytes;
	    }, _process: function _process(w) {
	      var q = this._data;var x = q.words;var n = q.sigBytes;var t = this.blockSize;var v = t * 4;var u = n / v;if (w) {
	        u = e.ceil(u);
	      } else {
	        u = e.max((u | 0) - this._minBufferSize, 0);
	      }var s = u * t;var r = e.min(s * 4, n);if (s) {
	        for (var p = 0; p < s; p += t) {
	          this._doProcessBlock(x, p);
	        }var o = x.splice(0, s);q.sigBytes -= r;
	      }return new l.init(o, r);
	    }, clone: function clone() {
	      var n = j.clone.call(this);n._data = this._data.clone();return n;
	    }, _minBufferSize: 0 });var f = b.Hasher = i.extend({ cfg: j.extend(), init: function init(n) {
	      this.cfg = this.cfg.extend(n);this.reset();
	    }, reset: function reset() {
	      i.reset.call(this);this._doReset();
	    }, update: function update(n) {
	      this._append(n);this._process();return this;
	    }, finalize: function finalize(n) {
	      if (n) {
	        this._append(n);
	      }var o = this._doFinalize();return o;
	    }, blockSize: 512 / 32, _createHelper: function _createHelper(n) {
	      return function (p, o) {
	        return new n.init(o).finalize(p);
	      };
	    }, _createHmacHelper: function _createHmacHelper(n) {
	      return function (p, o) {
	        return new k.HMAC.init(n, o).finalize(p);
	      };
	    } });var k = a.algo = {};return a;
	}(Math);
	/*
	CryptoJS v3.1.2 x64-core-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function (g) {
	  var a = CryptoJS,
	      f = a.lib,
	      e = f.Base,
	      h = f.WordArray,
	      a = a.x64 = {};a.Word = e.extend({ init: function init(b, c) {
	      this.high = b;this.low = c;
	    } });a.WordArray = e.extend({ init: function init(b, c) {
	      b = this.words = b || [];this.sigBytes = c != g ? c : 8 * b.length;
	    }, toX32: function toX32() {
	      for (var b = this.words, c = b.length, a = [], d = 0; d < c; d++) {
	        var e = b[d];a.push(e.high);a.push(e.low);
	      }return h.create(a, this.sigBytes);
	    }, clone: function clone() {
	      for (var b = e.clone.call(this), c = b.words = this.words.slice(0), a = c.length, d = 0; d < a; d++) {
	        c[d] = c[d].clone();
	      }return b;
	    } });
	})();
	
	/*
	CryptoJS v3.1.2 enc-base64.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	  var h = CryptoJS,
	      j = h.lib.WordArray;h.enc.Base64 = { stringify: function stringify(b) {
	      var e = b.words,
	          f = b.sigBytes,
	          c = this._map;b.clamp();b = [];for (var a = 0; a < f; a += 3) {
	        for (var d = (e[a >>> 2] >>> 24 - 8 * (a % 4) & 255) << 16 | (e[a + 1 >>> 2] >>> 24 - 8 * ((a + 1) % 4) & 255) << 8 | e[a + 2 >>> 2] >>> 24 - 8 * ((a + 2) % 4) & 255, g = 0; 4 > g && a + 0.75 * g < f; g++) {
	          b.push(c.charAt(d >>> 6 * (3 - g) & 63));
	        }
	      }if (e = c.charAt(64)) for (; b.length % 4;) {
	        b.push(e);
	      }return b.join("");
	    }, parse: function parse(b) {
	      var e = b.length,
	          f = this._map,
	          c = f.charAt(64);c && (c = b.indexOf(c), -1 != c && (e = c));for (var c = [], a = 0, d = 0; d < e; d++) {
	        if (d % 4) {
	          var g = f.indexOf(b.charAt(d - 1)) << 2 * (d % 4),
	              h = f.indexOf(b.charAt(d)) >>> 6 - 2 * (d % 4);c[a >>> 2] |= (g | h) << 24 - 8 * (a % 4);a++;
	        }
	      }return j.create(c, a);
	    }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
	})();
	
	/*
	CryptoJS v3.1.2 sha256-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function (k) {
	  for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t = [], u = function u(q) {
	    return 4294967296 * (q - (q | 0)) | 0;
	  }, l = 2, b = 0; 64 > b;) {
	    var d;a: {
	      d = l;for (var w = k.sqrt(d), r = 2; r <= w; r++) {
	        if (!(d % r)) {
	          d = !1;break a;
	        }
	      }d = !0;
	    }d && (8 > b && (s[b] = u(k.pow(l, 0.5))), t[b] = u(k.pow(l, 1 / 3)), b++);l++;
	  }var n = [],
	      h = h.SHA256 = j.extend({ _doReset: function _doReset() {
	      this._hash = new v.init(s.slice(0));
	    }, _doProcessBlock: function _doProcessBlock(q, h) {
	      for (var a = this._hash.words, c = a[0], d = a[1], b = a[2], k = a[3], f = a[4], g = a[5], j = a[6], l = a[7], e = 0; 64 > e; e++) {
	        if (16 > e) n[e] = q[h + e] | 0;else {
	          var m = n[e - 15],
	              p = n[e - 2];n[e] = ((m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3) + n[e - 7] + ((p << 15 | p >>> 17) ^ (p << 13 | p >>> 19) ^ p >>> 10) + n[e - 16];
	        }m = l + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + (f & g ^ ~f & j) + t[e] + n[e];p = ((c << 30 | c >>> 2) ^ (c << 19 | c >>> 13) ^ (c << 10 | c >>> 22)) + (c & d ^ c & b ^ d & b);l = j;j = g;g = f;f = k + m | 0;k = b;b = d;d = c;c = m + p | 0;
	      }a[0] = a[0] + c | 0;a[1] = a[1] + d | 0;a[2] = a[2] + b | 0;a[3] = a[3] + k | 0;a[4] = a[4] + f | 0;a[5] = a[5] + g | 0;a[6] = a[6] + j | 0;a[7] = a[7] + l | 0;
	    }, _doFinalize: function _doFinalize() {
	      var d = this._data,
	          b = d.words,
	          a = 8 * this._nDataBytes,
	          c = 8 * d.sigBytes;
	      b[c >>> 5] |= 128 << 24 - c % 32;b[(c + 64 >>> 9 << 4) + 14] = k.floor(a / 4294967296);b[(c + 64 >>> 9 << 4) + 15] = a;d.sigBytes = 4 * b.length;this._process();return this._hash;
	    }, clone: function clone() {
	      var b = j.clone.call(this);b._hash = this._hash.clone();return b;
	    } });g.SHA256 = j._createHelper(h);g.HmacSHA256 = j._createHmacHelper(h);
	})(Math);
	
	/*
	CryptoJS v3.1.2 sha512-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	  function a() {
	    return d.create.apply(d, arguments);
	  }for (var n = CryptoJS, r = n.lib.Hasher, e = n.x64, d = e.Word, T = e.WordArray, e = n.algo, ea = [a(1116352408, 3609767458), a(1899447441, 602891725), a(3049323471, 3964484399), a(3921009573, 2173295548), a(961987163, 4081628472), a(1508970993, 3053834265), a(2453635748, 2937671579), a(2870763221, 3664609560), a(3624381080, 2734883394), a(310598401, 1164996542), a(607225278, 1323610764), a(1426881987, 3590304994), a(1925078388, 4068182383), a(2162078206, 991336113), a(2614888103, 633803317), a(3248222580, 3479774868), a(3835390401, 2666613458), a(4022224774, 944711139), a(264347078, 2341262773), a(604807628, 2007800933), a(770255983, 1495990901), a(1249150122, 1856431235), a(1555081692, 3175218132), a(1996064986, 2198950837), a(2554220882, 3999719339), a(2821834349, 766784016), a(2952996808, 2566594879), a(3210313671, 3203337956), a(3336571891, 1034457026), a(3584528711, 2466948901), a(113926993, 3758326383), a(338241895, 168717936), a(666307205, 1188179964), a(773529912, 1546045734), a(1294757372, 1522805485), a(1396182291, 2643833823), a(1695183700, 2343527390), a(1986661051, 1014477480), a(2177026350, 1206759142), a(2456956037, 344077627), a(2730485921, 1290863460), a(2820302411, 3158454273), a(3259730800, 3505952657), a(3345764771, 106217008), a(3516065817, 3606008344), a(3600352804, 1432725776), a(4094571909, 1467031594), a(275423344, 851169720), a(430227734, 3100823752), a(506948616, 1363258195), a(659060556, 3750685593), a(883997877, 3785050280), a(958139571, 3318307427), a(1322822218, 3812723403), a(1537002063, 2003034995), a(1747873779, 3602036899), a(1955562222, 1575990012), a(2024104815, 1125592928), a(2227730452, 2716904306), a(2361852424, 442776044), a(2428436474, 593698344), a(2756734187, 3733110249), a(3204031479, 2999351573), a(3329325298, 3815920427), a(3391569614, 3928383900), a(3515267271, 566280711), a(3940187606, 3454069534), a(4118630271, 4000239992), a(116418474, 1914138554), a(174292421, 2731055270), a(289380356, 3203993006), a(460393269, 320620315), a(685471733, 587496836), a(852142971, 1086792851), a(1017036298, 365543100), a(1126000580, 2618297676), a(1288033470, 3409855158), a(1501505948, 4234509866), a(1607167915, 987167468), a(1816402316, 1246189591)], v = [], w = 0; 80 > w; w++) {
	    v[w] = a();
	  }e = e.SHA512 = r.extend({ _doReset: function _doReset() {
	      this._hash = new T.init([new d.init(1779033703, 4089235720), new d.init(3144134277, 2227873595), new d.init(1013904242, 4271175723), new d.init(2773480762, 1595750129), new d.init(1359893119, 2917565137), new d.init(2600822924, 725511199), new d.init(528734635, 4215389547), new d.init(1541459225, 327033209)]);
	    }, _doProcessBlock: function _doProcessBlock(a, d) {
	      for (var f = this._hash.words, F = f[0], e = f[1], n = f[2], r = f[3], G = f[4], H = f[5], I = f[6], f = f[7], w = F.high, J = F.low, X = e.high, K = e.low, Y = n.high, L = n.low, Z = r.high, M = r.low, $ = G.high, N = G.low, aa = H.high, O = H.low, ba = I.high, P = I.low, ca = f.high, Q = f.low, k = w, g = J, z = X, x = K, A = Y, y = L, U = Z, B = M, l = $, h = N, R = aa, C = O, S = ba, D = P, V = ca, E = Q, m = 0; 80 > m; m++) {
	        var s = v[m];if (16 > m) var j = s.high = a[d + 2 * m] | 0,
	            b = s.low = a[d + 2 * m + 1] | 0;else {
	          var j = v[m - 15],
	              b = j.high,
	              p = j.low,
	              j = (b >>> 1 | p << 31) ^ (b >>> 8 | p << 24) ^ b >>> 7,
	              p = (p >>> 1 | b << 31) ^ (p >>> 8 | b << 24) ^ (p >>> 7 | b << 25),
	              u = v[m - 2],
	              b = u.high,
	              c = u.low,
	              u = (b >>> 19 | c << 13) ^ (b << 3 | c >>> 29) ^ b >>> 6,
	              c = (c >>> 19 | b << 13) ^ (c << 3 | b >>> 29) ^ (c >>> 6 | b << 26),
	              b = v[m - 7],
	              W = b.high,
	              t = v[m - 16],
	              q = t.high,
	              t = t.low,
	              b = p + b.low,
	              j = j + W + (b >>> 0 < p >>> 0 ? 1 : 0),
	              b = b + c,
	              j = j + u + (b >>> 0 < c >>> 0 ? 1 : 0),
	              b = b + t,
	              j = j + q + (b >>> 0 < t >>> 0 ? 1 : 0);s.high = j;s.low = b;
	        }var W = l & R ^ ~l & S,
	            t = h & C ^ ~h & D,
	            s = k & z ^ k & A ^ z & A,
	            T = g & x ^ g & y ^ x & y,
	            p = (k >>> 28 | g << 4) ^ (k << 30 | g >>> 2) ^ (k << 25 | g >>> 7),
	            u = (g >>> 28 | k << 4) ^ (g << 30 | k >>> 2) ^ (g << 25 | k >>> 7),
	            c = ea[m],
	            fa = c.high,
	            da = c.low,
	            c = E + ((h >>> 14 | l << 18) ^ (h >>> 18 | l << 14) ^ (h << 23 | l >>> 9)),
	            q = V + ((l >>> 14 | h << 18) ^ (l >>> 18 | h << 14) ^ (l << 23 | h >>> 9)) + (c >>> 0 < E >>> 0 ? 1 : 0),
	            c = c + t,
	            q = q + W + (c >>> 0 < t >>> 0 ? 1 : 0),
	            c = c + da,
	            q = q + fa + (c >>> 0 < da >>> 0 ? 1 : 0),
	            c = c + b,
	            q = q + j + (c >>> 0 < b >>> 0 ? 1 : 0),
	            b = u + T,
	            s = p + s + (b >>> 0 < u >>> 0 ? 1 : 0),
	            V = S,
	            E = D,
	            S = R,
	            D = C,
	            R = l,
	            C = h,
	            h = B + c | 0,
	            l = U + q + (h >>> 0 < B >>> 0 ? 1 : 0) | 0,
	            U = A,
	            B = y,
	            A = z,
	            y = x,
	            z = k,
	            x = g,
	            g = c + b | 0,
	            k = q + s + (g >>> 0 < c >>> 0 ? 1 : 0) | 0;
	      }J = F.low = J + g;F.high = w + k + (J >>> 0 < g >>> 0 ? 1 : 0);K = e.low = K + x;e.high = X + z + (K >>> 0 < x >>> 0 ? 1 : 0);L = n.low = L + y;n.high = Y + A + (L >>> 0 < y >>> 0 ? 1 : 0);M = r.low = M + B;r.high = Z + U + (M >>> 0 < B >>> 0 ? 1 : 0);N = G.low = N + h;G.high = $ + l + (N >>> 0 < h >>> 0 ? 1 : 0);O = H.low = O + C;H.high = aa + R + (O >>> 0 < C >>> 0 ? 1 : 0);P = I.low = P + D;
	      I.high = ba + S + (P >>> 0 < D >>> 0 ? 1 : 0);Q = f.low = Q + E;f.high = ca + V + (Q >>> 0 < E >>> 0 ? 1 : 0);
	    }, _doFinalize: function _doFinalize() {
	      var a = this._data,
	          d = a.words,
	          f = 8 * this._nDataBytes,
	          e = 8 * a.sigBytes;d[e >>> 5] |= 128 << 24 - e % 32;d[(e + 128 >>> 10 << 5) + 30] = Math.floor(f / 4294967296);d[(e + 128 >>> 10 << 5) + 31] = f;a.sigBytes = 4 * d.length;this._process();return this._hash.toX32();
	    }, clone: function clone() {
	      var a = r.clone.call(this);a._hash = this._hash.clone();return a;
	    }, blockSize: 32 });n.SHA512 = r._createHelper(e);n.HmacSHA512 = r._createHmacHelper(e);
	})();
	
	/*
	CryptoJS v3.1.2 sha384-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	  var c = CryptoJS,
	      a = c.x64,
	      b = a.Word,
	      e = a.WordArray,
	      a = c.algo,
	      d = a.SHA512,
	      a = a.SHA384 = d.extend({ _doReset: function _doReset() {
	      this._hash = new e.init([new b.init(3418070365, 3238371032), new b.init(1654270250, 914150663), new b.init(2438529370, 812702999), new b.init(355462360, 4144912697), new b.init(1731405415, 4290775857), new b.init(2394180231, 1750603025), new b.init(3675008525, 1694076839), new b.init(1203062813, 3204075428)]);
	    }, _doFinalize: function _doFinalize() {
	      var a = d._doFinalize.call(this);a.sigBytes -= 16;return a;
	    } });c.SHA384 = d._createHelper(a);c.HmacSHA384 = d._createHmacHelper(a);
	})();
	
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64pad = "=";function hex2b64(d) {
	  var b;var e;var a = "";for (b = 0; b + 3 <= d.length; b += 3) {
	    e = parseInt(d.substring(b, b + 3), 16);a += b64map.charAt(e >> 6) + b64map.charAt(e & 63);
	  }if (b + 1 == d.length) {
	    e = parseInt(d.substring(b, b + 1), 16);a += b64map.charAt(e << 2);
	  } else {
	    if (b + 2 == d.length) {
	      e = parseInt(d.substring(b, b + 2), 16);a += b64map.charAt(e >> 2) + b64map.charAt((e & 3) << 4);
	    }
	  }if (b64pad) {
	    while ((a.length & 3) > 0) {
	      a += b64pad;
	    }
	  }return a;
	}function b64tohex(f) {
	  var d = "";var e;var b = 0;var c;var a;for (e = 0; e < f.length; ++e) {
	    if (f.charAt(e) == b64pad) {
	      break;
	    }a = b64map.indexOf(f.charAt(e));if (a < 0) {
	      continue;
	    }if (b == 0) {
	      d += int2char(a >> 2);c = a & 3;b = 1;
	    } else {
	      if (b == 1) {
	        d += int2char(c << 2 | a >> 4);c = a & 15;b = 2;
	      } else {
	        if (b == 2) {
	          d += int2char(c);d += int2char(a >> 2);c = a & 3;b = 3;
	        } else {
	          d += int2char(c << 2 | a >> 4);d += int2char(a & 15);b = 0;
	        }
	      }
	    }
	  }if (b == 1) {
	    d += int2char(c << 2);
	  }return d;
	}function b64toBA(e) {
	  var d = b64tohex(e);var c;var b = new Array();for (c = 0; 2 * c < d.length; ++c) {
	    b[c] = parseInt(d.substring(2 * c, 2 * c + 2), 16);
	  }return b;
	};
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var dbits;var canary = 244837814094590;var j_lm = (canary & 16777215) == 15715070;function BigInteger(e, d, f) {
	  if (e != null) {
	    if ("number" == typeof e) {
	      this.fromNumber(e, d, f);
	    } else {
	      if (d == null && "string" != typeof e) {
	        this.fromString(e, 256);
	      } else {
	        this.fromString(e, d);
	      }
	    }
	  }
	}function nbi() {
	  return new BigInteger(null);
	}function am1(f, a, b, e, h, g) {
	  while (--g >= 0) {
	    var d = a * this[f++] + b[e] + h;h = Math.floor(d / 67108864);b[e++] = d & 67108863;
	  }return h;
	}function am2(f, q, r, e, o, a) {
	  var k = q & 32767,
	      p = q >> 15;while (--a >= 0) {
	    var d = this[f] & 32767;var g = this[f++] >> 15;var b = p * d + g * k;d = k * d + ((b & 32767) << 15) + r[e] + (o & 1073741823);o = (d >>> 30) + (b >>> 15) + p * g + (o >>> 30);r[e++] = d & 1073741823;
	  }return o;
	}function am3(f, q, r, e, o, a) {
	  var k = q & 16383,
	      p = q >> 14;while (--a >= 0) {
	    var d = this[f] & 16383;var g = this[f++] >> 14;var b = p * d + g * k;d = k * d + ((b & 16383) << 14) + r[e] + o;o = (d >> 28) + (b >> 14) + p * g;r[e++] = d & 268435455;
	  }return o;
	}if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
	  BigInteger.prototype.am = am2;dbits = 30;
	} else {
	  if (j_lm && navigator.appName != "Netscape") {
	    BigInteger.prototype.am = am1;dbits = 26;
	  } else {
	    BigInteger.prototype.am = am3;dbits = 28;
	  }
	}BigInteger.prototype.DB = dbits;BigInteger.prototype.DM = (1 << dbits) - 1;BigInteger.prototype.DV = 1 << dbits;var BI_FP = 52;BigInteger.prototype.FV = Math.pow(2, BI_FP);BigInteger.prototype.F1 = BI_FP - dbits;BigInteger.prototype.F2 = 2 * dbits - BI_FP;var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC = new Array();var rr, vv;rr = "0".charCodeAt(0);for (vv = 0; vv <= 9; ++vv) {
	  BI_RC[rr++] = vv;
	}rr = "a".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
	  BI_RC[rr++] = vv;
	}rr = "A".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
	  BI_RC[rr++] = vv;
	}function int2char(a) {
	  return BI_RM.charAt(a);
	}function intAt(b, a) {
	  var d = BI_RC[b.charCodeAt(a)];return d == null ? -1 : d;
	}function bnpCopyTo(b) {
	  for (var a = this.t - 1; a >= 0; --a) {
	    b[a] = this[a];
	  }b.t = this.t;b.s = this.s;
	}function bnpFromInt(a) {
	  this.t = 1;this.s = a < 0 ? -1 : 0;if (a > 0) {
	    this[0] = a;
	  } else {
	    if (a < -1) {
	      this[0] = a + this.DV;
	    } else {
	      this.t = 0;
	    }
	  }
	}function nbv(a) {
	  var b = nbi();b.fromInt(a);return b;
	}function bnpFromString(h, c) {
	  var e;if (c == 16) {
	    e = 4;
	  } else {
	    if (c == 8) {
	      e = 3;
	    } else {
	      if (c == 256) {
	        e = 8;
	      } else {
	        if (c == 2) {
	          e = 1;
	        } else {
	          if (c == 32) {
	            e = 5;
	          } else {
	            if (c == 4) {
	              e = 2;
	            } else {
	              this.fromRadix(h, c);return;
	            }
	          }
	        }
	      }
	    }
	  }this.t = 0;this.s = 0;var g = h.length,
	      d = false,
	      f = 0;while (--g >= 0) {
	    var a = e == 8 ? h[g] & 255 : intAt(h, g);if (a < 0) {
	      if (h.charAt(g) == "-") {
	        d = true;
	      }continue;
	    }d = false;if (f == 0) {
	      this[this.t++] = a;
	    } else {
	      if (f + e > this.DB) {
	        this[this.t - 1] |= (a & (1 << this.DB - f) - 1) << f;this[this.t++] = a >> this.DB - f;
	      } else {
	        this[this.t - 1] |= a << f;
	      }
	    }f += e;if (f >= this.DB) {
	      f -= this.DB;
	    }
	  }if (e == 8 && (h[0] & 128) != 0) {
	    this.s = -1;if (f > 0) {
	      this[this.t - 1] |= (1 << this.DB - f) - 1 << f;
	    }
	  }this.clamp();if (d) {
	    BigInteger.ZERO.subTo(this, this);
	  }
	}function bnpClamp() {
	  var a = this.s & this.DM;while (this.t > 0 && this[this.t - 1] == a) {
	    --this.t;
	  }
	}function bnToString(c) {
	  if (this.s < 0) {
	    return "-" + this.negate().toString(c);
	  }var e;if (c == 16) {
	    e = 4;
	  } else {
	    if (c == 8) {
	      e = 3;
	    } else {
	      if (c == 2) {
	        e = 1;
	      } else {
	        if (c == 32) {
	          e = 5;
	        } else {
	          if (c == 4) {
	            e = 2;
	          } else {
	            return this.toRadix(c);
	          }
	        }
	      }
	    }
	  }var g = (1 << e) - 1,
	      l,
	      a = false,
	      h = "",
	      f = this.t;var j = this.DB - f * this.DB % e;if (f-- > 0) {
	    if (j < this.DB && (l = this[f] >> j) > 0) {
	      a = true;h = int2char(l);
	    }while (f >= 0) {
	      if (j < e) {
	        l = (this[f] & (1 << j) - 1) << e - j;l |= this[--f] >> (j += this.DB - e);
	      } else {
	        l = this[f] >> (j -= e) & g;if (j <= 0) {
	          j += this.DB;--f;
	        }
	      }if (l > 0) {
	        a = true;
	      }if (a) {
	        h += int2char(l);
	      }
	    }
	  }return a ? h : "0";
	}function bnNegate() {
	  var a = nbi();BigInteger.ZERO.subTo(this, a);return a;
	}function bnAbs() {
	  return this.s < 0 ? this.negate() : this;
	}function bnCompareTo(b) {
	  var d = this.s - b.s;if (d != 0) {
	    return d;
	  }var c = this.t;d = c - b.t;if (d != 0) {
	    return this.s < 0 ? -d : d;
	  }while (--c >= 0) {
	    if ((d = this[c] - b[c]) != 0) {
	      return d;
	    }
	  }return 0;
	}function nbits(a) {
	  var c = 1,
	      b;if ((b = a >>> 16) != 0) {
	    a = b;c += 16;
	  }if ((b = a >> 8) != 0) {
	    a = b;c += 8;
	  }if ((b = a >> 4) != 0) {
	    a = b;c += 4;
	  }if ((b = a >> 2) != 0) {
	    a = b;c += 2;
	  }if ((b = a >> 1) != 0) {
	    a = b;c += 1;
	  }return c;
	}function bnBitLength() {
	  if (this.t <= 0) {
	    return 0;
	  }return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
	}function bnpDLShiftTo(c, b) {
	  var a;for (a = this.t - 1; a >= 0; --a) {
	    b[a + c] = this[a];
	  }for (a = c - 1; a >= 0; --a) {
	    b[a] = 0;
	  }b.t = this.t + c;b.s = this.s;
	}function bnpDRShiftTo(c, b) {
	  for (var a = c; a < this.t; ++a) {
	    b[a - c] = this[a];
	  }b.t = Math.max(this.t - c, 0);b.s = this.s;
	}function bnpLShiftTo(j, e) {
	  var b = j % this.DB;var a = this.DB - b;var g = (1 << a) - 1;var f = Math.floor(j / this.DB),
	      h = this.s << b & this.DM,
	      d;for (d = this.t - 1; d >= 0; --d) {
	    e[d + f + 1] = this[d] >> a | h;h = (this[d] & g) << b;
	  }for (d = f - 1; d >= 0; --d) {
	    e[d] = 0;
	  }e[f] = h;e.t = this.t + f + 1;e.s = this.s;e.clamp();
	}function bnpRShiftTo(g, d) {
	  d.s = this.s;var e = Math.floor(g / this.DB);if (e >= this.t) {
	    d.t = 0;return;
	  }var b = g % this.DB;var a = this.DB - b;var f = (1 << b) - 1;d[0] = this[e] >> b;for (var c = e + 1; c < this.t; ++c) {
	    d[c - e - 1] |= (this[c] & f) << a;d[c - e] = this[c] >> b;
	  }if (b > 0) {
	    d[this.t - e - 1] |= (this.s & f) << a;
	  }d.t = this.t - e;d.clamp();
	}function bnpSubTo(d, f) {
	  var e = 0,
	      g = 0,
	      b = Math.min(d.t, this.t);while (e < b) {
	    g += this[e] - d[e];f[e++] = g & this.DM;g >>= this.DB;
	  }if (d.t < this.t) {
	    g -= d.s;while (e < this.t) {
	      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
	    }g += this.s;
	  } else {
	    g += this.s;while (e < d.t) {
	      g -= d[e];f[e++] = g & this.DM;g >>= this.DB;
	    }g -= d.s;
	  }f.s = g < 0 ? -1 : 0;if (g < -1) {
	    f[e++] = this.DV + g;
	  } else {
	    if (g > 0) {
	      f[e++] = g;
	    }
	  }f.t = e;f.clamp();
	}function bnpMultiplyTo(c, e) {
	  var b = this.abs(),
	      f = c.abs();var d = b.t;e.t = d + f.t;while (--d >= 0) {
	    e[d] = 0;
	  }for (d = 0; d < f.t; ++d) {
	    e[d + b.t] = b.am(0, f[d], e, d, 0, b.t);
	  }e.s = 0;e.clamp();if (this.s != c.s) {
	    BigInteger.ZERO.subTo(e, e);
	  }
	}function bnpSquareTo(d) {
	  var a = this.abs();var b = d.t = 2 * a.t;while (--b >= 0) {
	    d[b] = 0;
	  }for (b = 0; b < a.t - 1; ++b) {
	    var e = a.am(b, a[b], d, 2 * b, 0, 1);if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e, a.t - b - 1)) >= a.DV) {
	      d[b + a.t] -= a.DV;d[b + a.t + 1] = 1;
	    }
	  }if (d.t > 0) {
	    d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1);
	  }d.s = 0;d.clamp();
	}function bnpDivRemTo(n, h, g) {
	  var w = n.abs();if (w.t <= 0) {
	    return;
	  }var k = this.abs();if (k.t < w.t) {
	    if (h != null) {
	      h.fromInt(0);
	    }if (g != null) {
	      this.copyTo(g);
	    }return;
	  }if (g == null) {
	    g = nbi();
	  }var d = nbi(),
	      a = this.s,
	      l = n.s;var v = this.DB - nbits(w[w.t - 1]);if (v > 0) {
	    w.lShiftTo(v, d);k.lShiftTo(v, g);
	  } else {
	    w.copyTo(d);k.copyTo(g);
	  }var p = d.t;var b = d[p - 1];if (b == 0) {
	    return;
	  }var o = b * (1 << this.F1) + (p > 1 ? d[p - 2] >> this.F2 : 0);var A = this.FV / o,
	      z = (1 << this.F1) / o,
	      x = 1 << this.F2;var u = g.t,
	      s = u - p,
	      f = h == null ? nbi() : h;d.dlShiftTo(s, f);if (g.compareTo(f) >= 0) {
	    g[g.t++] = 1;g.subTo(f, g);
	  }BigInteger.ONE.dlShiftTo(p, f);f.subTo(d, d);while (d.t < p) {
	    d[d.t++] = 0;
	  }while (--s >= 0) {
	    var c = g[--u] == b ? this.DM : Math.floor(g[u] * A + (g[u - 1] + x) * z);if ((g[u] += d.am(0, c, g, s, 0, p)) < c) {
	      d.dlShiftTo(s, f);g.subTo(f, g);while (g[u] < --c) {
	        g.subTo(f, g);
	      }
	    }
	  }if (h != null) {
	    g.drShiftTo(p, h);if (a != l) {
	      BigInteger.ZERO.subTo(h, h);
	    }
	  }g.t = p;g.clamp();if (v > 0) {
	    g.rShiftTo(v, g);
	  }if (a < 0) {
	    BigInteger.ZERO.subTo(g, g);
	  }
	}function bnMod(b) {
	  var c = nbi();this.abs().divRemTo(b, null, c);if (this.s < 0 && c.compareTo(BigInteger.ZERO) > 0) {
	    b.subTo(c, c);
	  }return c;
	}function Classic(a) {
	  this.m = a;
	}function cConvert(a) {
	  if (a.s < 0 || a.compareTo(this.m) >= 0) {
	    return a.mod(this.m);
	  } else {
	    return a;
	  }
	}function cRevert(a) {
	  return a;
	}function cReduce(a) {
	  a.divRemTo(this.m, null, a);
	}function cMulTo(a, c, b) {
	  a.multiplyTo(c, b);this.reduce(b);
	}function cSqrTo(a, b) {
	  a.squareTo(b);this.reduce(b);
	}Classic.prototype.convert = cConvert;Classic.prototype.revert = cRevert;Classic.prototype.reduce = cReduce;Classic.prototype.mulTo = cMulTo;Classic.prototype.sqrTo = cSqrTo;function bnpInvDigit() {
	  if (this.t < 1) {
	    return 0;
	  }var a = this[0];if ((a & 1) == 0) {
	    return 0;
	  }var b = a & 3;b = b * (2 - (a & 15) * b) & 15;b = b * (2 - (a & 255) * b) & 255;b = b * (2 - ((a & 65535) * b & 65535)) & 65535;b = b * (2 - a * b % this.DV) % this.DV;return b > 0 ? this.DV - b : -b;
	}function Montgomery(a) {
	  this.m = a;this.mp = a.invDigit();this.mpl = this.mp & 32767;this.mph = this.mp >> 15;this.um = (1 << a.DB - 15) - 1;this.mt2 = 2 * a.t;
	}function montConvert(a) {
	  var b = nbi();a.abs().dlShiftTo(this.m.t, b);b.divRemTo(this.m, null, b);if (a.s < 0 && b.compareTo(BigInteger.ZERO) > 0) {
	    this.m.subTo(b, b);
	  }return b;
	}function montRevert(a) {
	  var b = nbi();a.copyTo(b);this.reduce(b);return b;
	}function montReduce(a) {
	  while (a.t <= this.mt2) {
	    a[a.t++] = 0;
	  }for (var c = 0; c < this.m.t; ++c) {
	    var b = a[c] & 32767;var d = b * this.mpl + ((b * this.mph + (a[c] >> 15) * this.mpl & this.um) << 15) & a.DM;b = c + this.m.t;a[b] += this.m.am(0, d, a, c, 0, this.m.t);while (a[b] >= a.DV) {
	      a[b] -= a.DV;a[++b]++;
	    }
	  }a.clamp();a.drShiftTo(this.m.t, a);if (a.compareTo(this.m) >= 0) {
	    a.subTo(this.m, a);
	  }
	}function montSqrTo(a, b) {
	  a.squareTo(b);this.reduce(b);
	}function montMulTo(a, c, b) {
	  a.multiplyTo(c, b);this.reduce(b);
	}Montgomery.prototype.convert = montConvert;Montgomery.prototype.revert = montRevert;Montgomery.prototype.reduce = montReduce;Montgomery.prototype.mulTo = montMulTo;Montgomery.prototype.sqrTo = montSqrTo;function bnpIsEven() {
	  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
	}function bnpExp(h, j) {
	  if (h > 4294967295 || h < 1) {
	    return BigInteger.ONE;
	  }var f = nbi(),
	      a = nbi(),
	      d = j.convert(this),
	      c = nbits(h) - 1;d.copyTo(f);while (--c >= 0) {
	    j.sqrTo(f, a);if ((h & 1 << c) > 0) {
	      j.mulTo(a, d, f);
	    } else {
	      var b = f;f = a;a = b;
	    }
	  }return j.revert(f);
	}function bnModPowInt(b, a) {
	  var c;if (b < 256 || a.isEven()) {
	    c = new Classic(a);
	  } else {
	    c = new Montgomery(a);
	  }return this.exp(b, c);
	}BigInteger.prototype.copyTo = bnpCopyTo;BigInteger.prototype.fromInt = bnpFromInt;BigInteger.prototype.fromString = bnpFromString;BigInteger.prototype.clamp = bnpClamp;BigInteger.prototype.dlShiftTo = bnpDLShiftTo;BigInteger.prototype.drShiftTo = bnpDRShiftTo;BigInteger.prototype.lShiftTo = bnpLShiftTo;BigInteger.prototype.rShiftTo = bnpRShiftTo;BigInteger.prototype.subTo = bnpSubTo;BigInteger.prototype.multiplyTo = bnpMultiplyTo;BigInteger.prototype.squareTo = bnpSquareTo;BigInteger.prototype.divRemTo = bnpDivRemTo;BigInteger.prototype.invDigit = bnpInvDigit;BigInteger.prototype.isEven = bnpIsEven;BigInteger.prototype.exp = bnpExp;BigInteger.prototype.toString = bnToString;BigInteger.prototype.negate = bnNegate;BigInteger.prototype.abs = bnAbs;BigInteger.prototype.compareTo = bnCompareTo;BigInteger.prototype.bitLength = bnBitLength;BigInteger.prototype.mod = bnMod;BigInteger.prototype.modPowInt = bnModPowInt;BigInteger.ZERO = nbv(0);BigInteger.ONE = nbv(1);
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function bnClone() {
	  var a = nbi();this.copyTo(a);return a;
	}function bnIntValue() {
	  if (this.s < 0) {
	    if (this.t == 1) {
	      return this[0] - this.DV;
	    } else {
	      if (this.t == 0) {
	        return -1;
	      }
	    }
	  } else {
	    if (this.t == 1) {
	      return this[0];
	    } else {
	      if (this.t == 0) {
	        return 0;
	      }
	    }
	  }return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
	}function bnByteValue() {
	  return this.t == 0 ? this.s : this[0] << 24 >> 24;
	}function bnShortValue() {
	  return this.t == 0 ? this.s : this[0] << 16 >> 16;
	}function bnpChunkSize(a) {
	  return Math.floor(Math.LN2 * this.DB / Math.log(a));
	}function bnSigNum() {
	  if (this.s < 0) {
	    return -1;
	  } else {
	    if (this.t <= 0 || this.t == 1 && this[0] <= 0) {
	      return 0;
	    } else {
	      return 1;
	    }
	  }
	}function bnpToRadix(c) {
	  if (c == null) {
	    c = 10;
	  }if (this.signum() == 0 || c < 2 || c > 36) {
	    return "0";
	  }var f = this.chunkSize(c);var e = Math.pow(c, f);var i = nbv(e),
	      j = nbi(),
	      h = nbi(),
	      g = "";this.divRemTo(i, j, h);while (j.signum() > 0) {
	    g = (e + h.intValue()).toString(c).substr(1) + g;j.divRemTo(i, j, h);
	  }return h.intValue().toString(c) + g;
	}function bnpFromRadix(m, h) {
	  this.fromInt(0);if (h == null) {
	    h = 10;
	  }var f = this.chunkSize(h);var g = Math.pow(h, f),
	      e = false,
	      a = 0,
	      l = 0;for (var c = 0; c < m.length; ++c) {
	    var k = intAt(m, c);if (k < 0) {
	      if (m.charAt(c) == "-" && this.signum() == 0) {
	        e = true;
	      }continue;
	    }l = h * l + k;if (++a >= f) {
	      this.dMultiply(g);this.dAddOffset(l, 0);a = 0;l = 0;
	    }
	  }if (a > 0) {
	    this.dMultiply(Math.pow(h, a));this.dAddOffset(l, 0);
	  }if (e) {
	    BigInteger.ZERO.subTo(this, this);
	  }
	}function bnpFromNumber(f, e, h) {
	  if ("number" == typeof e) {
	    if (f < 2) {
	      this.fromInt(1);
	    } else {
	      this.fromNumber(f, h);if (!this.testBit(f - 1)) {
	        this.bitwiseTo(BigInteger.ONE.shiftLeft(f - 1), op_or, this);
	      }if (this.isEven()) {
	        this.dAddOffset(1, 0);
	      }while (!this.isProbablePrime(e)) {
	        this.dAddOffset(2, 0);if (this.bitLength() > f) {
	          this.subTo(BigInteger.ONE.shiftLeft(f - 1), this);
	        }
	      }
	    }
	  } else {
	    var d = new Array(),
	        g = f & 7;d.length = (f >> 3) + 1;e.nextBytes(d);if (g > 0) {
	      d[0] &= (1 << g) - 1;
	    } else {
	      d[0] = 0;
	    }this.fromString(d, 256);
	  }
	}function bnToByteArray() {
	  var b = this.t,
	      c = new Array();c[0] = this.s;var e = this.DB - b * this.DB % 8,
	      f,
	      a = 0;if (b-- > 0) {
	    if (e < this.DB && (f = this[b] >> e) != (this.s & this.DM) >> e) {
	      c[a++] = f | this.s << this.DB - e;
	    }while (b >= 0) {
	      if (e < 8) {
	        f = (this[b] & (1 << e) - 1) << 8 - e;f |= this[--b] >> (e += this.DB - 8);
	      } else {
	        f = this[b] >> (e -= 8) & 255;if (e <= 0) {
	          e += this.DB;--b;
	        }
	      }if ((f & 128) != 0) {
	        f |= -256;
	      }if (a == 0 && (this.s & 128) != (f & 128)) {
	        ++a;
	      }if (a > 0 || f != this.s) {
	        c[a++] = f;
	      }
	    }
	  }return c;
	}function bnEquals(b) {
	  return this.compareTo(b) == 0;
	}function bnMin(b) {
	  return this.compareTo(b) < 0 ? this : b;
	}function bnMax(b) {
	  return this.compareTo(b) > 0 ? this : b;
	}function bnpBitwiseTo(c, h, e) {
	  var d,
	      g,
	      b = Math.min(c.t, this.t);for (d = 0; d < b; ++d) {
	    e[d] = h(this[d], c[d]);
	  }if (c.t < this.t) {
	    g = c.s & this.DM;for (d = b; d < this.t; ++d) {
	      e[d] = h(this[d], g);
	    }e.t = this.t;
	  } else {
	    g = this.s & this.DM;for (d = b; d < c.t; ++d) {
	      e[d] = h(g, c[d]);
	    }e.t = c.t;
	  }e.s = h(this.s, c.s);e.clamp();
	}function op_and(a, b) {
	  return a & b;
	}function bnAnd(b) {
	  var c = nbi();this.bitwiseTo(b, op_and, c);return c;
	}function op_or(a, b) {
	  return a | b;
	}function bnOr(b) {
	  var c = nbi();this.bitwiseTo(b, op_or, c);return c;
	}function op_xor(a, b) {
	  return a ^ b;
	}function bnXor(b) {
	  var c = nbi();this.bitwiseTo(b, op_xor, c);return c;
	}function op_andnot(a, b) {
	  return a & ~b;
	}function bnAndNot(b) {
	  var c = nbi();this.bitwiseTo(b, op_andnot, c);return c;
	}function bnNot() {
	  var b = nbi();for (var a = 0; a < this.t; ++a) {
	    b[a] = this.DM & ~this[a];
	  }b.t = this.t;b.s = ~this.s;return b;
	}function bnShiftLeft(b) {
	  var a = nbi();if (b < 0) {
	    this.rShiftTo(-b, a);
	  } else {
	    this.lShiftTo(b, a);
	  }return a;
	}function bnShiftRight(b) {
	  var a = nbi();if (b < 0) {
	    this.lShiftTo(-b, a);
	  } else {
	    this.rShiftTo(b, a);
	  }return a;
	}function lbit(a) {
	  if (a == 0) {
	    return -1;
	  }var b = 0;if ((a & 65535) == 0) {
	    a >>= 16;b += 16;
	  }if ((a & 255) == 0) {
	    a >>= 8;b += 8;
	  }if ((a & 15) == 0) {
	    a >>= 4;b += 4;
	  }if ((a & 3) == 0) {
	    a >>= 2;b += 2;
	  }if ((a & 1) == 0) {
	    ++b;
	  }return b;
	}function bnGetLowestSetBit() {
	  for (var a = 0; a < this.t; ++a) {
	    if (this[a] != 0) {
	      return a * this.DB + lbit(this[a]);
	    }
	  }if (this.s < 0) {
	    return this.t * this.DB;
	  }return -1;
	}function cbit(a) {
	  var b = 0;while (a != 0) {
	    a &= a - 1;++b;
	  }return b;
	}function bnBitCount() {
	  var c = 0,
	      a = this.s & this.DM;for (var b = 0; b < this.t; ++b) {
	    c += cbit(this[b] ^ a);
	  }return c;
	}function bnTestBit(b) {
	  var a = Math.floor(b / this.DB);if (a >= this.t) {
	    return this.s != 0;
	  }return (this[a] & 1 << b % this.DB) != 0;
	}function bnpChangeBit(c, b) {
	  var a = BigInteger.ONE.shiftLeft(c);this.bitwiseTo(a, b, a);return a;
	}function bnSetBit(a) {
	  return this.changeBit(a, op_or);
	}function bnClearBit(a) {
	  return this.changeBit(a, op_andnot);
	}function bnFlipBit(a) {
	  return this.changeBit(a, op_xor);
	}function bnpAddTo(d, f) {
	  var e = 0,
	      g = 0,
	      b = Math.min(d.t, this.t);while (e < b) {
	    g += this[e] + d[e];f[e++] = g & this.DM;g >>= this.DB;
	  }if (d.t < this.t) {
	    g += d.s;while (e < this.t) {
	      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
	    }g += this.s;
	  } else {
	    g += this.s;while (e < d.t) {
	      g += d[e];f[e++] = g & this.DM;g >>= this.DB;
	    }g += d.s;
	  }f.s = g < 0 ? -1 : 0;if (g > 0) {
	    f[e++] = g;
	  } else {
	    if (g < -1) {
	      f[e++] = this.DV + g;
	    }
	  }f.t = e;f.clamp();
	}function bnAdd(b) {
	  var c = nbi();this.addTo(b, c);return c;
	}function bnSubtract(b) {
	  var c = nbi();this.subTo(b, c);return c;
	}function bnMultiply(b) {
	  var c = nbi();this.multiplyTo(b, c);return c;
	}function bnSquare() {
	  var a = nbi();this.squareTo(a);return a;
	}function bnDivide(b) {
	  var c = nbi();this.divRemTo(b, c, null);return c;
	}function bnRemainder(b) {
	  var c = nbi();this.divRemTo(b, null, c);return c;
	}function bnDivideAndRemainder(b) {
	  var d = nbi(),
	      c = nbi();this.divRemTo(b, d, c);return new Array(d, c);
	}function bnpDMultiply(a) {
	  this[this.t] = this.am(0, a - 1, this, 0, 0, this.t);++this.t;this.clamp();
	}function bnpDAddOffset(b, a) {
	  if (b == 0) {
	    return;
	  }while (this.t <= a) {
	    this[this.t++] = 0;
	  }this[a] += b;while (this[a] >= this.DV) {
	    this[a] -= this.DV;if (++a >= this.t) {
	      this[this.t++] = 0;
	    }++this[a];
	  }
	}function NullExp() {}function nNop(a) {
	  return a;
	}function nMulTo(a, c, b) {
	  a.multiplyTo(c, b);
	}function nSqrTo(a, b) {
	  a.squareTo(b);
	}NullExp.prototype.convert = nNop;NullExp.prototype.revert = nNop;NullExp.prototype.mulTo = nMulTo;NullExp.prototype.sqrTo = nSqrTo;function bnPow(a) {
	  return this.exp(a, new NullExp());
	}function bnpMultiplyLowerTo(b, f, e) {
	  var d = Math.min(this.t + b.t, f);e.s = 0;e.t = d;while (d > 0) {
	    e[--d] = 0;
	  }var c;for (c = e.t - this.t; d < c; ++d) {
	    e[d + this.t] = this.am(0, b[d], e, d, 0, this.t);
	  }for (c = Math.min(b.t, f); d < c; ++d) {
	    this.am(0, b[d], e, d, 0, f - d);
	  }e.clamp();
	}function bnpMultiplyUpperTo(b, e, d) {
	  --e;var c = d.t = this.t + b.t - e;d.s = 0;while (--c >= 0) {
	    d[c] = 0;
	  }for (c = Math.max(e - this.t, 0); c < b.t; ++c) {
	    d[this.t + c - e] = this.am(e - c, b[c], d, 0, 0, this.t + c - e);
	  }d.clamp();d.drShiftTo(1, d);
	}function Barrett(a) {
	  this.r2 = nbi();this.q3 = nbi();BigInteger.ONE.dlShiftTo(2 * a.t, this.r2);this.mu = this.r2.divide(a);this.m = a;
	}function barrettConvert(a) {
	  if (a.s < 0 || a.t > 2 * this.m.t) {
	    return a.mod(this.m);
	  } else {
	    if (a.compareTo(this.m) < 0) {
	      return a;
	    } else {
	      var b = nbi();a.copyTo(b);this.reduce(b);return b;
	    }
	  }
	}function barrettRevert(a) {
	  return a;
	}function barrettReduce(a) {
	  a.drShiftTo(this.m.t - 1, this.r2);if (a.t > this.m.t + 1) {
	    a.t = this.m.t + 1;a.clamp();
	  }this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);while (a.compareTo(this.r2) < 0) {
	    a.dAddOffset(1, this.m.t + 1);
	  }a.subTo(this.r2, a);while (a.compareTo(this.m) >= 0) {
	    a.subTo(this.m, a);
	  }
	}function barrettSqrTo(a, b) {
	  a.squareTo(b);this.reduce(b);
	}function barrettMulTo(a, c, b) {
	  a.multiplyTo(c, b);this.reduce(b);
	}Barrett.prototype.convert = barrettConvert;Barrett.prototype.revert = barrettRevert;Barrett.prototype.reduce = barrettReduce;Barrett.prototype.mulTo = barrettMulTo;Barrett.prototype.sqrTo = barrettSqrTo;function bnModPow(q, f) {
	  var o = q.bitLength(),
	      h,
	      b = nbv(1),
	      v;if (o <= 0) {
	    return b;
	  } else {
	    if (o < 18) {
	      h = 1;
	    } else {
	      if (o < 48) {
	        h = 3;
	      } else {
	        if (o < 144) {
	          h = 4;
	        } else {
	          if (o < 768) {
	            h = 5;
	          } else {
	            h = 6;
	          }
	        }
	      }
	    }
	  }if (o < 8) {
	    v = new Classic(f);
	  } else {
	    if (f.isEven()) {
	      v = new Barrett(f);
	    } else {
	      v = new Montgomery(f);
	    }
	  }var p = new Array(),
	      d = 3,
	      s = h - 1,
	      a = (1 << h) - 1;p[1] = v.convert(this);if (h > 1) {
	    var A = nbi();v.sqrTo(p[1], A);while (d <= a) {
	      p[d] = nbi();v.mulTo(A, p[d - 2], p[d]);d += 2;
	    }
	  }var l = q.t - 1,
	      x,
	      u = true,
	      c = nbi(),
	      y;o = nbits(q[l]) - 1;while (l >= 0) {
	    if (o >= s) {
	      x = q[l] >> o - s & a;
	    } else {
	      x = (q[l] & (1 << o + 1) - 1) << s - o;if (l > 0) {
	        x |= q[l - 1] >> this.DB + o - s;
	      }
	    }d = h;while ((x & 1) == 0) {
	      x >>= 1;--d;
	    }if ((o -= d) < 0) {
	      o += this.DB;--l;
	    }if (u) {
	      p[x].copyTo(b);u = false;
	    } else {
	      while (d > 1) {
	        v.sqrTo(b, c);v.sqrTo(c, b);d -= 2;
	      }if (d > 0) {
	        v.sqrTo(b, c);
	      } else {
	        y = b;b = c;c = y;
	      }v.mulTo(c, p[x], b);
	    }while (l >= 0 && (q[l] & 1 << o) == 0) {
	      v.sqrTo(b, c);y = b;b = c;c = y;if (--o < 0) {
	        o = this.DB - 1;--l;
	      }
	    }
	  }return v.revert(b);
	}function bnGCD(c) {
	  var b = this.s < 0 ? this.negate() : this.clone();var h = c.s < 0 ? c.negate() : c.clone();if (b.compareTo(h) < 0) {
	    var e = b;b = h;h = e;
	  }var d = b.getLowestSetBit(),
	      f = h.getLowestSetBit();if (f < 0) {
	    return b;
	  }if (d < f) {
	    f = d;
	  }if (f > 0) {
	    b.rShiftTo(f, b);h.rShiftTo(f, h);
	  }while (b.signum() > 0) {
	    if ((d = b.getLowestSetBit()) > 0) {
	      b.rShiftTo(d, b);
	    }if ((d = h.getLowestSetBit()) > 0) {
	      h.rShiftTo(d, h);
	    }if (b.compareTo(h) >= 0) {
	      b.subTo(h, b);b.rShiftTo(1, b);
	    } else {
	      h.subTo(b, h);h.rShiftTo(1, h);
	    }
	  }if (f > 0) {
	    h.lShiftTo(f, h);
	  }return h;
	}function bnpModInt(e) {
	  if (e <= 0) {
	    return 0;
	  }var c = this.DV % e,
	      b = this.s < 0 ? e - 1 : 0;if (this.t > 0) {
	    if (c == 0) {
	      b = this[0] % e;
	    } else {
	      for (var a = this.t - 1; a >= 0; --a) {
	        b = (c * b + this[a]) % e;
	      }
	    }
	  }return b;
	}function bnModInverse(f) {
	  var j = f.isEven();if (this.isEven() && j || f.signum() == 0) {
	    return BigInteger.ZERO;
	  }var i = f.clone(),
	      h = this.clone();var g = nbv(1),
	      e = nbv(0),
	      l = nbv(0),
	      k = nbv(1);while (i.signum() != 0) {
	    while (i.isEven()) {
	      i.rShiftTo(1, i);if (j) {
	        if (!g.isEven() || !e.isEven()) {
	          g.addTo(this, g);e.subTo(f, e);
	        }g.rShiftTo(1, g);
	      } else {
	        if (!e.isEven()) {
	          e.subTo(f, e);
	        }
	      }e.rShiftTo(1, e);
	    }while (h.isEven()) {
	      h.rShiftTo(1, h);if (j) {
	        if (!l.isEven() || !k.isEven()) {
	          l.addTo(this, l);k.subTo(f, k);
	        }l.rShiftTo(1, l);
	      } else {
	        if (!k.isEven()) {
	          k.subTo(f, k);
	        }
	      }k.rShiftTo(1, k);
	    }if (i.compareTo(h) >= 0) {
	      i.subTo(h, i);if (j) {
	        g.subTo(l, g);
	      }e.subTo(k, e);
	    } else {
	      h.subTo(i, h);if (j) {
	        l.subTo(g, l);
	      }k.subTo(e, k);
	    }
	  }if (h.compareTo(BigInteger.ONE) != 0) {
	    return BigInteger.ZERO;
	  }if (k.compareTo(f) >= 0) {
	    return k.subtract(f);
	  }if (k.signum() < 0) {
	    k.addTo(f, k);
	  } else {
	    return k;
	  }if (k.signum() < 0) {
	    return k.add(f);
	  } else {
	    return k;
	  }
	}var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];function bnIsProbablePrime(e) {
	  var d,
	      b = this.abs();if (b.t == 1 && b[0] <= lowprimes[lowprimes.length - 1]) {
	    for (d = 0; d < lowprimes.length; ++d) {
	      if (b[0] == lowprimes[d]) {
	        return true;
	      }
	    }return false;
	  }if (b.isEven()) {
	    return false;
	  }d = 1;while (d < lowprimes.length) {
	    var a = lowprimes[d],
	        c = d + 1;while (c < lowprimes.length && a < lplim) {
	      a *= lowprimes[c++];
	    }a = b.modInt(a);while (d < c) {
	      if (a % lowprimes[d++] == 0) {
	        return false;
	      }
	    }
	  }return b.millerRabin(e);
	}function bnpMillerRabin(f) {
	  var g = this.subtract(BigInteger.ONE);var c = g.getLowestSetBit();if (c <= 0) {
	    return false;
	  }var h = g.shiftRight(c);f = f + 1 >> 1;if (f > lowprimes.length) {
	    f = lowprimes.length;
	  }var b = nbi();for (var e = 0; e < f; ++e) {
	    b.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);var l = b.modPow(h, this);if (l.compareTo(BigInteger.ONE) != 0 && l.compareTo(g) != 0) {
	      var d = 1;while (d++ < c && l.compareTo(g) != 0) {
	        l = l.modPowInt(2, this);if (l.compareTo(BigInteger.ONE) == 0) {
	          return false;
	        }
	      }if (l.compareTo(g) != 0) {
	        return false;
	      }
	    }
	  }return true;
	}BigInteger.prototype.chunkSize = bnpChunkSize;BigInteger.prototype.toRadix = bnpToRadix;BigInteger.prototype.fromRadix = bnpFromRadix;BigInteger.prototype.fromNumber = bnpFromNumber;BigInteger.prototype.bitwiseTo = bnpBitwiseTo;BigInteger.prototype.changeBit = bnpChangeBit;BigInteger.prototype.addTo = bnpAddTo;BigInteger.prototype.dMultiply = bnpDMultiply;BigInteger.prototype.dAddOffset = bnpDAddOffset;BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;BigInteger.prototype.modInt = bnpModInt;BigInteger.prototype.millerRabin = bnpMillerRabin;BigInteger.prototype.clone = bnClone;BigInteger.prototype.intValue = bnIntValue;BigInteger.prototype.byteValue = bnByteValue;BigInteger.prototype.shortValue = bnShortValue;BigInteger.prototype.signum = bnSigNum;BigInteger.prototype.toByteArray = bnToByteArray;BigInteger.prototype.equals = bnEquals;BigInteger.prototype.min = bnMin;BigInteger.prototype.max = bnMax;BigInteger.prototype.and = bnAnd;BigInteger.prototype.or = bnOr;BigInteger.prototype.xor = bnXor;BigInteger.prototype.andNot = bnAndNot;BigInteger.prototype.not = bnNot;BigInteger.prototype.shiftLeft = bnShiftLeft;BigInteger.prototype.shiftRight = bnShiftRight;BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;BigInteger.prototype.bitCount = bnBitCount;BigInteger.prototype.testBit = bnTestBit;BigInteger.prototype.setBit = bnSetBit;BigInteger.prototype.clearBit = bnClearBit;BigInteger.prototype.flipBit = bnFlipBit;BigInteger.prototype.add = bnAdd;BigInteger.prototype.subtract = bnSubtract;BigInteger.prototype.multiply = bnMultiply;BigInteger.prototype.divide = bnDivide;BigInteger.prototype.remainder = bnRemainder;BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;BigInteger.prototype.modPow = bnModPow;BigInteger.prototype.modInverse = bnModInverse;BigInteger.prototype.pow = bnPow;BigInteger.prototype.gcd = bnGCD;BigInteger.prototype.isProbablePrime = bnIsProbablePrime;BigInteger.prototype.square = bnSquare;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function Arcfour() {
	  this.i = 0;this.j = 0;this.S = new Array();
	}function ARC4init(d) {
	  var c, a, b;for (c = 0; c < 256; ++c) {
	    this.S[c] = c;
	  }a = 0;for (c = 0; c < 256; ++c) {
	    a = a + this.S[c] + d[c % d.length] & 255;b = this.S[c];this.S[c] = this.S[a];this.S[a] = b;
	  }this.i = 0;this.j = 0;
	}function ARC4next() {
	  var a;this.i = this.i + 1 & 255;this.j = this.j + this.S[this.i] & 255;a = this.S[this.i];this.S[this.i] = this.S[this.j];this.S[this.j] = a;return this.S[a + this.S[this.i] & 255];
	}Arcfour.prototype.init = ARC4init;Arcfour.prototype.next = ARC4next;function prng_newstate() {
	  return new Arcfour();
	}var rng_psize = 256;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var rng_state;var rng_pool;var rng_pptr;function rng_seed_int(a) {
	  rng_pool[rng_pptr++] ^= a & 255;rng_pool[rng_pptr++] ^= a >> 8 & 255;rng_pool[rng_pptr++] ^= a >> 16 & 255;rng_pool[rng_pptr++] ^= a >> 24 & 255;if (rng_pptr >= rng_psize) {
	    rng_pptr -= rng_psize;
	  }
	}function rng_seed_time() {
	  rng_seed_int(new Date().getTime());
	}if (rng_pool == null) {
	  rng_pool = new Array();rng_pptr = 0;var t;if (window !== undefined && (window.crypto !== undefined || window.msCrypto !== undefined)) {
	    var crypto = window.crypto || window.msCrypto;if (crypto.getRandomValues) {
	      var ua = new Uint8Array(32);crypto.getRandomValues(ua);for (t = 0; t < 32; ++t) {
	        rng_pool[rng_pptr++] = ua[t];
	      }
	    } else {
	      if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
	        var z = window.crypto.random(32);for (t = 0; t < z.length; ++t) {
	          rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
	        }
	      }
	    }
	  }while (rng_pptr < rng_psize) {
	    t = Math.floor(65536 * Math.random());rng_pool[rng_pptr++] = t >>> 8;rng_pool[rng_pptr++] = t & 255;
	  }rng_pptr = 0;rng_seed_time();
	}function rng_get_byte() {
	  if (rng_state == null) {
	    rng_seed_time();rng_state = prng_newstate();rng_state.init(rng_pool);for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
	      rng_pool[rng_pptr] = 0;
	    }rng_pptr = 0;
	  }return rng_state.next();
	}function rng_get_bytes(b) {
	  var a;for (a = 0; a < b.length; ++a) {
	    b[a] = rng_get_byte();
	  }
	}function SecureRandom() {}SecureRandom.prototype.nextBytes = rng_get_bytes;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function parseBigInt(b, a) {
	  return new BigInteger(b, a);
	}function linebrk(c, d) {
	  var a = "";var b = 0;while (b + d < c.length) {
	    a += c.substring(b, b + d) + "\n";b += d;
	  }return a + c.substring(b, c.length);
	}function byte2Hex(a) {
	  if (a < 16) {
	    return "0" + a.toString(16);
	  } else {
	    return a.toString(16);
	  }
	}function pkcs1pad2(e, h) {
	  if (h < e.length + 11) {
	    throw "Message too long for RSA";return null;
	  }var g = new Array();var d = e.length - 1;while (d >= 0 && h > 0) {
	    var f = e.charCodeAt(d--);if (f < 128) {
	      g[--h] = f;
	    } else {
	      if (f > 127 && f < 2048) {
	        g[--h] = f & 63 | 128;g[--h] = f >> 6 | 192;
	      } else {
	        g[--h] = f & 63 | 128;g[--h] = f >> 6 & 63 | 128;g[--h] = f >> 12 | 224;
	      }
	    }
	  }g[--h] = 0;var b = new SecureRandom();var a = new Array();while (h > 2) {
	    a[0] = 0;while (a[0] == 0) {
	      b.nextBytes(a);
	    }g[--h] = a[0];
	  }g[--h] = 2;g[--h] = 0;return new BigInteger(g);
	}function oaep_mgf1_arr(c, a, e) {
	  var b = "",
	      d = 0;while (b.length < a) {
	    b += e(String.fromCharCode.apply(String, c.concat([(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255])));d += 1;
	  }return b;
	}function oaep_pad(q, a, f, l) {
	  var c = KJUR.crypto.MessageDigest;var o = KJUR.crypto.Util;var b = null;if (!f) {
	    f = "sha1";
	  }if (typeof f === "string") {
	    b = c.getCanonicalAlgName(f);l = c.getHashLength(b);f = function f(i) {
	      return hextorstr(o.hashHex(rstrtohex(i), b));
	    };
	  }if (q.length + 2 * l + 2 > a) {
	    throw "Message too long for RSA";
	  }var k = "",
	      e;for (e = 0; e < a - q.length - 2 * l - 2; e += 1) {
	    k += "\x00";
	  }var h = f("") + k + "\x01" + q;var g = new Array(l);new SecureRandom().nextBytes(g);var j = oaep_mgf1_arr(g, h.length, f);var p = [];for (e = 0; e < h.length; e += 1) {
	    p[e] = h.charCodeAt(e) ^ j.charCodeAt(e);
	  }var m = oaep_mgf1_arr(p, g.length, f);var d = [0];for (e = 0; e < g.length; e += 1) {
	    d[e + 1] = g[e] ^ m.charCodeAt(e);
	  }return new BigInteger(d.concat(p));
	}function RSAKey() {
	  this.n = null;this.e = 0;this.d = null;this.p = null;this.q = null;this.dmp1 = null;this.dmq1 = null;this.coeff = null;
	}function RSASetPublic(b, a) {
	  this.isPublic = true;this.isPrivate = false;if (typeof b !== "string") {
	    this.n = b;this.e = a;
	  } else {
	    if (b != null && a != null && b.length > 0 && a.length > 0) {
	      this.n = parseBigInt(b, 16);this.e = parseInt(a, 16);
	    } else {
	      throw "Invalid RSA public key";
	    }
	  }
	}function RSADoPublic(a) {
	  return a.modPowInt(this.e, this.n);
	}function RSAEncrypt(d) {
	  var a = pkcs1pad2(d, this.n.bitLength() + 7 >> 3);if (a == null) {
	    return null;
	  }var e = this.doPublic(a);if (e == null) {
	    return null;
	  }var b = e.toString(16);if ((b.length & 1) == 0) {
	    return b;
	  } else {
	    return "0" + b;
	  }
	}function RSAEncryptOAEP(f, e, b) {
	  var a = oaep_pad(f, this.n.bitLength() + 7 >> 3, e, b);if (a == null) {
	    return null;
	  }var g = this.doPublic(a);if (g == null) {
	    return null;
	  }var d = g.toString(16);if ((d.length & 1) == 0) {
	    return d;
	  } else {
	    return "0" + d;
	  }
	}RSAKey.prototype.doPublic = RSADoPublic;RSAKey.prototype.setPublic = RSASetPublic;RSAKey.prototype.encrypt = RSAEncrypt;RSAKey.prototype.encryptOAEP = RSAEncryptOAEP;RSAKey.prototype.type = "RSA";
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function ECFieldElementFp(b, a) {
	  this.x = a;this.q = b;
	}function feFpEquals(a) {
	  if (a == this) {
	    return true;
	  }return this.q.equals(a.q) && this.x.equals(a.x);
	}function feFpToBigInteger() {
	  return this.x;
	}function feFpNegate() {
	  return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
	}function feFpAdd(a) {
	  return new ECFieldElementFp(this.q, this.x.add(a.toBigInteger()).mod(this.q));
	}function feFpSubtract(a) {
	  return new ECFieldElementFp(this.q, this.x.subtract(a.toBigInteger()).mod(this.q));
	}function feFpMultiply(a) {
	  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger()).mod(this.q));
	}function feFpSquare() {
	  return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
	}function feFpDivide(a) {
	  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q));
	}ECFieldElementFp.prototype.equals = feFpEquals;ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;ECFieldElementFp.prototype.negate = feFpNegate;ECFieldElementFp.prototype.add = feFpAdd;ECFieldElementFp.prototype.subtract = feFpSubtract;ECFieldElementFp.prototype.multiply = feFpMultiply;ECFieldElementFp.prototype.square = feFpSquare;ECFieldElementFp.prototype.divide = feFpDivide;function ECPointFp(c, a, d, b) {
	  this.curve = c;this.x = a;this.y = d;if (b == null) {
	    this.z = BigInteger.ONE;
	  } else {
	    this.z = b;
	  }this.zinv = null;
	}function pointFpGetX() {
	  if (this.zinv == null) {
	    this.zinv = this.z.modInverse(this.curve.q);
	  }return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
	}function pointFpGetY() {
	  if (this.zinv == null) {
	    this.zinv = this.z.modInverse(this.curve.q);
	  }return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
	}function pointFpEquals(a) {
	  if (a == this) {
	    return true;
	  }if (this.isInfinity()) {
	    return a.isInfinity();
	  }if (a.isInfinity()) {
	    return this.isInfinity();
	  }var c, b;c = a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if (!c.equals(BigInteger.ZERO)) {
	    return false;
	  }b = a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO);
	}function pointFpIsInfinity() {
	  if (this.x == null && this.y == null) {
	    return true;
	  }return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
	}function pointFpNegate() {
	  return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
	}function pointFpAdd(l) {
	  if (this.isInfinity()) {
	    return l;
	  }if (l.isInfinity()) {
	    return this;
	  }var p = l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o = l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if (BigInteger.ZERO.equals(o)) {
	    if (BigInteger.ZERO.equals(p)) {
	      return this.twice();
	    }return this.curve.getInfinity();
	  }var j = new BigInteger("3");var e = this.x.toBigInteger();var n = this.y.toBigInteger();var c = l.x.toBigInteger();var k = l.y.toBigInteger();var m = o.square();var i = m.multiply(o);var d = e.multiply(m);var g = p.square().multiply(this.z);var a = g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h = d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f = i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(a), this.curve.fromBigInteger(h), f);
	}function pointFpTwice() {
	  if (this.isInfinity()) {
	    return this;
	  }if (this.y.toBigInteger().signum() == 0) {
	    return this.curve.getInfinity();
	  }var g = new BigInteger("3");var c = this.x.toBigInteger();var h = this.y.toBigInteger();var e = h.multiply(this.z);var j = e.multiply(h).mod(this.curve.q);var i = this.curve.a.toBigInteger();var k = c.square().multiply(g);if (!BigInteger.ZERO.equals(i)) {
	    k = k.add(this.z.square().multiply(i));
	  }k = k.mod(this.curve.q);var b = k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f = k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d = e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(b), this.curve.fromBigInteger(f), d);
	}function pointFpMultiply(b) {
	  if (this.isInfinity()) {
	    return this;
	  }if (b.signum() == 0) {
	    return this.curve.getInfinity();
	  }var g = b;var f = g.multiply(new BigInteger("3"));var l = this.negate();var d = this;var c;for (c = f.bitLength() - 2; c > 0; --c) {
	    d = d.twice();var a = f.testBit(c);var j = g.testBit(c);if (a != j) {
	      d = d.add(a ? this : l);
	    }
	  }return d;
	}function pointFpMultiplyTwo(c, a, b) {
	  var d;if (c.bitLength() > b.bitLength()) {
	    d = c.bitLength() - 1;
	  } else {
	    d = b.bitLength() - 1;
	  }var f = this.curve.getInfinity();var e = this.add(a);while (d >= 0) {
	    f = f.twice();if (c.testBit(d)) {
	      if (b.testBit(d)) {
	        f = f.add(e);
	      } else {
	        f = f.add(this);
	      }
	    } else {
	      if (b.testBit(d)) {
	        f = f.add(a);
	      }
	    }--d;
	  }return f;
	}ECPointFp.prototype.getX = pointFpGetX;ECPointFp.prototype.getY = pointFpGetY;ECPointFp.prototype.equals = pointFpEquals;ECPointFp.prototype.isInfinity = pointFpIsInfinity;ECPointFp.prototype.negate = pointFpNegate;ECPointFp.prototype.add = pointFpAdd;ECPointFp.prototype.twice = pointFpTwice;ECPointFp.prototype.multiply = pointFpMultiply;ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;function ECCurveFp(e, d, c) {
	  this.q = e;this.a = this.fromBigInteger(d);this.b = this.fromBigInteger(c);this.infinity = new ECPointFp(this, null, null);
	}function curveFpGetQ() {
	  return this.q;
	}function curveFpGetA() {
	  return this.a;
	}function curveFpGetB() {
	  return this.b;
	}function curveFpEquals(a) {
	  if (a == this) {
	    return true;
	  }return this.q.equals(a.q) && this.a.equals(a.a) && this.b.equals(a.b);
	}function curveFpGetInfinity() {
	  return this.infinity;
	}function curveFpFromBigInteger(a) {
	  return new ECFieldElementFp(this.q, a);
	}function curveFpDecodePointHex(d) {
	  switch (parseInt(d.substr(0, 2), 16)) {case 0:
	      return this.infinity;case 2:case 3:
	      return null;case 4:case 6:case 7:
	      var a = (d.length - 2) / 2;var c = d.substr(2, a);var b = d.substr(a + 2, a);return new ECPointFp(this, this.fromBigInteger(new BigInteger(c, 16)), this.fromBigInteger(new BigInteger(b, 16)));default:
	      return null;}
	}ECCurveFp.prototype.getQ = curveFpGetQ;ECCurveFp.prototype.getA = curveFpGetA;ECCurveFp.prototype.getB = curveFpGetB;ECCurveFp.prototype.equals = curveFpEquals;ECCurveFp.prototype.getInfinity = curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
	/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
	 */
	var jsonParse = function () {
	  var e = "(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)";var j = '(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';var i = '(?:"' + j + '*")';var d = new RegExp("(?:false|true|null|[\\{\\}\\[\\]]|" + e + "|" + i + ")", "g");var k = new RegExp("\\\\(?:([^u])|u(.{4}))", "g");var g = { '"': '"', "/": "/", "\\": "\\", b: "\b", f: "\f", n: "\n", r: "\r", t: "\t" };function h(l, m, n) {
	    return m ? g[m] : String.fromCharCode(parseInt(n, 16));
	  }var c = new String("");var a = "\\";var f = { "{": Object, "[": Array };var b = Object.hasOwnProperty;return function (u, q) {
	    var p = u.match(d);var x;var v = p[0];var l = false;if ("{" === v) {
	      x = {};
	    } else {
	      if ("[" === v) {
	        x = [];
	      } else {
	        x = [];l = true;
	      }
	    }var t;var r = [x];for (var o = 1 - l, m = p.length; o < m; ++o) {
	      v = p[o];var w;switch (v.charCodeAt(0)) {default:
	          w = r[0];w[t || w.length] = +v;t = void 0;break;case 34:
	          v = v.substring(1, v.length - 1);if (v.indexOf(a) !== -1) {
	            v = v.replace(k, h);
	          }w = r[0];if (!t) {
	            if (w instanceof Array) {
	              t = w.length;
	            } else {
	              t = v || c;break;
	            }
	          }w[t] = v;t = void 0;break;case 91:
	          w = r[0];r.unshift(w[t || w.length] = []);t = void 0;break;case 93:
	          r.shift();break;case 102:
	          w = r[0];w[t || w.length] = false;t = void 0;break;case 110:
	          w = r[0];w[t || w.length] = null;t = void 0;break;case 116:
	          w = r[0];w[t || w.length] = true;t = void 0;break;case 123:
	          w = r[0];r.unshift(w[t || w.length] = {});t = void 0;break;case 125:
	          r.shift();break;}
	    }if (l) {
	      if (r.length !== 1) {
	        throw new Error();
	      }x = x[0];
	    } else {
	      if (r.length) {
	        throw new Error();
	      }
	    }if (q) {
	      var s = function s(C, B) {
	        var D = C[B];if (D && (typeof D === "undefined" ? "undefined" : _typeof(D)) === "object") {
	          var n = null;for (var z in D) {
	            if (b.call(D, z) && D !== C) {
	              var y = s(D, z);if (y !== void 0) {
	                D[z] = y;
	              } else {
	                if (!n) {
	                  n = [];
	                }n.push(z);
	              }
	            }
	          }if (n) {
	            for (var A = n.length; --A >= 0;) {
	              delete D[n[A]];
	            }
	          }
	        }return q.call(C, B, D);
	      };x = s({ "": x }, "");
	    }return x;
	  };
	}();
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.asn1 == "undefined" || !KJUR.asn1) {
	  KJUR.asn1 = {};
	}KJUR.asn1.ASN1Util = new function () {
	  this.integerToByteHex = function (a) {
	    var b = a.toString(16);if (b.length % 2 == 1) {
	      b = "0" + b;
	    }return b;
	  };this.bigIntToMinTwosComplementsHex = function (j) {
	    var f = j.toString(16);if (f.substr(0, 1) != "-") {
	      if (f.length % 2 == 1) {
	        f = "0" + f;
	      } else {
	        if (!f.match(/^[0-7]/)) {
	          f = "00" + f;
	        }
	      }
	    } else {
	      var a = f.substr(1);var e = a.length;if (e % 2 == 1) {
	        e += 1;
	      } else {
	        if (!f.match(/^[0-7]/)) {
	          e += 2;
	        }
	      }var g = "";for (var d = 0; d < e; d++) {
	        g += "f";
	      }var c = new BigInteger(g, 16);var b = c.xor(j).add(BigInteger.ONE);f = b.toString(16).replace(/^-/, "");
	    }return f;
	  };this.getPEMStringFromHex = function (a, b) {
	    return hextopem(a, b);
	  };this.newObject = function (k) {
	    var D = KJUR,
	        n = D.asn1,
	        z = n.DERBoolean,
	        e = n.DERInteger,
	        s = n.DERBitString,
	        h = n.DEROctetString,
	        v = n.DERNull,
	        w = n.DERObjectIdentifier,
	        l = n.DEREnumerated,
	        g = n.DERUTF8String,
	        f = n.DERNumericString,
	        y = n.DERPrintableString,
	        u = n.DERTeletexString,
	        p = n.DERIA5String,
	        C = n.DERUTCTime,
	        j = n.DERGeneralizedTime,
	        m = n.DERSequence,
	        c = n.DERSet,
	        r = n.DERTaggedObject,
	        o = n.ASN1Util.newObject;var t = Object.keys(k);if (t.length != 1) {
	      throw "key of param shall be only one.";
	    }var F = t[0];if (":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":" + F + ":") == -1) {
	      throw "undefined key: " + F;
	    }if (F == "bool") {
	      return new z(k[F]);
	    }if (F == "int") {
	      return new e(k[F]);
	    }if (F == "bitstr") {
	      return new s(k[F]);
	    }if (F == "octstr") {
	      return new h(k[F]);
	    }if (F == "null") {
	      return new v(k[F]);
	    }if (F == "oid") {
	      return new w(k[F]);
	    }if (F == "enum") {
	      return new l(k[F]);
	    }if (F == "utf8str") {
	      return new g(k[F]);
	    }if (F == "numstr") {
	      return new f(k[F]);
	    }if (F == "prnstr") {
	      return new y(k[F]);
	    }if (F == "telstr") {
	      return new u(k[F]);
	    }if (F == "ia5str") {
	      return new p(k[F]);
	    }if (F == "utctime") {
	      return new C(k[F]);
	    }if (F == "gentime") {
	      return new j(k[F]);
	    }if (F == "seq") {
	      var d = k[F];var E = [];for (var x = 0; x < d.length; x++) {
	        var B = o(d[x]);E.push(B);
	      }return new m({ array: E });
	    }if (F == "set") {
	      var d = k[F];var E = [];for (var x = 0; x < d.length; x++) {
	        var B = o(d[x]);E.push(B);
	      }return new c({ array: E });
	    }if (F == "tag") {
	      var A = k[F];if (Object.prototype.toString.call(A) === "[object Array]" && A.length == 3) {
	        var q = o(A[2]);return new r({ tag: A[0], explicit: A[1], obj: q });
	      } else {
	        var b = {};if (A.explicit !== undefined) {
	          b.explicit = A.explicit;
	        }if (A.tag !== undefined) {
	          b.tag = A.tag;
	        }if (A.obj === undefined) {
	          throw "obj shall be specified for 'tag'.";
	        }b.obj = o(A.obj);return new r(b);
	      }
	    }
	  };this.jsonToASN1HEX = function (b) {
	    var a = this.newObject(b);return a.getEncodedHex();
	  };
	}();KJUR.asn1.ASN1Util.oidHexToInt = function (a) {
	  var j = "";var k = parseInt(a.substr(0, 2), 16);var d = Math.floor(k / 40);var c = k % 40;var j = d + "." + c;var e = "";for (var f = 2; f < a.length; f += 2) {
	    var g = parseInt(a.substr(f, 2), 16);var h = ("00000000" + g.toString(2)).slice(-8);e = e + h.substr(1, 7);if (h.substr(0, 1) == "0") {
	      var b = new BigInteger(e, 2);j = j + "." + b.toString(10);e = "";
	    }
	  }return j;
	};KJUR.asn1.ASN1Util.oidIntToHex = function (f) {
	  var e = function e(a) {
	    var k = a.toString(16);if (k.length == 1) {
	      k = "0" + k;
	    }return k;
	  };var d = function d(o) {
	    var n = "";var k = new BigInteger(o, 10);var a = k.toString(2);var l = 7 - a.length % 7;if (l == 7) {
	      l = 0;
	    }var q = "";for (var m = 0; m < l; m++) {
	      q += "0";
	    }a = q + a;for (var m = 0; m < a.length - 1; m += 7) {
	      var p = a.substr(m, 7);if (m != a.length - 7) {
	        p = "1" + p;
	      }n += e(parseInt(p, 2));
	    }return n;
	  };if (!f.match(/^[0-9.]+$/)) {
	    throw "malformed oid string: " + f;
	  }var g = "";var b = f.split(".");var j = parseInt(b[0]) * 40 + parseInt(b[1]);g += e(j);b.splice(0, 2);for (var c = 0; c < b.length; c++) {
	    g += d(b[c]);
	  }return g;
	};KJUR.asn1.ASN1Object = function () {
	  var c = true;var b = null;var d = "00";var e = "00";var a = "";this.getLengthHexFromValue = function () {
	    if (typeof this.hV == "undefined" || this.hV == null) {
	      throw "this.hV is null or undefined.";
	    }if (this.hV.length % 2 == 1) {
	      throw "value hex must be even length: n=" + a.length + ",v=" + this.hV;
	    }var i = this.hV.length / 2;var h = i.toString(16);if (h.length % 2 == 1) {
	      h = "0" + h;
	    }if (i < 128) {
	      return h;
	    } else {
	      var g = h.length / 2;if (g > 15) {
	        throw "ASN.1 length too long to represent by 8x: n = " + i.toString(16);
	      }var f = 128 + g;return f.toString(16) + h;
	    }
	  };this.getEncodedHex = function () {
	    if (this.hTLV == null || this.isModified) {
	      this.hV = this.getFreshValueHex();this.hL = this.getLengthHexFromValue();this.hTLV = this.hT + this.hL + this.hV;this.isModified = false;
	    }return this.hTLV;
	  };this.getValueHex = function () {
	    this.getEncodedHex();return this.hV;
	  };this.getFreshValueHex = function () {
	    return "";
	  };
	};KJUR.asn1.DERAbstractString = function (c) {
	  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var b = null;var a = null;this.getString = function () {
	    return this.s;
	  };this.setString = function (d) {
	    this.hTLV = null;this.isModified = true;this.s = d;this.hV = utf8tohex(this.s).toLowerCase();
	  };this.setStringHex = function (d) {
	    this.hTLV = null;this.isModified = true;this.s = null;this.hV = d;
	  };this.getFreshValueHex = function () {
	    return this.hV;
	  };if (typeof c != "undefined") {
	    if (typeof c == "string") {
	      this.setString(c);
	    } else {
	      if (typeof c.str != "undefined") {
	        this.setString(c.str);
	      } else {
	        if (typeof c.hex != "undefined") {
	          this.setStringHex(c.hex);
	        }
	      }
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractTime = function (c) {
	  KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);var b = null;var a = null;this.localDateToUTC = function (f) {
	    utc = f.getTime() + f.getTimezoneOffset() * 60000;var e = new Date(utc);return e;
	  };this.formatDate = function (m, o, e) {
	    var g = this.zeroPadding;var n = this.localDateToUTC(m);var p = String(n.getFullYear());if (o == "utc") {
	      p = p.substr(2, 2);
	    }var l = g(String(n.getMonth() + 1), 2);var q = g(String(n.getDate()), 2);var h = g(String(n.getHours()), 2);var i = g(String(n.getMinutes()), 2);var j = g(String(n.getSeconds()), 2);var r = p + l + q + h + i + j;if (e === true) {
	      var f = n.getMilliseconds();if (f != 0) {
	        var k = g(String(f), 3);k = k.replace(/[0]+$/, "");r = r + "." + k;
	      }
	    }return r + "Z";
	  };this.zeroPadding = function (e, d) {
	    if (e.length >= d) {
	      return e;
	    }return new Array(d - e.length + 1).join("0") + e;
	  };this.getString = function () {
	    return this.s;
	  };this.setString = function (d) {
	    this.hTLV = null;this.isModified = true;this.s = d;this.hV = stohex(d);
	  };this.setByDateValue = function (h, j, e, d, f, g) {
	    var i = new Date(Date.UTC(h, j - 1, e, d, f, g, 0));this.setByDate(i);
	  };this.getFreshValueHex = function () {
	    return this.hV;
	  };
	};YAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractStructured = function (b) {
	  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var a = null;this.setByASN1ObjectArray = function (c) {
	    this.hTLV = null;this.isModified = true;this.asn1Array = c;
	  };this.appendASN1Object = function (c) {
	    this.hTLV = null;this.isModified = true;this.asn1Array.push(c);
	  };this.asn1Array = new Array();if (typeof b != "undefined") {
	    if (typeof b.array != "undefined") {
	      this.asn1Array = b.array;
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);KJUR.asn1.DERBoolean = function () {
	  KJUR.asn1.DERBoolean.superclass.constructor.call(this);this.hT = "01";this.hTLV = "0101ff";
	};YAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);KJUR.asn1.DERInteger = function (a) {
	  KJUR.asn1.DERInteger.superclass.constructor.call(this);this.hT = "02";this.setByBigInteger = function (b) {
	    this.hTLV = null;this.isModified = true;this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
	  };this.setByInteger = function (c) {
	    var b = new BigInteger(String(c), 10);this.setByBigInteger(b);
	  };this.setValueHex = function (b) {
	    this.hV = b;
	  };this.getFreshValueHex = function () {
	    return this.hV;
	  };if (typeof a != "undefined") {
	    if (typeof a.bigint != "undefined") {
	      this.setByBigInteger(a.bigint);
	    } else {
	      if (typeof a["int"] != "undefined") {
	        this.setByInteger(a["int"]);
	      } else {
	        if (typeof a == "number") {
	          this.setByInteger(a);
	        } else {
	          if (typeof a.hex != "undefined") {
	            this.setValueHex(a.hex);
	          }
	        }
	      }
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);KJUR.asn1.DERBitString = function (b) {
	  if (b !== undefined && typeof b.obj !== "undefined") {
	    var a = KJUR.asn1.ASN1Util.newObject(b.obj);b.hex = "00" + a.getEncodedHex();
	  }KJUR.asn1.DERBitString.superclass.constructor.call(this);this.hT = "03";this.setHexValueIncludingUnusedBits = function (c) {
	    this.hTLV = null;this.isModified = true;this.hV = c;
	  };this.setUnusedBitsAndHexValue = function (c, e) {
	    if (c < 0 || 7 < c) {
	      throw "unused bits shall be from 0 to 7: u = " + c;
	    }var d = "0" + c;this.hTLV = null;this.isModified = true;this.hV = d + e;
	  };this.setByBinaryString = function (e) {
	    e = e.replace(/0+$/, "");var f = 8 - e.length % 8;if (f == 8) {
	      f = 0;
	    }for (var g = 0; g <= f; g++) {
	      e += "0";
	    }var j = "";for (var g = 0; g < e.length - 1; g += 8) {
	      var d = e.substr(g, 8);var c = parseInt(d, 2).toString(16);if (c.length == 1) {
	        c = "0" + c;
	      }j += c;
	    }this.hTLV = null;this.isModified = true;this.hV = "0" + f + j;
	  };this.setByBooleanArray = function (e) {
	    var d = "";for (var c = 0; c < e.length; c++) {
	      if (e[c] == true) {
	        d += "1";
	      } else {
	        d += "0";
	      }
	    }this.setByBinaryString(d);
	  };this.newFalseArray = function (e) {
	    var c = new Array(e);for (var d = 0; d < e; d++) {
	      c[d] = false;
	    }return c;
	  };this.getFreshValueHex = function () {
	    return this.hV;
	  };if (typeof b != "undefined") {
	    if (typeof b == "string" && b.toLowerCase().match(/^[0-9a-f]+$/)) {
	      this.setHexValueIncludingUnusedBits(b);
	    } else {
	      if (typeof b.hex != "undefined") {
	        this.setHexValueIncludingUnusedBits(b.hex);
	      } else {
	        if (typeof b.bin != "undefined") {
	          this.setByBinaryString(b.bin);
	        } else {
	          if (typeof b.array != "undefined") {
	            this.setByBooleanArray(b.array);
	          }
	        }
	      }
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);KJUR.asn1.DEROctetString = function (b) {
	  if (b !== undefined && typeof b.obj !== "undefined") {
	    var a = KJUR.asn1.ASN1Util.newObject(b.obj);b.hex = a.getEncodedHex();
	  }KJUR.asn1.DEROctetString.superclass.constructor.call(this, b);this.hT = "04";
	};YAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERNull = function () {
	  KJUR.asn1.DERNull.superclass.constructor.call(this);this.hT = "05";this.hTLV = "0500";
	};YAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);KJUR.asn1.DERObjectIdentifier = function (c) {
	  var b = function b(d) {
	    var e = d.toString(16);if (e.length == 1) {
	      e = "0" + e;
	    }return e;
	  };var a = function a(k) {
	    var j = "";var e = new BigInteger(k, 10);var d = e.toString(2);var f = 7 - d.length % 7;if (f == 7) {
	      f = 0;
	    }var m = "";for (var g = 0; g < f; g++) {
	      m += "0";
	    }d = m + d;for (var g = 0; g < d.length - 1; g += 7) {
	      var l = d.substr(g, 7);if (g != d.length - 7) {
	        l = "1" + l;
	      }j += b(parseInt(l, 2));
	    }return j;
	  };KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);this.hT = "06";this.setValueHex = function (d) {
	    this.hTLV = null;this.isModified = true;this.s = null;this.hV = d;
	  };this.setValueOidString = function (f) {
	    if (!f.match(/^[0-9.]+$/)) {
	      throw "malformed oid string: " + f;
	    }var g = "";var d = f.split(".");var j = parseInt(d[0]) * 40 + parseInt(d[1]);g += b(j);d.splice(0, 2);for (var e = 0; e < d.length; e++) {
	      g += a(d[e]);
	    }this.hTLV = null;this.isModified = true;this.s = null;this.hV = g;
	  };this.setValueName = function (e) {
	    var d = KJUR.asn1.x509.OID.name2oid(e);if (d !== "") {
	      this.setValueOidString(d);
	    } else {
	      throw "DERObjectIdentifier oidName undefined: " + e;
	    }
	  };this.getFreshValueHex = function () {
	    return this.hV;
	  };if (c !== undefined) {
	    if (typeof c === "string") {
	      if (c.match(/^[0-2].[0-9.]+$/)) {
	        this.setValueOidString(c);
	      } else {
	        this.setValueName(c);
	      }
	    } else {
	      if (c.oid !== undefined) {
	        this.setValueOidString(c.oid);
	      } else {
	        if (c.hex !== undefined) {
	          this.setValueHex(c.hex);
	        } else {
	          if (c.name !== undefined) {
	            this.setValueName(c.name);
	          }
	        }
	      }
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);KJUR.asn1.DEREnumerated = function (a) {
	  KJUR.asn1.DEREnumerated.superclass.constructor.call(this);this.hT = "0a";this.setByBigInteger = function (b) {
	    this.hTLV = null;this.isModified = true;this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
	  };this.setByInteger = function (c) {
	    var b = new BigInteger(String(c), 10);this.setByBigInteger(b);
	  };this.setValueHex = function (b) {
	    this.hV = b;
	  };this.getFreshValueHex = function () {
	    return this.hV;
	  };if (typeof a != "undefined") {
	    if (typeof a["int"] != "undefined") {
	      this.setByInteger(a["int"]);
	    } else {
	      if (typeof a == "number") {
	        this.setByInteger(a);
	      } else {
	        if (typeof a.hex != "undefined") {
	          this.setValueHex(a.hex);
	        }
	      }
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);KJUR.asn1.DERUTF8String = function (a) {
	  KJUR.asn1.DERUTF8String.superclass.constructor.call(this, a);this.hT = "0c";
	};YAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);KJUR.asn1.DERNumericString = function (a) {
	  KJUR.asn1.DERNumericString.superclass.constructor.call(this, a);this.hT = "12";
	};YAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERPrintableString = function (a) {
	  KJUR.asn1.DERPrintableString.superclass.constructor.call(this, a);this.hT = "13";
	};YAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERTeletexString = function (a) {
	  KJUR.asn1.DERTeletexString.superclass.constructor.call(this, a);this.hT = "14";
	};YAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERIA5String = function (a) {
	  KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);this.hT = "16";
	};YAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);KJUR.asn1.DERUTCTime = function (a) {
	  KJUR.asn1.DERUTCTime.superclass.constructor.call(this, a);this.hT = "17";this.setByDate = function (b) {
	    this.hTLV = null;this.isModified = true;this.date = b;this.s = this.formatDate(this.date, "utc");this.hV = stohex(this.s);
	  };this.getFreshValueHex = function () {
	    if (typeof this.date == "undefined" && typeof this.s == "undefined") {
	      this.date = new Date();this.s = this.formatDate(this.date, "utc");this.hV = stohex(this.s);
	    }return this.hV;
	  };if (a !== undefined) {
	    if (a.str !== undefined) {
	      this.setString(a.str);
	    } else {
	      if (typeof a == "string" && a.match(/^[0-9]{12}Z$/)) {
	        this.setString(a);
	      } else {
	        if (a.hex !== undefined) {
	          this.setStringHex(a.hex);
	        } else {
	          if (a.date !== undefined) {
	            this.setByDate(a.date);
	          }
	        }
	      }
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);KJUR.asn1.DERGeneralizedTime = function (a) {
	  KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, a);this.hT = "18";this.withMillis = false;this.setByDate = function (b) {
	    this.hTLV = null;this.isModified = true;this.date = b;this.s = this.formatDate(this.date, "gen", this.withMillis);this.hV = stohex(this.s);
	  };this.getFreshValueHex = function () {
	    if (this.date === undefined && this.s === undefined) {
	      this.date = new Date();this.s = this.formatDate(this.date, "gen", this.withMillis);this.hV = stohex(this.s);
	    }return this.hV;
	  };if (a !== undefined) {
	    if (a.str !== undefined) {
	      this.setString(a.str);
	    } else {
	      if (typeof a == "string" && a.match(/^[0-9]{14}Z$/)) {
	        this.setString(a);
	      } else {
	        if (a.hex !== undefined) {
	          this.setStringHex(a.hex);
	        } else {
	          if (a.date !== undefined) {
	            this.setByDate(a.date);
	          }
	        }
	      }
	    }if (a.millis === true) {
	      this.withMillis = true;
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);KJUR.asn1.DERSequence = function (a) {
	  KJUR.asn1.DERSequence.superclass.constructor.call(this, a);this.hT = "30";this.getFreshValueHex = function () {
	    var c = "";for (var b = 0; b < this.asn1Array.length; b++) {
	      var d = this.asn1Array[b];c += d.getEncodedHex();
	    }this.hV = c;return this.hV;
	  };
	};YAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERSet = function (a) {
	  KJUR.asn1.DERSet.superclass.constructor.call(this, a);this.hT = "31";this.sortFlag = true;this.getFreshValueHex = function () {
	    var b = new Array();for (var c = 0; c < this.asn1Array.length; c++) {
	      var d = this.asn1Array[c];b.push(d.getEncodedHex());
	    }if (this.sortFlag == true) {
	      b.sort();
	    }this.hV = b.join("");return this.hV;
	  };if (typeof a != "undefined") {
	    if (typeof a.sortflag != "undefined" && a.sortflag == false) {
	      this.sortFlag = false;
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERTaggedObject = function (a) {
	  KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);this.hT = "a0";this.hV = "";this.isExplicit = true;this.asn1Object = null;this.setASN1Object = function (b, c, d) {
	    this.hT = c;this.isExplicit = b;this.asn1Object = d;if (this.isExplicit) {
	      this.hV = this.asn1Object.getEncodedHex();this.hTLV = null;this.isModified = true;
	    } else {
	      this.hV = null;this.hTLV = d.getEncodedHex();this.hTLV = this.hTLV.replace(/^../, c);this.isModified = false;
	    }
	  };this.getFreshValueHex = function () {
	    return this.hV;
	  };if (typeof a != "undefined") {
	    if (typeof a.tag != "undefined") {
	      this.hT = a.tag;
	    }if (typeof a.explicit != "undefined") {
	      this.isExplicit = a.explicit;
	    }if (typeof a.obj != "undefined") {
	      this.asn1Object = a.obj;this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);
	var ASN1HEX = new function () {}();ASN1HEX.getLblen = function (c, a) {
	  if (c.substr(a + 2, 1) != "8") {
	    return 1;
	  }var b = parseInt(c.substr(a + 3, 1));if (b == 0) {
	    return -1;
	  }if (0 < b && b < 10) {
	    return b + 1;
	  }return -2;
	};ASN1HEX.getL = function (c, b) {
	  var a = ASN1HEX.getLblen(c, b);if (a < 1) {
	    return "";
	  }return c.substr(b + 2, a * 2);
	};ASN1HEX.getVblen = function (d, a) {
	  var c, b;c = ASN1HEX.getL(d, a);if (c == "") {
	    return -1;
	  }if (c.substr(0, 1) === "8") {
	    b = new BigInteger(c.substr(2), 16);
	  } else {
	    b = new BigInteger(c, 16);
	  }return b.intValue();
	};ASN1HEX.getVidx = function (c, b) {
	  var a = ASN1HEX.getLblen(c, b);if (a < 0) {
	    return a;
	  }return b + (a + 1) * 2;
	};ASN1HEX.getV = function (d, a) {
	  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return d.substr(c, b * 2);
	};ASN1HEX.getTLV = function (b, a) {
	  return b.substr(a, 2) + ASN1HEX.getL(b, a) + ASN1HEX.getV(b, a);
	};ASN1HEX.getNextSiblingIdx = function (d, a) {
	  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return c + b * 2;
	};ASN1HEX.getChildIdx = function (e, f) {
	  var j = ASN1HEX;var g = new Array();var i = j.getVidx(e, f);if (e.substr(f, 2) == "03") {
	    g.push(i + 2);
	  } else {
	    g.push(i);
	  }var l = j.getVblen(e, f);var c = i;var d = 0;while (1) {
	    var b = j.getNextSiblingIdx(e, c);if (b == null || b - i >= l * 2) {
	      break;
	    }if (d >= 200) {
	      break;
	    }g.push(b);c = b;d++;
	  }return g;
	};ASN1HEX.getNthChildIdx = function (d, b, e) {
	  var c = ASN1HEX.getChildIdx(d, b);return c[e];
	};ASN1HEX.getIdxbyList = function (e, d, c, i) {
	  var g = ASN1HEX;var f, b;if (c.length == 0) {
	    if (i !== undefined) {
	      if (e.substr(d, 2) !== i) {
	        throw "checking tag doesn't match: " + e.substr(d, 2) + "!=" + i;
	      }
	    }return d;
	  }f = c.shift();b = g.getChildIdx(e, d);return g.getIdxbyList(e, b[f], c, i);
	};ASN1HEX.getTLVbyList = function (d, c, b, f) {
	  var e = ASN1HEX;var a = e.getIdxbyList(d, c, b);if (a === undefined) {
	    throw "can't find nthList object";
	  }if (f !== undefined) {
	    if (d.substr(a, 2) != f) {
	      throw "checking tag doesn't match: " + d.substr(a, 2) + "!=" + f;
	    }
	  }return e.getTLV(d, a);
	};ASN1HEX.getVbyList = function (e, c, b, g, i) {
	  var f = ASN1HEX;var a, d;a = f.getIdxbyList(e, c, b, g);if (a === undefined) {
	    throw "can't find nthList object";
	  }d = f.getV(e, a);if (i === true) {
	    d = d.substr(2);
	  }return d;
	};ASN1HEX.hextooidstr = function (e) {
	  var h = function h(b, a) {
	    if (b.length >= a) {
	      return b;
	    }return new Array(a - b.length + 1).join("0") + b;
	  };var l = [];var o = e.substr(0, 2);var f = parseInt(o, 16);l[0] = new String(Math.floor(f / 40));l[1] = new String(f % 40);var m = e.substr(2);var k = [];for (var g = 0; g < m.length / 2; g++) {
	    k.push(parseInt(m.substr(g * 2, 2), 16));
	  }var j = [];var d = "";for (var g = 0; g < k.length; g++) {
	    if (k[g] & 128) {
	      d = d + h((k[g] & 127).toString(2), 7);
	    } else {
	      d = d + h((k[g] & 127).toString(2), 7);j.push(new String(parseInt(d, 2)));d = "";
	    }
	  }var n = l.join(".");if (j.length > 0) {
	    n = n + "." + j.join(".");
	  }return n;
	};ASN1HEX.dump = function (t, c, l, g) {
	  var p = ASN1HEX;var j = p.getV;var y = p.dump;var w = p.getChildIdx;var e = t;if (t instanceof KJUR.asn1.ASN1Object) {
	    e = t.getEncodedHex();
	  }var q = function q(A, i) {
	    if (A.length <= i * 2) {
	      return A;
	    } else {
	      var v = A.substr(0, i) + "..(total " + A.length / 2 + "bytes).." + A.substr(A.length - i, i);return v;
	    }
	  };if (c === undefined) {
	    c = { ommit_long_octet: 32 };
	  }if (l === undefined) {
	    l = 0;
	  }if (g === undefined) {
	    g = "";
	  }var x = c.ommit_long_octet;if (e.substr(l, 2) == "01") {
	    var h = j(e, l);if (h == "00") {
	      return g + "BOOLEAN FALSE\n";
	    } else {
	      return g + "BOOLEAN TRUE\n";
	    }
	  }if (e.substr(l, 2) == "02") {
	    var h = j(e, l);return g + "INTEGER " + q(h, x) + "\n";
	  }if (e.substr(l, 2) == "03") {
	    var h = j(e, l);return g + "BITSTRING " + q(h, x) + "\n";
	  }if (e.substr(l, 2) == "04") {
	    var h = j(e, l);if (p.isASN1HEX(h)) {
	      var k = g + "OCTETSTRING, encapsulates\n";k = k + y(h, c, 0, g + "  ");return k;
	    } else {
	      return g + "OCTETSTRING " + q(h, x) + "\n";
	    }
	  }if (e.substr(l, 2) == "05") {
	    return g + "NULL\n";
	  }if (e.substr(l, 2) == "06") {
	    var m = j(e, l);var a = KJUR.asn1.ASN1Util.oidHexToInt(m);var o = KJUR.asn1.x509.OID.oid2name(a);var b = a.replace(/\./g, " ");if (o != "") {
	      return g + "ObjectIdentifier " + o + " (" + b + ")\n";
	    } else {
	      return g + "ObjectIdentifier (" + b + ")\n";
	    }
	  }if (e.substr(l, 2) == "0c") {
	    return g + "UTF8String '" + hextoutf8(j(e, l)) + "'\n";
	  }if (e.substr(l, 2) == "13") {
	    return g + "PrintableString '" + hextoutf8(j(e, l)) + "'\n";
	  }if (e.substr(l, 2) == "14") {
	    return g + "TeletexString '" + hextoutf8(j(e, l)) + "'\n";
	  }if (e.substr(l, 2) == "16") {
	    return g + "IA5String '" + hextoutf8(j(e, l)) + "'\n";
	  }if (e.substr(l, 2) == "17") {
	    return g + "UTCTime " + hextoutf8(j(e, l)) + "\n";
	  }if (e.substr(l, 2) == "18") {
	    return g + "GeneralizedTime " + hextoutf8(j(e, l)) + "\n";
	  }if (e.substr(l, 2) == "30") {
	    if (e.substr(l, 4) == "3000") {
	      return g + "SEQUENCE {}\n";
	    }var k = g + "SEQUENCE\n";var d = w(e, l);var f = c;if ((d.length == 2 || d.length == 3) && e.substr(d[0], 2) == "06" && e.substr(d[d.length - 1], 2) == "04") {
	      var o = p.oidname(j(e, d[0]));var r = JSON.parse(JSON.stringify(c));r.x509ExtName = o;f = r;
	    }for (var u = 0; u < d.length; u++) {
	      k = k + y(e, f, d[u], g + "  ");
	    }return k;
	  }if (e.substr(l, 2) == "31") {
	    var k = g + "SET\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
	      k = k + y(e, c, d[u], g + "  ");
	    }return k;
	  }var z = parseInt(e.substr(l, 2), 16);if ((z & 128) != 0) {
	    var n = z & 31;if ((z & 32) != 0) {
	      var k = g + "[" + n + "]\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
	        k = k + y(e, c, d[u], g + "  ");
	      }return k;
	    } else {
	      var h = j(e, l);if (h.substr(0, 8) == "68747470") {
	        h = hextoutf8(h);
	      }if (c.x509ExtName === "subjectAltName" && n == 2) {
	        h = hextoutf8(h);
	      }var k = g + "[" + n + "] " + h + "\n";return k;
	    }
	  }return g + "UNKNOWN(" + e.substr(l, 2) + ") " + j(e, l) + "\n";
	};ASN1HEX.isASN1HEX = function (e) {
	  var d = ASN1HEX;if (e.length % 2 == 1) {
	    return false;
	  }var c = d.getVblen(e, 0);var b = e.substr(0, 2);var f = d.getL(e, 0);var a = e.length - b.length - f.length;if (a == c * 2) {
	    return true;
	  }return false;
	};ASN1HEX.oidname = function (a) {
	  var c = KJUR.asn1;if (KJUR.lang.String.isHex(a)) {
	    a = c.ASN1Util.oidHexToInt(a);
	  }var b = c.x509.OID.oid2name(a);if (b === "") {
	    b = a;
	  }return b;
	};
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.asn1 == "undefined" || !KJUR.asn1) {
	  KJUR.asn1 = {};
	}if (typeof KJUR.asn1.x509 == "undefined" || !KJUR.asn1.x509) {
	  KJUR.asn1.x509 = {};
	}KJUR.asn1.x509.Certificate = function (e) {
	  KJUR.asn1.x509.Certificate.superclass.constructor.call(this);var a = null,
	      j = null,
	      h = null,
	      k = null,
	      i = null,
	      b = KJUR,
	      f = b.crypto,
	      g = b.asn1,
	      d = g.DERSequence,
	      c = g.DERBitString;this.sign = function () {
	    this.asn1SignatureAlg = this.asn1TBSCert.asn1SignatureAlg;var m = new KJUR.crypto.Signature({ alg: this.asn1SignatureAlg.nameAlg });m.init(this.prvKey);m.updateHex(this.asn1TBSCert.getEncodedHex());this.hexSig = m.sign();this.asn1Sig = new c({ hex: "00" + this.hexSig });var l = new d({ array: [this.asn1TBSCert, this.asn1SignatureAlg, this.asn1Sig] });this.hTLV = l.getEncodedHex();this.isModified = false;
	  };this.setSignatureHex = function (l) {
	    this.asn1SignatureAlg = this.asn1TBSCert.asn1SignatureAlg;this.hexSig = l;this.asn1Sig = new c({ hex: "00" + this.hexSig });var m = new d({ array: [this.asn1TBSCert, this.asn1SignatureAlg, this.asn1Sig] });this.hTLV = m.getEncodedHex();this.isModified = false;
	  };this.getEncodedHex = function () {
	    if (this.isModified == false && this.hTLV != null) {
	      return this.hTLV;
	    }throw "not signed yet";
	  };this.getPEMString = function () {
	    var l = hextob64nl(this.getEncodedHex());return "-----BEGIN CERTIFICATE-----\r\n" + l + "\r\n-----END CERTIFICATE-----\r\n";
	  };if (e !== undefined) {
	    if (e.tbscertobj !== undefined) {
	      this.asn1TBSCert = e.tbscertobj;
	    }if (e.prvkeyobj !== undefined) {
	      this.prvKey = e.prvkeyobj;
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.Certificate, KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertificate = function (e) {
	  KJUR.asn1.x509.TBSCertificate.superclass.constructor.call(this);var b = KJUR,
	      i = b.asn1,
	      f = i.DERSequence,
	      h = i.DERInteger,
	      c = i.DERTaggedObject,
	      d = i.x509,
	      g = d.Time,
	      a = d.X500Name,
	      j = d.SubjectPublicKeyInfo;this._initialize = function () {
	    this.asn1Array = new Array();this.asn1Version = new c({ obj: new h({ "int": 2 }) });this.asn1SerialNumber = null;this.asn1SignatureAlg = null;this.asn1Issuer = null;this.asn1NotBefore = null;this.asn1NotAfter = null;this.asn1Subject = null;this.asn1SubjPKey = null;this.extensionsArray = new Array();
	  };this.setSerialNumberByParam = function (k) {
	    this.asn1SerialNumber = new h(k);
	  };this.setSignatureAlgByParam = function (k) {
	    this.asn1SignatureAlg = new d.AlgorithmIdentifier(k);
	  };this.setIssuerByParam = function (k) {
	    this.asn1Issuer = new a(k);
	  };this.setNotBeforeByParam = function (k) {
	    this.asn1NotBefore = new g(k);
	  };this.setNotAfterByParam = function (k) {
	    this.asn1NotAfter = new g(k);
	  };this.setSubjectByParam = function (k) {
	    this.asn1Subject = new a(k);
	  };this.setSubjectPublicKey = function (k) {
	    this.asn1SubjPKey = new j(k);
	  };this.setSubjectPublicKeyByGetKey = function (l) {
	    var k = KEYUTIL.getKey(l);this.asn1SubjPKey = new j(k);
	  };this.appendExtension = function (k) {
	    this.extensionsArray.push(k);
	  };this.appendExtensionByName = function (l, k) {
	    KJUR.asn1.x509.Extension.appendByNameToArray(l, k, this.extensionsArray);
	  };this.getEncodedHex = function () {
	    if (this.asn1NotBefore == null || this.asn1NotAfter == null) {
	      throw "notBefore and/or notAfter not set";
	    }var l = new f({ array: [this.asn1NotBefore, this.asn1NotAfter] });this.asn1Array = new Array();this.asn1Array.push(this.asn1Version);this.asn1Array.push(this.asn1SerialNumber);this.asn1Array.push(this.asn1SignatureAlg);this.asn1Array.push(this.asn1Issuer);this.asn1Array.push(l);this.asn1Array.push(this.asn1Subject);this.asn1Array.push(this.asn1SubjPKey);if (this.extensionsArray.length > 0) {
	      var m = new f({ array: this.extensionsArray });var k = new c({ explicit: true, tag: "a3", obj: m });this.asn1Array.push(k);
	    }var n = new f({ array: this.asn1Array });this.hTLV = n.getEncodedHex();this.isModified = false;return this.hTLV;
	  };this._initialize();
	};YAHOO.lang.extend(KJUR.asn1.x509.TBSCertificate, KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extension = function (d) {
	  KJUR.asn1.x509.Extension.superclass.constructor.call(this);var f = null,
	      a = KJUR,
	      e = a.asn1,
	      h = e.DERObjectIdentifier,
	      i = e.DEROctetString,
	      b = e.DERBitString,
	      g = e.DERBoolean,
	      c = e.DERSequence;this.getEncodedHex = function () {
	    var m = new h({ oid: this.oid });var l = new i({ hex: this.getExtnValueHex() });var k = new Array();k.push(m);if (this.critical) {
	      k.push(new g());
	    }k.push(l);var j = new c({ array: k });return j.getEncodedHex();
	  };this.critical = false;if (d !== undefined) {
	    if (d.critical !== undefined) {
	      this.critical = d.critical;
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.Extension, KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extension.appendByNameToArray = function (e, c, b) {
	  var g = e.toLowerCase(),
	      f = KJUR.asn1.x509;if (g == "basicconstraints") {
	    var d = new f.BasicConstraints(c);b.push(d);
	  } else {
	    if (g == "keyusage") {
	      var d = new f.KeyUsage(c);b.push(d);
	    } else {
	      if (g == "crldistributionpoints") {
	        var d = new f.CRLDistributionPoints(c);b.push(d);
	      } else {
	        if (g == "extkeyusage") {
	          var d = new f.ExtKeyUsage(c);b.push(d);
	        } else {
	          if (g == "authoritykeyidentifier") {
	            var d = new f.AuthorityKeyIdentifier(c);b.push(d);
	          } else {
	            if (g == "authorityinfoaccess") {
	              var d = new f.AuthorityInfoAccess(c);b.push(d);
	            } else {
	              if (g == "subjectaltname") {
	                var d = new f.SubjectAltName(c);b.push(d);
	              } else {
	                if (g == "issueraltname") {
	                  var d = new f.IssuerAltName(c);b.push(d);
	                } else {
	                  throw "unsupported extension name: " + e;
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	  }
	};KJUR.asn1.x509.KeyUsage = function (f) {
	  KJUR.asn1.x509.KeyUsage.superclass.constructor.call(this, f);var a = X509.KEYUSAGE_NAME;this.getExtnValueHex = function () {
	    return this.asn1ExtnValue.getEncodedHex();
	  };this.oid = "2.5.29.15";if (f !== undefined) {
	    if (f.bin !== undefined) {
	      this.asn1ExtnValue = new KJUR.asn1.DERBitString(f);
	    }if (f.names !== undefined && f.names.length !== undefined) {
	      var e = f.names;var d = "000000000";for (var c = 0; c < e.length; c++) {
	        for (var b = 0; b < a.length; b++) {
	          if (e[c] === a[b]) {
	            d = d.substring(0, b) + "1" + d.substring(b + 1, d.length);
	          }
	        }
	      }this.asn1ExtnValue = new KJUR.asn1.DERBitString({ bin: d });
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.KeyUsage, KJUR.asn1.x509.Extension);KJUR.asn1.x509.BasicConstraints = function (c) {
	  KJUR.asn1.x509.BasicConstraints.superclass.constructor.call(this, c);var a = false;var b = -1;this.getExtnValueHex = function () {
	    var e = new Array();if (this.cA) {
	      e.push(new KJUR.asn1.DERBoolean());
	    }if (this.pathLen > -1) {
	      e.push(new KJUR.asn1.DERInteger({ "int": this.pathLen }));
	    }var d = new KJUR.asn1.DERSequence({ array: e });this.asn1ExtnValue = d;return this.asn1ExtnValue.getEncodedHex();
	  };this.oid = "2.5.29.19";this.cA = false;this.pathLen = -1;if (c !== undefined) {
	    if (c.cA !== undefined) {
	      this.cA = c.cA;
	    }if (c.pathLen !== undefined) {
	      this.pathLen = c.pathLen;
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.BasicConstraints, KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRLDistributionPoints = function (d) {
	  KJUR.asn1.x509.CRLDistributionPoints.superclass.constructor.call(this, d);var b = KJUR,
	      a = b.asn1,
	      c = a.x509;this.getExtnValueHex = function () {
	    return this.asn1ExtnValue.getEncodedHex();
	  };this.setByDPArray = function (e) {
	    this.asn1ExtnValue = new a.DERSequence({ array: e });
	  };this.setByOneURI = function (h) {
	    var e = new c.GeneralNames([{ uri: h }]);var g = new c.DistributionPointName(e);var f = new c.DistributionPoint({ dpobj: g });this.setByDPArray([f]);
	  };this.oid = "2.5.29.31";if (d !== undefined) {
	    if (d.array !== undefined) {
	      this.setByDPArray(d.array);
	    } else {
	      if (d.uri !== undefined) {
	        this.setByOneURI(d.uri);
	      }
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.CRLDistributionPoints, KJUR.asn1.x509.Extension);KJUR.asn1.x509.ExtKeyUsage = function (c) {
	  KJUR.asn1.x509.ExtKeyUsage.superclass.constructor.call(this, c);var b = KJUR,
	      a = b.asn1;this.setPurposeArray = function (d) {
	    this.asn1ExtnValue = new a.DERSequence();for (var e = 0; e < d.length; e++) {
	      var f = new a.DERObjectIdentifier(d[e]);this.asn1ExtnValue.appendASN1Object(f);
	    }
	  };this.getExtnValueHex = function () {
	    return this.asn1ExtnValue.getEncodedHex();
	  };this.oid = "2.5.29.37";if (c !== undefined) {
	    if (c.array !== undefined) {
	      this.setPurposeArray(c.array);
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.ExtKeyUsage, KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityKeyIdentifier = function (d) {
	  KJUR.asn1.x509.AuthorityKeyIdentifier.superclass.constructor.call(this, d);var b = KJUR,
	      a = b.asn1,
	      c = a.DERTaggedObject;this.asn1KID = null;this.asn1CertIssuer = null;this.asn1CertSN = null;this.getExtnValueHex = function () {
	    var f = new Array();if (this.asn1KID) {
	      f.push(new c({ explicit: false, tag: "80", obj: this.asn1KID }));
	    }if (this.asn1CertIssuer) {
	      f.push(new c({ explicit: false, tag: "a1", obj: this.asn1CertIssuer }));
	    }if (this.asn1CertSN) {
	      f.push(new c({ explicit: false, tag: "82", obj: this.asn1CertSN }));
	    }var e = new a.DERSequence({ array: f });this.asn1ExtnValue = e;return this.asn1ExtnValue.getEncodedHex();
	  };this.setKIDByParam = function (e) {
	    this.asn1KID = new KJUR.asn1.DEROctetString(e);
	  };this.setCertIssuerByParam = function (e) {
	    this.asn1CertIssuer = new KJUR.asn1.x509.X500Name(e);
	  };this.setCertSNByParam = function (e) {
	    this.asn1CertSN = new KJUR.asn1.DERInteger(e);
	  };this.oid = "2.5.29.35";if (d !== undefined) {
	    if (d.kid !== undefined) {
	      this.setKIDByParam(d.kid);
	    }if (d.issuer !== undefined) {
	      this.setCertIssuerByParam(d.issuer);
	    }if (d.sn !== undefined) {
	      this.setCertSNByParam(d.sn);
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.AuthorityKeyIdentifier, KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityInfoAccess = function (a) {
	  KJUR.asn1.x509.AuthorityInfoAccess.superclass.constructor.call(this, a);this.setAccessDescriptionArray = function (k) {
	    var j = new Array(),
	        b = KJUR,
	        g = b.asn1,
	        d = g.DERSequence;for (var f = 0; f < k.length; f++) {
	      var c = new g.DERObjectIdentifier(k[f].accessMethod);var e = new g.x509.GeneralName(k[f].accessLocation);var h = new d({ array: [c, e] });j.push(h);
	    }this.asn1ExtnValue = new d({ array: j });
	  };this.getExtnValueHex = function () {
	    return this.asn1ExtnValue.getEncodedHex();
	  };this.oid = "1.3.6.1.5.5.7.1.1";if (a !== undefined) {
	    if (a.array !== undefined) {
	      this.setAccessDescriptionArray(a.array);
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.AuthorityInfoAccess, KJUR.asn1.x509.Extension);KJUR.asn1.x509.SubjectAltName = function (a) {
	  KJUR.asn1.x509.SubjectAltName.superclass.constructor.call(this, a);this.setNameArray = function (b) {
	    this.asn1ExtnValue = new KJUR.asn1.x509.GeneralNames(b);
	  };this.getExtnValueHex = function () {
	    return this.asn1ExtnValue.getEncodedHex();
	  };this.oid = "2.5.29.17";if (a !== undefined) {
	    if (a.array !== undefined) {
	      this.setNameArray(a.array);
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.SubjectAltName, KJUR.asn1.x509.Extension);KJUR.asn1.x509.IssuerAltName = function (a) {
	  KJUR.asn1.x509.IssuerAltName.superclass.constructor.call(this, a);this.setNameArray = function (b) {
	    this.asn1ExtnValue = new KJUR.asn1.x509.GeneralNames(b);
	  };this.getExtnValueHex = function () {
	    return this.asn1ExtnValue.getEncodedHex();
	  };this.oid = "2.5.29.18";if (a !== undefined) {
	    if (a.array !== undefined) {
	      this.setNameArray(a.array);
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.IssuerAltName, KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRL = function (f) {
	  KJUR.asn1.x509.CRL.superclass.constructor.call(this);var b = null,
	      d = null,
	      e = null,
	      c = null,
	      a = null;this.sign = function () {
	    this.asn1SignatureAlg = this.asn1TBSCertList.asn1SignatureAlg;sig = new KJUR.crypto.Signature({ alg: "SHA1withRSA", prov: "cryptojs/jsrsa" });sig.init(this.prvKey);sig.updateHex(this.asn1TBSCertList.getEncodedHex());this.hexSig = sig.sign();this.asn1Sig = new KJUR.asn1.DERBitString({ hex: "00" + this.hexSig });var g = new KJUR.asn1.DERSequence({ array: [this.asn1TBSCertList, this.asn1SignatureAlg, this.asn1Sig] });this.hTLV = g.getEncodedHex();this.isModified = false;
	  };this.getEncodedHex = function () {
	    if (this.isModified == false && this.hTLV != null) {
	      return this.hTLV;
	    }throw "not signed yet";
	  };this.getPEMString = function () {
	    var g = hextob64nl(this.getEncodedHex());return "-----BEGIN X509 CRL-----\r\n" + g + "\r\n-----END X509 CRL-----\r\n";
	  };if (f !== undefined) {
	    if (f.tbsobj !== undefined) {
	      this.asn1TBSCertList = f.tbsobj;
	    }if (f.prvkeyobj !== undefined) {
	      this.prvKey = f.prvkeyobj;
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.CRL, KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertList = function (g) {
	  KJUR.asn1.x509.TBSCertList.superclass.constructor.call(this);var e = null,
	      d = KJUR,
	      c = d.asn1,
	      b = c.DERSequence,
	      f = c.x509,
	      a = f.Time;this.setSignatureAlgByParam = function (h) {
	    this.asn1SignatureAlg = new f.AlgorithmIdentifier(h);
	  };this.setIssuerByParam = function (h) {
	    this.asn1Issuer = new f.X500Name(h);
	  };this.setThisUpdateByParam = function (h) {
	    this.asn1ThisUpdate = new a(h);
	  };this.setNextUpdateByParam = function (h) {
	    this.asn1NextUpdate = new a(h);
	  };this.addRevokedCert = function (h, i) {
	    var k = {};if (h != undefined && h != null) {
	      k.sn = h;
	    }if (i != undefined && i != null) {
	      k.time = i;
	    }var j = new f.CRLEntry(k);this.aRevokedCert.push(j);
	  };this.getEncodedHex = function () {
	    this.asn1Array = new Array();if (this.asn1Version != null) {
	      this.asn1Array.push(this.asn1Version);
	    }this.asn1Array.push(this.asn1SignatureAlg);this.asn1Array.push(this.asn1Issuer);this.asn1Array.push(this.asn1ThisUpdate);if (this.asn1NextUpdate != null) {
	      this.asn1Array.push(this.asn1NextUpdate);
	    }if (this.aRevokedCert.length > 0) {
	      var h = new b({ array: this.aRevokedCert });this.asn1Array.push(h);
	    }var i = new b({ array: this.asn1Array });this.hTLV = i.getEncodedHex();this.isModified = false;return this.hTLV;
	  };this._initialize = function () {
	    this.asn1Version = null;this.asn1SignatureAlg = null;this.asn1Issuer = null;this.asn1ThisUpdate = null;this.asn1NextUpdate = null;this.aRevokedCert = new Array();
	  };this._initialize();
	};YAHOO.lang.extend(KJUR.asn1.x509.TBSCertList, KJUR.asn1.ASN1Object);KJUR.asn1.x509.CRLEntry = function (e) {
	  KJUR.asn1.x509.CRLEntry.superclass.constructor.call(this);var d = null,
	      c = null,
	      b = KJUR,
	      a = b.asn1;this.setCertSerial = function (f) {
	    this.sn = new a.DERInteger(f);
	  };this.setRevocationDate = function (f) {
	    this.time = new a.x509.Time(f);
	  };this.getEncodedHex = function () {
	    var f = new a.DERSequence({ array: [this.sn, this.time] });this.TLV = f.getEncodedHex();return this.TLV;
	  };if (e !== undefined) {
	    if (e.time !== undefined) {
	      this.setRevocationDate(e.time);
	    }if (e.sn !== undefined) {
	      this.setCertSerial(e.sn);
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.CRLEntry, KJUR.asn1.ASN1Object);KJUR.asn1.x509.X500Name = function (f) {
	  KJUR.asn1.x509.X500Name.superclass.constructor.call(this);this.asn1Array = new Array();var d = KJUR,
	      c = d.asn1,
	      e = c.x509,
	      b = pemtohex;this.setByString = function (g) {
	    var k = g.split("/");k.shift();var j = [];for (var l = 0; l < k.length; l++) {
	      if (k[l].match(/^[^=]+=.+$/)) {
	        j.push(k[l]);
	      } else {
	        var h = j.length - 1;j[h] = j[h] + "/" + k[l];
	      }
	    }for (var l = 0; l < j.length; l++) {
	      this.asn1Array.push(new e.RDN({ str: j[l] }));
	    }
	  };this.setByLdapString = function (g) {
	    var h = e.X500Name.ldapToOneline(g);this.setByString(h);
	  };this.setByObject = function (i) {
	    for (var g in i) {
	      if (i.hasOwnProperty(g)) {
	        var h = new KJUR.asn1.x509.RDN({ str: g + "=" + i[g] });this.asn1Array ? this.asn1Array.push(h) : this.asn1Array = [h];
	      }
	    }
	  };this.getEncodedHex = function () {
	    if (typeof this.hTLV == "string") {
	      return this.hTLV;
	    }var g = new c.DERSequence({ array: this.asn1Array });this.hTLV = g.getEncodedHex();return this.hTLV;
	  };if (f !== undefined) {
	    if (f.str !== undefined) {
	      this.setByString(f.str);
	    } else {
	      if (f.ldapstr !== undefined) {
	        this.setByLdapString(f.ldapstr);
	      } else {
	        if ((typeof f === "undefined" ? "undefined" : _typeof(f)) === "object") {
	          this.setByObject(f);
	        }
	      }
	    }if (f.certissuer !== undefined) {
	      var a = new X509();a.hex = b(f.certissuer);this.hTLV = a.getIssuerHex();
	    }if (f.certsubject !== undefined) {
	      var a = new X509();a.hex = b(f.certsubject);this.hTLV = a.getSubjectHex();
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.X500Name, KJUR.asn1.ASN1Object);KJUR.asn1.x509.X500Name.onelineToLDAP = function (d) {
	  if (d.substr(0, 1) !== "/") {
	    throw "malformed input";
	  }var b = "";d = d.substr(1);var c = d.split("/");c.reverse();c = c.map(function (a) {
	    return a.replace(/,/, "\\,");
	  });return c.join(",");
	};KJUR.asn1.x509.X500Name.ldapToOneline = function (g) {
	  var c = g.split(",");var e = false;var b = [];for (var f = 0; c.length > 0; f++) {
	    var h = c.shift();if (e === true) {
	      var d = b.pop();var j = (d + "," + h).replace(/\\,/g, ",");b.push(j);e = false;
	    } else {
	      b.push(h);
	    }if (h.substr(-1, 1) === "\\") {
	      e = true;
	    }
	  }b = b.map(function (a) {
	    return a.replace("/", "\\/");
	  });b.reverse();return "/" + b.join("/");
	};KJUR.asn1.x509.RDN = function (a) {
	  KJUR.asn1.x509.RDN.superclass.constructor.call(this);this.asn1Array = new Array();this.addByString = function (b) {
	    this.asn1Array.push(new KJUR.asn1.x509.AttributeTypeAndValue({ str: b }));
	  };this.addByMultiValuedString = function (d) {
	    var b = KJUR.asn1.x509.RDN.parseString(d);for (var c = 0; c < b.length; c++) {
	      this.addByString(b[c]);
	    }
	  };this.getEncodedHex = function () {
	    var b = new KJUR.asn1.DERSet({ array: this.asn1Array });this.TLV = b.getEncodedHex();return this.TLV;
	  };if (a !== undefined) {
	    if (a.str !== undefined) {
	      this.addByMultiValuedString(a.str);
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.RDN, KJUR.asn1.ASN1Object);KJUR.asn1.x509.RDN.parseString = function (m) {
	  var j = m.split(/\+/);var h = false;var c = [];for (var g = 0; j.length > 0; g++) {
	    var k = j.shift();if (h === true) {
	      var f = c.pop();var d = (f + "+" + k).replace(/\\\+/g, "+");c.push(d);h = false;
	    } else {
	      c.push(k);
	    }if (k.substr(-1, 1) === "\\") {
	      h = true;
	    }
	  }var l = false;var b = [];for (var g = 0; c.length > 0; g++) {
	    var k = c.shift();if (l === true) {
	      var e = b.pop();if (k.match(/"$/)) {
	        var d = (e + "+" + k).replace(/^([^=]+)="(.*)"$/, "$1=$2");b.push(d);l = false;
	      } else {
	        b.push(e + "+" + k);
	      }
	    } else {
	      b.push(k);
	    }if (k.match(/^[^=]+="/)) {
	      l = true;
	    }
	  }return b;
	};KJUR.asn1.x509.AttributeTypeAndValue = function (d) {
	  KJUR.asn1.x509.AttributeTypeAndValue.superclass.constructor.call(this);var f = null,
	      e = null,
	      a = "utf8",
	      c = KJUR,
	      b = c.asn1;this.setByString = function (h) {
	    var g = h.match(/^([^=]+)=(.+)$/);if (g) {
	      this.setByAttrTypeAndValueStr(g[1], g[2]);
	    } else {
	      throw "malformed attrTypeAndValueStr: " + h;
	    }
	  };this.setByAttrTypeAndValueStr = function (i, h) {
	    this.typeObj = KJUR.asn1.x509.OID.atype2obj(i);var g = a;if (i == "C") {
	      g = "prn";
	    }this.valueObj = this.getValueObj(g, h);
	  };this.getValueObj = function (h, g) {
	    if (h == "utf8") {
	      return new b.DERUTF8String({ str: g });
	    }if (h == "prn") {
	      return new b.DERPrintableString({ str: g });
	    }if (h == "tel") {
	      return new b.DERTeletexString({ str: g });
	    }if (h == "ia5") {
	      return new b.DERIA5String({ str: g });
	    }throw "unsupported directory string type: type=" + h + " value=" + g;
	  };this.getEncodedHex = function () {
	    var g = new b.DERSequence({ array: [this.typeObj, this.valueObj] });this.TLV = g.getEncodedHex();return this.TLV;
	  };if (d !== undefined) {
	    if (d.str !== undefined) {
	      this.setByString(d.str);
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.AttributeTypeAndValue, KJUR.asn1.ASN1Object);KJUR.asn1.x509.SubjectPublicKeyInfo = function (f) {
	  KJUR.asn1.x509.SubjectPublicKeyInfo.superclass.constructor.call(this);var l = null,
	      k = null,
	      a = KJUR,
	      j = a.asn1,
	      i = j.DERInteger,
	      b = j.DERBitString,
	      m = j.DERObjectIdentifier,
	      e = j.DERSequence,
	      h = j.ASN1Util.newObject,
	      d = j.x509,
	      o = d.AlgorithmIdentifier,
	      g = a.crypto,
	      n = g.ECDSA,
	      c = g.DSA;this.getASN1Object = function () {
	    if (this.asn1AlgId == null || this.asn1SubjPKey == null) {
	      throw "algId and/or subjPubKey not set";
	    }var p = new e({ array: [this.asn1AlgId, this.asn1SubjPKey] });return p;
	  };this.getEncodedHex = function () {
	    var p = this.getASN1Object();this.hTLV = p.getEncodedHex();return this.hTLV;
	  };this.setPubKey = function (q) {
	    try {
	      if (q instanceof RSAKey) {
	        var u = h({ seq: [{ "int": { bigint: q.n } }, { "int": { "int": q.e } }] });var s = u.getEncodedHex();this.asn1AlgId = new o({ name: "rsaEncryption" });this.asn1SubjPKey = new b({ hex: "00" + s });
	      }
	    } catch (p) {}try {
	      if (q instanceof KJUR.crypto.ECDSA) {
	        var r = new m({ name: q.curveName });this.asn1AlgId = new o({ name: "ecPublicKey", asn1params: r });this.asn1SubjPKey = new b({ hex: "00" + q.pubKeyHex });
	      }
	    } catch (p) {}try {
	      if (q instanceof KJUR.crypto.DSA) {
	        var r = new h({ seq: [{ "int": { bigint: q.p } }, { "int": { bigint: q.q } }, { "int": { bigint: q.g } }] });this.asn1AlgId = new o({ name: "dsa", asn1params: r });var t = new i({ bigint: q.y });this.asn1SubjPKey = new b({ hex: "00" + t.getEncodedHex() });
	      }
	    } catch (p) {}
	  };if (f !== undefined) {
	    this.setPubKey(f);
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.SubjectPublicKeyInfo, KJUR.asn1.ASN1Object);KJUR.asn1.x509.Time = function (f) {
	  KJUR.asn1.x509.Time.superclass.constructor.call(this);var e = null,
	      a = null,
	      d = KJUR,
	      c = d.asn1,
	      b = c.DERUTCTime,
	      g = c.DERGeneralizedTime;this.setTimeParams = function (h) {
	    this.timeParams = h;
	  };this.getEncodedHex = function () {
	    var h = null;if (this.timeParams != null) {
	      if (this.type == "utc") {
	        h = new b(this.timeParams);
	      } else {
	        h = new g(this.timeParams);
	      }
	    } else {
	      if (this.type == "utc") {
	        h = new b();
	      } else {
	        h = new g();
	      }
	    }this.TLV = h.getEncodedHex();return this.TLV;
	  };this.type = "utc";if (f !== undefined) {
	    if (f.type !== undefined) {
	      this.type = f.type;
	    } else {
	      if (f.str !== undefined) {
	        if (f.str.match(/^[0-9]{12}Z$/)) {
	          this.type = "utc";
	        }if (f.str.match(/^[0-9]{14}Z$/)) {
	          this.type = "gen";
	        }
	      }
	    }this.timeParams = f;
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.Time, KJUR.asn1.ASN1Object);KJUR.asn1.x509.AlgorithmIdentifier = function (d) {
	  KJUR.asn1.x509.AlgorithmIdentifier.superclass.constructor.call(this);this.nameAlg = null;this.asn1Alg = null;this.asn1Params = null;this.paramEmpty = false;var b = KJUR,
	      a = b.asn1;this.getEncodedHex = function () {
	    if (this.nameAlg === null && this.asn1Alg === null) {
	      throw "algorithm not specified";
	    }if (this.nameAlg !== null && this.asn1Alg === null) {
	      this.asn1Alg = a.x509.OID.name2obj(this.nameAlg);
	    }var e = [this.asn1Alg];if (this.asn1Params !== null) {
	      e.push(this.asn1Params);
	    }var f = new a.DERSequence({ array: e });this.hTLV = f.getEncodedHex();return this.hTLV;
	  };if (d !== undefined) {
	    if (d.name !== undefined) {
	      this.nameAlg = d.name;
	    }if (d.asn1params !== undefined) {
	      this.asn1Params = d.asn1params;
	    }if (d.paramempty !== undefined) {
	      this.paramEmpty = d.paramempty;
	    }
	  }if (this.asn1Params === null && this.paramEmpty === false && this.nameAlg !== null) {
	    var c = this.nameAlg.toLowerCase();if (c.substr(-7, 7) !== "withdsa" && c.substr(-9, 9) !== "withecdsa") {
	      this.asn1Params = new a.DERNull();
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.AlgorithmIdentifier, KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralName = function (e) {
	  KJUR.asn1.x509.GeneralName.superclass.constructor.call(this);var m = null,
	      i = null,
	      k = { rfc822: "81", dns: "82", dn: "a4", uri: "86", ip: "87" },
	      b = KJUR,
	      g = b.asn1,
	      f = g.DERSequence,
	      j = g.DEROctetString,
	      d = g.DERIA5String,
	      c = g.DERTaggedObject,
	      l = g.ASN1Object,
	      a = g.x509.X500Name,
	      h = pemtohex;this.explicit = false;this.setByParam = function (p) {
	    var r = null;var u = null;if (p === undefined) {
	      return;
	    }if (p.rfc822 !== undefined) {
	      this.type = "rfc822";u = new d({ str: p[this.type] });
	    }if (p.dns !== undefined) {
	      this.type = "dns";u = new d({ str: p[this.type] });
	    }if (p.uri !== undefined) {
	      this.type = "uri";u = new d({ str: p[this.type] });
	    }if (p.dn !== undefined) {
	      this.type = "dn";this.explicit = true;u = new a({ str: p.dn });
	    }if (p.ldapdn !== undefined) {
	      this.type = "dn";this.explicit = true;u = new a({ ldapstr: p.ldapdn });
	    }if (p.certissuer !== undefined) {
	      this.type = "dn";this.explicit = true;var o = p.certissuer;var w = null;if (o.match(/^[0-9A-Fa-f]+$/)) {
	        w == o;
	      }if (o.indexOf("-----BEGIN ") != -1) {
	        w = h(o);
	      }if (w == null) {
	        throw "certissuer param not cert";
	      }var t = new X509();t.hex = w;var y = t.getIssuerHex();u = new l();u.hTLV = y;
	    }if (p.certsubj !== undefined) {
	      this.type = "dn";this.explicit = true;var o = p.certsubj;var w = null;if (o.match(/^[0-9A-Fa-f]+$/)) {
	        w == o;
	      }if (o.indexOf("-----BEGIN ") != -1) {
	        w = h(o);
	      }if (w == null) {
	        throw "certsubj param not cert";
	      }var t = new X509();t.hex = w;var y = t.getSubjectHex();u = new l();u.hTLV = y;
	    }if (p.ip !== undefined) {
	      this.type = "ip";this.explicit = false;var q = p.ip;var s;var n = "malformed IP address";if (q.match(/^[0-9.]+[.][0-9.]+$/)) {
	        s = intarystrtohex("[" + q.split(".").join(",") + "]");if (s.length !== 8) {
	          throw n;
	        }
	      } else {
	        if (q.match(/^[0-9A-Fa-f:]+:[0-9A-Fa-f:]+$/)) {
	          s = ipv6tohex(q);
	        } else {
	          if (q.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) {
	            s = q;
	          } else {
	            throw n;
	          }
	        }
	      }u = new j({ hex: s });
	    }if (this.type == null) {
	      throw "unsupported type in params=" + p;
	    }this.asn1Obj = new c({ explicit: this.explicit, tag: k[this.type], obj: u });
	  };this.getEncodedHex = function () {
	    return this.asn1Obj.getEncodedHex();
	  };if (e !== undefined) {
	    this.setByParam(e);
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.GeneralName, KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralNames = function (d) {
	  KJUR.asn1.x509.GeneralNames.superclass.constructor.call(this);var a = null,
	      c = KJUR,
	      b = c.asn1;this.setByParamArray = function (g) {
	    for (var e = 0; e < g.length; e++) {
	      var f = new b.x509.GeneralName(g[e]);this.asn1Array.push(f);
	    }
	  };this.getEncodedHex = function () {
	    var e = new b.DERSequence({ array: this.asn1Array });return e.getEncodedHex();
	  };this.asn1Array = new Array();if (typeof d != "undefined") {
	    this.setByParamArray(d);
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.GeneralNames, KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPointName = function (b) {
	  KJUR.asn1.x509.DistributionPointName.superclass.constructor.call(this);var h = null,
	      e = null,
	      a = null,
	      g = null,
	      d = KJUR,
	      c = d.asn1,
	      f = c.DERTaggedObject;this.getEncodedHex = function () {
	    if (this.type != "full") {
	      throw "currently type shall be 'full': " + this.type;
	    }this.asn1Obj = new f({ explicit: false, tag: this.tag, obj: this.asn1V });this.hTLV = this.asn1Obj.getEncodedHex();return this.hTLV;
	  };if (b !== undefined) {
	    if (c.x509.GeneralNames.prototype.isPrototypeOf(b)) {
	      this.type = "full";this.tag = "a0";this.asn1V = b;
	    } else {
	      throw "This class supports GeneralNames only as argument";
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.DistributionPointName, KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPoint = function (d) {
	  KJUR.asn1.x509.DistributionPoint.superclass.constructor.call(this);var a = null,
	      c = KJUR,
	      b = c.asn1;this.getEncodedHex = function () {
	    var e = new b.DERSequence();if (this.asn1DP != null) {
	      var f = new b.DERTaggedObject({ explicit: true, tag: "a0", obj: this.asn1DP });e.appendASN1Object(f);
	    }this.hTLV = e.getEncodedHex();return this.hTLV;
	  };if (d !== undefined) {
	    if (d.dpobj !== undefined) {
	      this.asn1DP = d.dpobj;
	    }
	  }
	};YAHOO.lang.extend(KJUR.asn1.x509.DistributionPoint, KJUR.asn1.ASN1Object);KJUR.asn1.x509.OID = new function (a) {
	  this.atype2oidList = { CN: "2.5.4.3", L: "2.5.4.7", ST: "2.5.4.8", O: "2.5.4.10", OU: "2.5.4.11", C: "2.5.4.6", STREET: "2.5.4.9", DC: "0.9.2342.19200300.100.1.25", UID: "0.9.2342.19200300.100.1.1", SN: "2.5.4.4", T: "2.5.4.12", DN: "2.5.4.49", E: "1.2.840.113549.1.9.1", description: "2.5.4.13", businessCategory: "2.5.4.15", postalCode: "2.5.4.17", serialNumber: "2.5.4.5", uniqueIdentifier: "2.5.4.45", organizationIdentifier: "2.5.4.97", jurisdictionOfIncorporationL: "1.3.6.1.4.1.311.60.2.1.1", jurisdictionOfIncorporationSP: "1.3.6.1.4.1.311.60.2.1.2", jurisdictionOfIncorporationC: "1.3.6.1.4.1.311.60.2.1.3" };this.name2oidList = { sha1: "1.3.14.3.2.26", sha256: "2.16.840.1.101.3.4.2.1", sha384: "2.16.840.1.101.3.4.2.2", sha512: "2.16.840.1.101.3.4.2.3", sha224: "2.16.840.1.101.3.4.2.4", md5: "1.2.840.113549.2.5", md2: "1.3.14.7.2.2.1", ripemd160: "1.3.36.3.2.1", MD2withRSA: "1.2.840.113549.1.1.2", MD4withRSA: "1.2.840.113549.1.1.3", MD5withRSA: "1.2.840.113549.1.1.4", SHA1withRSA: "1.2.840.113549.1.1.5", SHA224withRSA: "1.2.840.113549.1.1.14", SHA256withRSA: "1.2.840.113549.1.1.11", SHA384withRSA: "1.2.840.113549.1.1.12", SHA512withRSA: "1.2.840.113549.1.1.13", SHA1withECDSA: "1.2.840.10045.4.1", SHA224withECDSA: "1.2.840.10045.4.3.1", SHA256withECDSA: "1.2.840.10045.4.3.2", SHA384withECDSA: "1.2.840.10045.4.3.3", SHA512withECDSA: "1.2.840.10045.4.3.4", dsa: "1.2.840.10040.4.1", SHA1withDSA: "1.2.840.10040.4.3", SHA224withDSA: "2.16.840.1.101.3.4.3.1", SHA256withDSA: "2.16.840.1.101.3.4.3.2", rsaEncryption: "1.2.840.113549.1.1.1", commonName: "2.5.4.3", countryName: "2.5.4.6", localityName: "2.5.4.7", stateOrProvinceName: "2.5.4.8", streetAddress: "2.5.4.9", organizationName: "2.5.4.10", organizationalUnitName: "2.5.4.11", domainComponent: "0.9.2342.19200300.100.1.25", userId: "0.9.2342.19200300.100.1.1", surname: "2.5.4.4", title: "2.5.4.12", distinguishedName: "2.5.4.49", emailAddress: "1.2.840.113549.1.9.1", description: "2.5.4.13", businessCategory: "2.5.4.15", postalCode: "2.5.4.17", uniqueIdentifier: "2.5.4.45", organizationIdentifier: "2.5.4.97", jurisdictionOfIncorporationL: "1.3.6.1.4.1.311.60.2.1.1", jurisdictionOfIncorporationSP: "1.3.6.1.4.1.311.60.2.1.2", jurisdictionOfIncorporationC: "1.3.6.1.4.1.311.60.2.1.3", subjectKeyIdentifier: "2.5.29.14", keyUsage: "2.5.29.15", subjectAltName: "2.5.29.17", issuerAltName: "2.5.29.18", basicConstraints: "2.5.29.19", nameConstraints: "2.5.29.30", cRLDistributionPoints: "2.5.29.31", certificatePolicies: "2.5.29.32", authorityKeyIdentifier: "2.5.29.35", policyConstraints: "2.5.29.36", extKeyUsage: "2.5.29.37", authorityInfoAccess: "1.3.6.1.5.5.7.1.1", ocsp: "1.3.6.1.5.5.7.48.1", caIssuers: "1.3.6.1.5.5.7.48.2", anyExtendedKeyUsage: "2.5.29.37.0", serverAuth: "1.3.6.1.5.5.7.3.1", clientAuth: "1.3.6.1.5.5.7.3.2", codeSigning: "1.3.6.1.5.5.7.3.3", emailProtection: "1.3.6.1.5.5.7.3.4", timeStamping: "1.3.6.1.5.5.7.3.8", ocspSigning: "1.3.6.1.5.5.7.3.9", ecPublicKey: "1.2.840.10045.2.1", secp256r1: "1.2.840.10045.3.1.7", secp256k1: "1.3.132.0.10", secp384r1: "1.3.132.0.34", pkcs5PBES2: "1.2.840.113549.1.5.13", pkcs5PBKDF2: "1.2.840.113549.1.5.12", "des-EDE3-CBC": "1.2.840.113549.3.7", data: "1.2.840.113549.1.7.1", "signed-data": "1.2.840.113549.1.7.2", "enveloped-data": "1.2.840.113549.1.7.3", "digested-data": "1.2.840.113549.1.7.5", "encrypted-data": "1.2.840.113549.1.7.6", "authenticated-data": "1.2.840.113549.1.9.16.1.2", tstinfo: "1.2.840.113549.1.9.16.1.4", extensionRequest: "1.2.840.113549.1.9.14" };this.objCache = {};this.name2obj = function (b) {
	    if (typeof this.objCache[b] != "undefined") {
	      return this.objCache[b];
	    }if (typeof this.name2oidList[b] == "undefined") {
	      throw "Name of ObjectIdentifier not defined: " + b;
	    }var c = this.name2oidList[b];var d = new KJUR.asn1.DERObjectIdentifier({ oid: c });this.objCache[b] = d;return d;
	  };this.atype2obj = function (b) {
	    if (typeof this.objCache[b] != "undefined") {
	      return this.objCache[b];
	    }if (typeof this.atype2oidList[b] == "undefined") {
	      throw "AttributeType name undefined: " + b;
	    }var c = this.atype2oidList[b];var d = new KJUR.asn1.DERObjectIdentifier({ oid: c });this.objCache[b] = d;return d;
	  };
	}();KJUR.asn1.x509.OID.oid2name = function (b) {
	  var c = KJUR.asn1.x509.OID.name2oidList;for (var a in c) {
	    if (c[a] == b) {
	      return a;
	    }
	  }return "";
	};KJUR.asn1.x509.OID.oid2atype = function (b) {
	  var c = KJUR.asn1.x509.OID.atype2oidList;for (var a in c) {
	    if (c[a] == b) {
	      return a;
	    }
	  }return b;
	};KJUR.asn1.x509.OID.name2oid = function (a) {
	  var b = KJUR.asn1.x509.OID.name2oidList;if (b[a] === undefined) {
	    return "";
	  }return b[a];
	};KJUR.asn1.x509.X509Util = {};KJUR.asn1.x509.X509Util.newCertPEM = function (h) {
	  var g = KJUR.asn1.x509,
	      b = g.TBSCertificate,
	      a = g.Certificate;var f = new b();if (h.serial !== undefined) {
	    f.setSerialNumberByParam(h.serial);
	  } else {
	    throw "serial number undefined.";
	  }if (typeof h.sigalg.name === "string") {
	    f.setSignatureAlgByParam(h.sigalg);
	  } else {
	    throw "unproper signature algorithm name";
	  }if (h.issuer !== undefined) {
	    f.setIssuerByParam(h.issuer);
	  } else {
	    throw "issuer name undefined.";
	  }if (h.notbefore !== undefined) {
	    f.setNotBeforeByParam(h.notbefore);
	  } else {
	    throw "notbefore undefined.";
	  }if (h.notafter !== undefined) {
	    f.setNotAfterByParam(h.notafter);
	  } else {
	    throw "notafter undefined.";
	  }if (h.subject !== undefined) {
	    f.setSubjectByParam(h.subject);
	  } else {
	    throw "subject name undefined.";
	  }if (h.sbjpubkey !== undefined) {
	    f.setSubjectPublicKeyByGetKey(h.sbjpubkey);
	  } else {
	    throw "subject public key undefined.";
	  }if (h.ext !== undefined && h.ext.length !== undefined) {
	    for (var d = 0; d < h.ext.length; d++) {
	      for (key in h.ext[d]) {
	        f.appendExtensionByName(key, h.ext[d][key]);
	      }
	    }
	  }if (h.cakey === undefined && h.sighex === undefined) {
	    throw "param cakey and sighex undefined.";
	  }var e = null;var c = null;if (h.cakey) {
	    if (h.cakey.isPrivate === true) {
	      e = h.cakey;
	    } else {
	      e = KEYUTIL.getKey.apply(null, h.cakey);
	    }c = new a({ tbscertobj: f, prvkeyobj: e });c.sign();
	  }if (h.sighex) {
	    c = new a({ tbscertobj: f });c.setSignatureHex(h.sighex);
	  }return c.getPEMString();
	};
	var KJUR;if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.lang == "undefined" || !KJUR.lang) {
	  KJUR.lang = {};
	}KJUR.lang.String = function () {};function Base64x() {}function stoBA(d) {
	  var b = new Array();for (var c = 0; c < d.length; c++) {
	    b[c] = d.charCodeAt(c);
	  }return b;
	}function BAtos(b) {
	  var d = "";for (var c = 0; c < b.length; c++) {
	    d = d + String.fromCharCode(b[c]);
	  }return d;
	}function BAtohex(b) {
	  var e = "";for (var d = 0; d < b.length; d++) {
	    var c = b[d].toString(16);if (c.length == 1) {
	      c = "0" + c;
	    }e = e + c;
	  }return e;
	}function stohex(a) {
	  return BAtohex(stoBA(a));
	}function stob64(a) {
	  return hex2b64(stohex(a));
	}function stob64u(a) {
	  return b64tob64u(hex2b64(stohex(a)));
	}function b64utos(a) {
	  return BAtos(b64toBA(b64utob64(a)));
	}function b64tob64u(a) {
	  a = a.replace(/\=/g, "");a = a.replace(/\+/g, "-");a = a.replace(/\//g, "_");return a;
	}function b64utob64(a) {
	  if (a.length % 4 == 2) {
	    a = a + "==";
	  } else {
	    if (a.length % 4 == 3) {
	      a = a + "=";
	    }
	  }a = a.replace(/-/g, "+");a = a.replace(/_/g, "/");return a;
	}function hextob64u(a) {
	  if (a.length % 2 == 1) {
	    a = "0" + a;
	  }return b64tob64u(hex2b64(a));
	}function b64utohex(a) {
	  return b64tohex(b64utob64(a));
	}var utf8tob64u, b64utoutf8;if (typeof Buffer === "function") {
	  utf8tob64u = function utf8tob64u(a) {
	    return b64tob64u(new Buffer(a, "utf8").toString("base64"));
	  };b64utoutf8 = function b64utoutf8(a) {
	    return new Buffer(b64utob64(a), "base64").toString("utf8");
	  };
	} else {
	  utf8tob64u = function utf8tob64u(a) {
	    return hextob64u(uricmptohex(encodeURIComponentAll(a)));
	  };b64utoutf8 = function b64utoutf8(a) {
	    return decodeURIComponent(hextouricmp(b64utohex(a)));
	  };
	}function utf8tob64(a) {
	  return hex2b64(uricmptohex(encodeURIComponentAll(a)));
	}function b64toutf8(a) {
	  return decodeURIComponent(hextouricmp(b64tohex(a)));
	}function utf8tohex(a) {
	  return uricmptohex(encodeURIComponentAll(a));
	}function hextoutf8(a) {
	  return decodeURIComponent(hextouricmp(a));
	}function hextorstr(c) {
	  var b = "";for (var a = 0; a < c.length - 1; a += 2) {
	    b += String.fromCharCode(parseInt(c.substr(a, 2), 16));
	  }return b;
	}function rstrtohex(c) {
	  var a = "";for (var b = 0; b < c.length; b++) {
	    a += ("0" + c.charCodeAt(b).toString(16)).slice(-2);
	  }return a;
	}function hextob64(a) {
	  return hex2b64(a);
	}function hextob64nl(b) {
	  var a = hextob64(b);var c = a.replace(/(.{64})/g, "$1\r\n");c = c.replace(/\r\n$/, "");return c;
	}function b64nltohex(b) {
	  var a = b.replace(/[^0-9A-Za-z\/+=]*/g, "");var c = b64tohex(a);return c;
	}function hextopem(a, b) {
	  var c = hextob64nl(a);return "-----BEGIN " + b + "-----\r\n" + c + "\r\n-----END " + b + "-----\r\n";
	}function pemtohex(a, b) {
	  if (a.indexOf("-----BEGIN ") == -1) {
	    throw "can't find PEM header: " + b;
	  }if (b !== undefined) {
	    a = a.replace("-----BEGIN " + b + "-----", "");a = a.replace("-----END " + b + "-----", "");
	  } else {
	    a = a.replace(/-----BEGIN [^-]+-----/, "");a = a.replace(/-----END [^-]+-----/, "");
	  }return b64nltohex(a);
	}function hextoArrayBuffer(d) {
	  if (d.length % 2 != 0) {
	    throw "input is not even length";
	  }if (d.match(/^[0-9A-Fa-f]+$/) == null) {
	    throw "input is not hexadecimal";
	  }var b = new ArrayBuffer(d.length / 2);var a = new DataView(b);for (var c = 0; c < d.length / 2; c++) {
	    a.setUint8(c, parseInt(d.substr(c * 2, 2), 16));
	  }return b;
	}function ArrayBuffertohex(b) {
	  var d = "";var a = new DataView(b);for (var c = 0; c < b.byteLength; c++) {
	    d += ("00" + a.getUint8(c).toString(16)).slice(-2);
	  }return d;
	}function zulutomsec(n) {
	  var l, j, m, e, f, i, b, k;var a, h, g, c;c = n.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/);if (c) {
	    a = c[1];l = parseInt(a);if (a.length === 2) {
	      if (50 <= l && l < 100) {
	        l = 1900 + l;
	      } else {
	        if (0 <= l && l < 50) {
	          l = 2000 + l;
	        }
	      }
	    }j = parseInt(c[2]) - 1;m = parseInt(c[3]);e = parseInt(c[4]);f = parseInt(c[5]);i = parseInt(c[6]);b = 0;h = c[7];if (h !== "") {
	      g = (h.substr(1) + "00").substr(0, 3);b = parseInt(g);
	    }return Date.UTC(l, j, m, e, f, i, b);
	  }throw "unsupported zulu format: " + n;
	}function zulutosec(a) {
	  var b = zulutomsec(a);return ~~(b / 1000);
	}function zulutodate(a) {
	  return new Date(zulutomsec(a));
	}function datetozulu(g, e, f) {
	  var b;var a = g.getUTCFullYear();if (e) {
	    if (a < 1950 || 2049 < a) {
	      throw "not proper year for UTCTime: " + a;
	    }b = ("" + a).slice(-2);
	  } else {
	    b = ("000" + a).slice(-4);
	  }b += ("0" + (g.getUTCMonth() + 1)).slice(-2);b += ("0" + g.getUTCDate()).slice(-2);b += ("0" + g.getUTCHours()).slice(-2);b += ("0" + g.getUTCMinutes()).slice(-2);b += ("0" + g.getUTCSeconds()).slice(-2);if (f) {
	    var c = g.getUTCMilliseconds();if (c !== 0) {
	      c = ("00" + c).slice(-3);c = c.replace(/0+$/g, "");b += "." + c;
	    }
	  }b += "Z";return b;
	}function uricmptohex(a) {
	  return a.replace(/%/g, "");
	}function hextouricmp(a) {
	  return a.replace(/(..)/g, "%$1");
	}function ipv6tohex(g) {
	  var b = "malformed IPv6 address";if (!g.match(/^[0-9A-Fa-f:]+$/)) {
	    throw b;
	  }g = g.toLowerCase();var d = g.split(":").length - 1;if (d < 2) {
	    throw b;
	  }var e = ":".repeat(7 - d + 2);g = g.replace("::", e);var c = g.split(":");if (c.length != 8) {
	    throw b;
	  }for (var f = 0; f < 8; f++) {
	    c[f] = ("0000" + c[f]).slice(-4);
	  }return c.join("");
	}function hextoipv6(e) {
	  if (!e.match(/^[0-9A-Fa-f]{32}$/)) {
	    throw "malformed IPv6 address octet";
	  }e = e.toLowerCase();var b = e.match(/.{1,4}/g);for (var d = 0; d < 8; d++) {
	    b[d] = b[d].replace(/^0+/, "");if (b[d] == "") {
	      b[d] = "0";
	    }
	  }e = ":" + b.join(":") + ":";var c = e.match(/:(0:){2,}/g);if (c === null) {
	    return e.slice(1, -1);
	  }var f = "";for (var d = 0; d < c.length; d++) {
	    if (c[d].length > f.length) {
	      f = c[d];
	    }
	  }e = e.replace(f, "::");return e.slice(1, -1);
	}function hextoip(b) {
	  var d = "malformed hex value";if (!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) {
	    throw d;
	  }if (b.length == 8) {
	    var c;try {
	      c = parseInt(b.substr(0, 2), 16) + "." + parseInt(b.substr(2, 2), 16) + "." + parseInt(b.substr(4, 2), 16) + "." + parseInt(b.substr(6, 2), 16);return c;
	    } catch (a) {
	      throw d;
	    }
	  } else {
	    if (b.length == 32) {
	      return hextoipv6(b);
	    } else {
	      return b;
	    }
	  }
	}function iptohex(f) {
	  var j = "malformed IP address";f = f.toLowerCase(f);if (f.match(/^[0-9.]+$/)) {
	    var b = f.split(".");if (b.length !== 4) {
	      throw j;
	    }var g = "";try {
	      for (var e = 0; e < 4; e++) {
	        var h = parseInt(b[e]);g += ("0" + h.toString(16)).slice(-2);
	      }return g;
	    } catch (c) {
	      throw j;
	    }
	  } else {
	    if (f.match(/^[0-9a-f:]+$/) && f.indexOf(":") !== -1) {
	      return ipv6tohex(f);
	    } else {
	      throw j;
	    }
	  }
	}function encodeURIComponentAll(a) {
	  var d = encodeURIComponent(a);var b = "";for (var c = 0; c < d.length; c++) {
	    if (d[c] == "%") {
	      b = b + d.substr(c, 3);c = c + 2;
	    } else {
	      b = b + "%" + stohex(d[c]);
	    }
	  }return b;
	}function newline_toUnix(a) {
	  a = a.replace(/\r\n/mg, "\n");return a;
	}function newline_toDos(a) {
	  a = a.replace(/\r\n/mg, "\n");a = a.replace(/\n/mg, "\r\n");return a;
	}KJUR.lang.String.isInteger = function (a) {
	  if (a.match(/^[0-9]+$/)) {
	    return true;
	  } else {
	    if (a.match(/^-[0-9]+$/)) {
	      return true;
	    } else {
	      return false;
	    }
	  }
	};KJUR.lang.String.isHex = function (a) {
	  if (a.length % 2 == 0 && (a.match(/^[0-9a-f]+$/) || a.match(/^[0-9A-F]+$/))) {
	    return true;
	  } else {
	    return false;
	  }
	};KJUR.lang.String.isBase64 = function (a) {
	  a = a.replace(/\s+/g, "");if (a.match(/^[0-9A-Za-z+\/]+={0,3}$/) && a.length % 4 == 0) {
	    return true;
	  } else {
	    return false;
	  }
	};KJUR.lang.String.isBase64URL = function (a) {
	  if (a.match(/[+/=]/)) {
	    return false;
	  }a = b64utob64(a);return KJUR.lang.String.isBase64(a);
	};KJUR.lang.String.isIntegerArray = function (a) {
	  a = a.replace(/\s+/g, "");if (a.match(/^\[[0-9,]+\]$/)) {
	    return true;
	  } else {
	    return false;
	  }
	};function hextoposhex(a) {
	  if (a.length % 2 == 1) {
	    return "0" + a;
	  }if (a.substr(0, 1) > "7") {
	    return "00" + a;
	  }return a;
	}function intarystrtohex(b) {
	  b = b.replace(/^\s*\[\s*/, "");b = b.replace(/\s*\]\s*$/, "");b = b.replace(/\s*/g, "");try {
	    var c = b.split(/,/).map(function (g, e, h) {
	      var f = parseInt(g);if (f < 0 || 255 < f) {
	        throw "integer not in range 0-255";
	      }var d = ("00" + f.toString(16)).slice(-2);return d;
	    }).join("");return c;
	  } catch (a) {
	    throw "malformed integer array string: " + a;
	  }
	}var strdiffidx = function strdiffidx(c, a) {
	  var d = c.length;if (c.length > a.length) {
	    d = a.length;
	  }for (var b = 0; b < d; b++) {
	    if (c.charCodeAt(b) != a.charCodeAt(b)) {
	      return b;
	    }
	  }if (c.length != a.length) {
	    return d;
	  }return -1;
	};
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
	  KJUR.crypto = {};
	}KJUR.crypto.Util = new function () {
	  this.DIGESTINFOHEAD = { sha1: "3021300906052b0e03021a05000414", sha224: "302d300d06096086480165030402040500041c", sha256: "3031300d060960864801650304020105000420", sha384: "3041300d060960864801650304020205000430", sha512: "3051300d060960864801650304020305000440", md2: "3020300c06082a864886f70d020205000410", md5: "3020300c06082a864886f70d020505000410", ripemd160: "3021300906052b2403020105000414" };this.DEFAULTPROVIDER = { md5: "cryptojs", sha1: "cryptojs", sha224: "cryptojs", sha256: "cryptojs", sha384: "cryptojs", sha512: "cryptojs", ripemd160: "cryptojs", hmacmd5: "cryptojs", hmacsha1: "cryptojs", hmacsha224: "cryptojs", hmacsha256: "cryptojs", hmacsha384: "cryptojs", hmacsha512: "cryptojs", hmacripemd160: "cryptojs", MD5withRSA: "cryptojs/jsrsa", SHA1withRSA: "cryptojs/jsrsa", SHA224withRSA: "cryptojs/jsrsa", SHA256withRSA: "cryptojs/jsrsa", SHA384withRSA: "cryptojs/jsrsa", SHA512withRSA: "cryptojs/jsrsa", RIPEMD160withRSA: "cryptojs/jsrsa", MD5withECDSA: "cryptojs/jsrsa", SHA1withECDSA: "cryptojs/jsrsa", SHA224withECDSA: "cryptojs/jsrsa", SHA256withECDSA: "cryptojs/jsrsa", SHA384withECDSA: "cryptojs/jsrsa", SHA512withECDSA: "cryptojs/jsrsa", RIPEMD160withECDSA: "cryptojs/jsrsa", SHA1withDSA: "cryptojs/jsrsa", SHA224withDSA: "cryptojs/jsrsa", SHA256withDSA: "cryptojs/jsrsa", MD5withRSAandMGF1: "cryptojs/jsrsa", SHA1withRSAandMGF1: "cryptojs/jsrsa", SHA224withRSAandMGF1: "cryptojs/jsrsa", SHA256withRSAandMGF1: "cryptojs/jsrsa", SHA384withRSAandMGF1: "cryptojs/jsrsa", SHA512withRSAandMGF1: "cryptojs/jsrsa", RIPEMD160withRSAandMGF1: "cryptojs/jsrsa" };this.CRYPTOJSMESSAGEDIGESTNAME = { md5: CryptoJS.algo.MD5, sha1: CryptoJS.algo.SHA1, sha224: CryptoJS.algo.SHA224, sha256: CryptoJS.algo.SHA256, sha384: CryptoJS.algo.SHA384, sha512: CryptoJS.algo.SHA512, ripemd160: CryptoJS.algo.RIPEMD160 };this.getDigestInfoHex = function (a, b) {
	    if (typeof this.DIGESTINFOHEAD[b] == "undefined") {
	      throw "alg not supported in Util.DIGESTINFOHEAD: " + b;
	    }return this.DIGESTINFOHEAD[b] + a;
	  };this.getPaddedDigestInfoHex = function (h, a, j) {
	    var c = this.getDigestInfoHex(h, a);var d = j / 4;if (c.length + 22 > d) {
	      throw "key is too short for SigAlg: keylen=" + j + "," + a;
	    }var b = "0001";var k = "00" + c;var g = "";var l = d - b.length - k.length;for (var f = 0; f < l; f += 2) {
	      g += "ff";
	    }var e = b + g + k;return e;
	  };this.hashString = function (a, c) {
	    var b = new KJUR.crypto.MessageDigest({ alg: c });return b.digestString(a);
	  };this.hashHex = function (b, c) {
	    var a = new KJUR.crypto.MessageDigest({ alg: c });return a.digestHex(b);
	  };this.sha1 = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha1", prov: "cryptojs" });return b.digestString(a);
	  };this.sha256 = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha256", prov: "cryptojs" });return b.digestString(a);
	  };this.sha256Hex = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha256", prov: "cryptojs" });return b.digestHex(a);
	  };this.sha512 = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha512", prov: "cryptojs" });return b.digestString(a);
	  };this.sha512Hex = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha512", prov: "cryptojs" });return b.digestHex(a);
	  };
	}();KJUR.crypto.Util.md5 = function (a) {
	  var b = new KJUR.crypto.MessageDigest({ alg: "md5", prov: "cryptojs" });return b.digestString(a);
	};KJUR.crypto.Util.ripemd160 = function (a) {
	  var b = new KJUR.crypto.MessageDigest({ alg: "ripemd160", prov: "cryptojs" });return b.digestString(a);
	};KJUR.crypto.Util.SECURERANDOMGEN = new SecureRandom();KJUR.crypto.Util.getRandomHexOfNbytes = function (b) {
	  var a = new Array(b);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a);return BAtohex(a);
	};KJUR.crypto.Util.getRandomBigIntegerOfNbytes = function (a) {
	  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a), 16);
	};KJUR.crypto.Util.getRandomHexOfNbits = function (d) {
	  var c = d % 8;var a = (d - c) / 8;var b = new Array(a + 1);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b);b[0] = (255 << c & 255 ^ 255) & b[0];return BAtohex(b);
	};KJUR.crypto.Util.getRandomBigIntegerOfNbits = function (a) {
	  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a), 16);
	};KJUR.crypto.Util.getRandomBigIntegerZeroToMax = function (b) {
	  var a = b.bitLength();while (1) {
	    var c = KJUR.crypto.Util.getRandomBigIntegerOfNbits(a);if (b.compareTo(c) != -1) {
	      return c;
	    }
	  }
	};KJUR.crypto.Util.getRandomBigIntegerMinToMax = function (e, b) {
	  var c = e.compareTo(b);if (c == 1) {
	    throw "biMin is greater than biMax";
	  }if (c == 0) {
	    return e;
	  }var a = b.subtract(e);var d = KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a);return d.add(e);
	};KJUR.crypto.MessageDigest = function (c) {
	  var b = null;var a = null;var d = null;this.setAlgAndProvider = function (g, f) {
	    g = KJUR.crypto.MessageDigest.getCanonicalAlgName(g);if (g !== null && f === undefined) {
	      f = KJUR.crypto.Util.DEFAULTPROVIDER[g];
	    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && f == "cryptojs") {
	      try {
	        this.md = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create();
	      } catch (e) {
	        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
	      }this.updateString = function (h) {
	        this.md.update(h);
	      };this.updateHex = function (h) {
	        var i = CryptoJS.enc.Hex.parse(h);this.md.update(i);
	      };this.digest = function () {
	        var h = this.md.finalize();return h.toString(CryptoJS.enc.Hex);
	      };this.digestString = function (h) {
	        this.updateString(h);return this.digest();
	      };this.digestHex = function (h) {
	        this.updateHex(h);return this.digest();
	      };
	    }if (":sha256:".indexOf(g) != -1 && f == "sjcl") {
	      try {
	        this.md = new sjcl.hash.sha256();
	      } catch (e) {
	        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
	      }this.updateString = function (h) {
	        this.md.update(h);
	      };this.updateHex = function (i) {
	        var h = sjcl.codec.hex.toBits(i);this.md.update(h);
	      };this.digest = function () {
	        var h = this.md.finalize();return sjcl.codec.hex.fromBits(h);
	      };this.digestString = function (h) {
	        this.updateString(h);return this.digest();
	      };this.digestHex = function (h) {
	        this.updateHex(h);return this.digest();
	      };
	    }
	  };this.updateString = function (e) {
	    throw "updateString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };this.updateHex = function (e) {
	    throw "updateHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };this.digest = function () {
	    throw "digest() not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };this.digestString = function (e) {
	    throw "digestString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };this.digestHex = function (e) {
	    throw "digestHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };if (c !== undefined) {
	    if (c.alg !== undefined) {
	      this.algName = c.alg;if (c.prov === undefined) {
	        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
	      }this.setAlgAndProvider(this.algName, this.provName);
	    }
	  }
	};KJUR.crypto.MessageDigest.getCanonicalAlgName = function (a) {
	  if (typeof a === "string") {
	    a = a.toLowerCase();a = a.replace(/-/, "");
	  }return a;
	};KJUR.crypto.MessageDigest.getHashLength = function (c) {
	  var b = KJUR.crypto.MessageDigest;var a = b.getCanonicalAlgName(c);if (b.HASHLENGTH[a] === undefined) {
	    throw "not supported algorithm: " + c;
	  }return b.HASHLENGTH[a];
	};KJUR.crypto.MessageDigest.HASHLENGTH = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, ripemd160: 20 };KJUR.crypto.Mac = function (d) {
	  var f = null;var c = null;var a = null;var e = null;var b = null;this.setAlgAndProvider = function (k, i) {
	    k = k.toLowerCase();if (k == null) {
	      k = "hmacsha1";
	    }k = k.toLowerCase();if (k.substr(0, 4) != "hmac") {
	      throw "setAlgAndProvider unsupported HMAC alg: " + k;
	    }if (i === undefined) {
	      i = KJUR.crypto.Util.DEFAULTPROVIDER[k];
	    }this.algProv = k + "/" + i;var g = k.substr(4);if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && i == "cryptojs") {
	      try {
	        var j = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];this.mac = CryptoJS.algo.HMAC.create(j, this.pass);
	      } catch (h) {
	        throw "setAlgAndProvider hash alg set fail hashAlg=" + g + "/" + h;
	      }this.updateString = function (l) {
	        this.mac.update(l);
	      };this.updateHex = function (l) {
	        var m = CryptoJS.enc.Hex.parse(l);this.mac.update(m);
	      };this.doFinal = function () {
	        var l = this.mac.finalize();return l.toString(CryptoJS.enc.Hex);
	      };this.doFinalString = function (l) {
	        this.updateString(l);return this.doFinal();
	      };this.doFinalHex = function (l) {
	        this.updateHex(l);return this.doFinal();
	      };
	    }
	  };this.updateString = function (g) {
	    throw "updateString(str) not supported for this alg/prov: " + this.algProv;
	  };this.updateHex = function (g) {
	    throw "updateHex(hex) not supported for this alg/prov: " + this.algProv;
	  };this.doFinal = function () {
	    throw "digest() not supported for this alg/prov: " + this.algProv;
	  };this.doFinalString = function (g) {
	    throw "digestString(str) not supported for this alg/prov: " + this.algProv;
	  };this.doFinalHex = function (g) {
	    throw "digestHex(hex) not supported for this alg/prov: " + this.algProv;
	  };this.setPassword = function (h) {
	    if (typeof h == "string") {
	      var g = h;if (h.length % 2 == 1 || !h.match(/^[0-9A-Fa-f]+$/)) {
	        g = rstrtohex(h);
	      }this.pass = CryptoJS.enc.Hex.parse(g);return;
	    }if ((typeof h === "undefined" ? "undefined" : _typeof(h)) != "object") {
	      throw "KJUR.crypto.Mac unsupported password type: " + h;
	    }var g = null;if (h.hex !== undefined) {
	      if (h.hex.length % 2 != 0 || !h.hex.match(/^[0-9A-Fa-f]+$/)) {
	        throw "Mac: wrong hex password: " + h.hex;
	      }g = h.hex;
	    }if (h.utf8 !== undefined) {
	      g = utf8tohex(h.utf8);
	    }if (h.rstr !== undefined) {
	      g = rstrtohex(h.rstr);
	    }if (h.b64 !== undefined) {
	      g = b64tohex(h.b64);
	    }if (h.b64u !== undefined) {
	      g = b64utohex(h.b64u);
	    }if (g == null) {
	      throw "KJUR.crypto.Mac unsupported password type: " + h;
	    }this.pass = CryptoJS.enc.Hex.parse(g);
	  };if (d !== undefined) {
	    if (d.pass !== undefined) {
	      this.setPassword(d.pass);
	    }if (d.alg !== undefined) {
	      this.algName = d.alg;if (d.prov === undefined) {
	        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
	      }this.setAlgAndProvider(this.algName, this.provName);
	    }
	  }
	};KJUR.crypto.Signature = function (o) {
	  var q = null;var n = null;var r = null;var c = null;var l = null;var d = null;var k = null;var h = null;var p = null;var e = null;var b = -1;var g = null;var j = null;var a = null;var i = null;var f = null;this._setAlgNames = function () {
	    var s = this.algName.match(/^(.+)with(.+)$/);if (s) {
	      this.mdAlgName = s[1].toLowerCase();this.pubkeyAlgName = s[2].toLowerCase();
	    }
	  };this._zeroPaddingOfSignature = function (x, w) {
	    var v = "";var t = w / 4 - x.length;for (var u = 0; u < t; u++) {
	      v = v + "0";
	    }return v + x;
	  };this.setAlgAndProvider = function (u, t) {
	    this._setAlgNames();if (t != "cryptojs/jsrsa") {
	      throw "provider not supported: " + t;
	    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName) != -1) {
	      try {
	        this.md = new KJUR.crypto.MessageDigest({ alg: this.mdAlgName });
	      } catch (s) {
	        throw "setAlgAndProvider hash alg set fail alg=" + this.mdAlgName + "/" + s;
	      }this.init = function (w, x) {
	        var y = null;try {
	          if (x === undefined) {
	            y = KEYUTIL.getKey(w);
	          } else {
	            y = KEYUTIL.getKey(w, x);
	          }
	        } catch (v) {
	          throw "init failed:" + v;
	        }if (y.isPrivate === true) {
	          this.prvKey = y;this.state = "SIGN";
	        } else {
	          if (y.isPublic === true) {
	            this.pubKey = y;this.state = "VERIFY";
	          } else {
	            throw "init failed.:" + y;
	          }
	        }
	      };this.updateString = function (v) {
	        this.md.updateString(v);
	      };this.updateHex = function (v) {
	        this.md.updateHex(v);
	      };this.sign = function () {
	        this.sHashHex = this.md.digest();if (typeof this.ecprvhex != "undefined" && typeof this.eccurvename != "undefined") {
	          var v = new KJUR.crypto.ECDSA({ curve: this.eccurvename });this.hSign = v.signHex(this.sHashHex, this.ecprvhex);
	        } else {
	          if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
	            this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);
	          } else {
	            if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
	              this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);
	            } else {
	              if (this.prvKey instanceof KJUR.crypto.ECDSA) {
	                this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
	              } else {
	                if (this.prvKey instanceof KJUR.crypto.DSA) {
	                  this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
	                } else {
	                  throw "Signature: unsupported private key alg: " + this.pubkeyAlgName;
	                }
	              }
	            }
	          }
	        }return this.hSign;
	      };this.signString = function (v) {
	        this.updateString(v);return this.sign();
	      };this.signHex = function (v) {
	        this.updateHex(v);return this.sign();
	      };this.verify = function (v) {
	        this.sHashHex = this.md.digest();if (typeof this.ecpubhex != "undefined" && typeof this.eccurvename != "undefined") {
	          var w = new KJUR.crypto.ECDSA({ curve: this.eccurvename });return w.verifyHex(this.sHashHex, v, this.ecpubhex);
	        } else {
	          if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
	            return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, v, this.mdAlgName, this.pssSaltLen);
	          } else {
	            if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
	              return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
	            } else {
	              if (KJUR.crypto.ECDSA !== undefined && this.pubKey instanceof KJUR.crypto.ECDSA) {
	                return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
	              } else {
	                if (KJUR.crypto.DSA !== undefined && this.pubKey instanceof KJUR.crypto.DSA) {
	                  return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
	                } else {
	                  throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
	                }
	              }
	            }
	          }
	        }
	      };
	    }
	  };this.init = function (s, t) {
	    throw "init(key, pass) not supported for this alg:prov=" + this.algProvName;
	  };this.updateString = function (s) {
	    throw "updateString(str) not supported for this alg:prov=" + this.algProvName;
	  };this.updateHex = function (s) {
	    throw "updateHex(hex) not supported for this alg:prov=" + this.algProvName;
	  };this.sign = function () {
	    throw "sign() not supported for this alg:prov=" + this.algProvName;
	  };this.signString = function (s) {
	    throw "digestString(str) not supported for this alg:prov=" + this.algProvName;
	  };this.signHex = function (s) {
	    throw "digestHex(hex) not supported for this alg:prov=" + this.algProvName;
	  };this.verify = function (s) {
	    throw "verify(hSigVal) not supported for this alg:prov=" + this.algProvName;
	  };this.initParams = o;if (o !== undefined) {
	    if (o.alg !== undefined) {
	      this.algName = o.alg;if (o.prov === undefined) {
	        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
	      } else {
	        this.provName = o.prov;
	      }this.algProvName = this.algName + ":" + this.provName;this.setAlgAndProvider(this.algName, this.provName);this._setAlgNames();
	    }if (o.psssaltlen !== undefined) {
	      this.pssSaltLen = o.psssaltlen;
	    }if (o.prvkeypem !== undefined) {
	      if (o.prvkeypas !== undefined) {
	        throw "both prvkeypem and prvkeypas parameters not supported";
	      } else {
	        try {
	          var q = KEYUTIL.getKey(o.prvkeypem);this.init(q);
	        } catch (m) {
	          throw "fatal error to load pem private key: " + m;
	        }
	      }
	    }
	  }
	};KJUR.crypto.Cipher = function (a) {};KJUR.crypto.Cipher.encrypt = function (e, f, d) {
	  if (f instanceof RSAKey && f.isPublic) {
	    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
	      return f.encrypt(e);
	    }if (c === "RSAOAEP") {
	      return f.encryptOAEP(e, "sha1");
	    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
	      return f.encryptOAEP(e, "sha" + b[1]);
	    }throw "Cipher.encrypt: unsupported algorithm for RSAKey: " + d;
	  } else {
	    throw "Cipher.encrypt: unsupported key or algorithm";
	  }
	};KJUR.crypto.Cipher.decrypt = function (e, f, d) {
	  if (f instanceof RSAKey && f.isPrivate) {
	    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
	      return f.decrypt(e);
	    }if (c === "RSAOAEP") {
	      return f.decryptOAEP(e, "sha1");
	    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
	      return f.decryptOAEP(e, "sha" + b[1]);
	    }throw "Cipher.decrypt: unsupported algorithm for RSAKey: " + d;
	  } else {
	    throw "Cipher.decrypt: unsupported key or algorithm";
	  }
	};KJUR.crypto.Cipher.getAlgByKeyAndName = function (b, a) {
	  if (b instanceof RSAKey) {
	    if (":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(a) != -1) {
	      return a;
	    }if (a === null || a === undefined) {
	      return "RSA";
	    }throw "getAlgByKeyAndName: not supported algorithm name for RSAKey: " + a;
	  }throw "getAlgByKeyAndName: not supported algorithm name: " + a;
	};KJUR.crypto.OID = new function () {
	  this.oidhex2name = { "2a864886f70d010101": "rsaEncryption", "2a8648ce3d0201": "ecPublicKey", "2a8648ce380401": "dsa", "2a8648ce3d030107": "secp256r1", "2b8104001f": "secp192k1", "2b81040021": "secp224r1", "2b8104000a": "secp256k1", "2b81040023": "secp521r1", "2b81040022": "secp384r1", "2a8648ce380403": "SHA1withDSA", "608648016503040301": "SHA224withDSA", "608648016503040302": "SHA256withDSA" };
	}();
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
	  KJUR.crypto = {};
	}KJUR.crypto.ECDSA = function (h) {
	  var e = "secp256r1";var g = null;var b = null;var f = null;var a = new SecureRandom();var d = null;this.type = "EC";this.isPrivate = false;this.isPublic = false;function c(s, o, r, n) {
	    var j = Math.max(o.bitLength(), n.bitLength());var t = s.add2D(r);var q = s.curve.getInfinity();for (var p = j - 1; p >= 0; --p) {
	      q = q.twice2D();q.z = BigInteger.ONE;if (o.testBit(p)) {
	        if (n.testBit(p)) {
	          q = q.add2D(t);
	        } else {
	          q = q.add2D(s);
	        }
	      } else {
	        if (n.testBit(p)) {
	          q = q.add2D(r);
	        }
	      }
	    }return q;
	  }this.getBigRandom = function (i) {
	    return new BigInteger(i.bitLength(), a).mod(i.subtract(BigInteger.ONE)).add(BigInteger.ONE);
	  };this.setNamedCurve = function (i) {
	    this.ecparams = KJUR.crypto.ECParameterDB.getByName(i);this.prvKeyHex = null;this.pubKeyHex = null;this.curveName = i;
	  };this.setPrivateKeyHex = function (i) {
	    this.isPrivate = true;this.prvKeyHex = i;
	  };this.setPublicKeyHex = function (i) {
	    this.isPublic = true;this.pubKeyHex = i;
	  };this.getPublicKeyXYHex = function () {
	    var k = this.pubKeyHex;if (k.substr(0, 2) !== "04") {
	      throw "this method supports uncompressed format(04) only";
	    }var j = this.ecparams.keylen / 4;if (k.length !== 2 + j * 2) {
	      throw "malformed public key hex length";
	    }var i = {};i.x = k.substr(2, j);i.y = k.substr(2 + j);return i;
	  };this.getShortNISTPCurveName = function () {
	    var i = this.curveName;if (i === "secp256r1" || i === "NIST P-256" || i === "P-256" || i === "prime256v1") {
	      return "P-256";
	    }if (i === "secp384r1" || i === "NIST P-384" || i === "P-384") {
	      return "P-384";
	    }return null;
	  };this.generateKeyPairHex = function () {
	    var k = this.ecparams.n;var n = this.getBigRandom(k);var l = this.ecparams.G.multiply(n);var q = l.getX().toBigInteger();var o = l.getY().toBigInteger();var i = this.ecparams.keylen / 4;var m = ("0000000000" + n.toString(16)).slice(-i);var r = ("0000000000" + q.toString(16)).slice(-i);var p = ("0000000000" + o.toString(16)).slice(-i);var j = "04" + r + p;this.setPrivateKeyHex(m);this.setPublicKeyHex(j);return { ecprvhex: m, ecpubhex: j };
	  };this.signWithMessageHash = function (i) {
	    return this.signHex(i, this.prvKeyHex);
	  };this.signHex = function (o, j) {
	    var t = new BigInteger(j, 16);var l = this.ecparams.n;var q = new BigInteger(o, 16);do {
	      var m = this.getBigRandom(l);var u = this.ecparams.G;var p = u.multiply(m);var i = p.getX().toBigInteger().mod(l);
	    } while (i.compareTo(BigInteger.ZERO) <= 0);var v = m.modInverse(l).multiply(q.add(t.multiply(i))).mod(l);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(i, v);
	  };this.sign = function (m, u) {
	    var q = u;var j = this.ecparams.n;var p = BigInteger.fromByteArrayUnsigned(m);do {
	      var l = this.getBigRandom(j);var t = this.ecparams.G;var o = t.multiply(l);var i = o.getX().toBigInteger().mod(j);
	    } while (i.compareTo(BigInteger.ZERO) <= 0);var v = l.modInverse(j).multiply(p.add(q.multiply(i))).mod(j);return this.serializeSig(i, v);
	  };this.verifyWithMessageHash = function (j, i) {
	    return this.verifyHex(j, i, this.pubKeyHex);
	  };this.verifyHex = function (m, i, p) {
	    var l, j;var o = KJUR.crypto.ECDSA.parseSigHex(i);l = o.r;j = o.s;var k;k = ECPointFp.decodeFromHex(this.ecparams.curve, p);var n = new BigInteger(m, 16);return this.verifyRaw(n, l, j, k);
	  };this.verify = function (o, p, j) {
	    var l, i;if (Bitcoin.Util.isArray(p)) {
	      var n = this.parseSig(p);l = n.r;i = n.s;
	    } else {
	      if ("object" === (typeof p === "undefined" ? "undefined" : _typeof(p)) && p.r && p.s) {
	        l = p.r;i = p.s;
	      } else {
	        throw "Invalid value for signature";
	      }
	    }var k;if (j instanceof ECPointFp) {
	      k = j;
	    } else {
	      if (Bitcoin.Util.isArray(j)) {
	        k = ECPointFp.decodeFrom(this.ecparams.curve, j);
	      } else {
	        throw "Invalid format for pubkey value, must be byte array or ECPointFp";
	      }
	    }var m = BigInteger.fromByteArrayUnsigned(o);return this.verifyRaw(m, l, i, k);
	  };this.verifyRaw = function (o, i, w, m) {
	    var l = this.ecparams.n;var u = this.ecparams.G;if (i.compareTo(BigInteger.ONE) < 0 || i.compareTo(l) >= 0) {
	      return false;
	    }if (w.compareTo(BigInteger.ONE) < 0 || w.compareTo(l) >= 0) {
	      return false;
	    }var p = w.modInverse(l);var k = o.multiply(p).mod(l);var j = i.multiply(p).mod(l);var q = u.multiply(k).add(m.multiply(j));var t = q.getX().toBigInteger().mod(l);return t.equals(i);
	  };this.serializeSig = function (k, j) {
	    var l = k.toByteArraySigned();var i = j.toByteArraySigned();var m = [];m.push(2);m.push(l.length);m = m.concat(l);m.push(2);m.push(i.length);m = m.concat(i);m.unshift(m.length);m.unshift(48);return m;
	  };this.parseSig = function (n) {
	    var m;if (n[0] != 48) {
	      throw new Error("Signature not a valid DERSequence");
	    }m = 2;if (n[m] != 2) {
	      throw new Error("First element in signature must be a DERInteger");
	    }var l = n.slice(m + 2, m + 2 + n[m + 1]);m += 2 + n[m + 1];if (n[m] != 2) {
	      throw new Error("Second element in signature must be a DERInteger");
	    }var i = n.slice(m + 2, m + 2 + n[m + 1]);m += 2 + n[m + 1];var k = BigInteger.fromByteArrayUnsigned(l);var j = BigInteger.fromByteArrayUnsigned(i);return { r: k, s: j };
	  };this.parseSigCompact = function (m) {
	    if (m.length !== 65) {
	      throw "Signature has the wrong length";
	    }var j = m[0] - 27;if (j < 0 || j > 7) {
	      throw "Invalid signature type";
	    }var o = this.ecparams.n;var l = BigInteger.fromByteArrayUnsigned(m.slice(1, 33)).mod(o);var k = BigInteger.fromByteArrayUnsigned(m.slice(33, 65)).mod(o);return { r: l, s: k, i: j };
	  };this.readPKCS5PrvKeyHex = function (l) {
	    var n = ASN1HEX;var m = KJUR.crypto.ECDSA.getName;var p = n.getVbyList;if (n.isASN1HEX(l) === false) {
	      throw "not ASN.1 hex string";
	    }var i, k, o;try {
	      i = p(l, 0, [2, 0], "06");k = p(l, 0, [1], "04");try {
	        o = p(l, 0, [3, 0], "03").substr(2);
	      } catch (j) {}
	    } catch (j) {
	      throw "malformed PKCS#1/5 plain ECC private key";
	    }this.curveName = m(i);if (this.curveName === undefined) {
	      throw "unsupported curve name";
	    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(o);this.setPrivateKeyHex(k);this.isPublic = false;
	  };this.readPKCS8PrvKeyHex = function (l) {
	    var q = ASN1HEX;var i = KJUR.crypto.ECDSA.getName;var n = q.getVbyList;if (q.isASN1HEX(l) === false) {
	      throw "not ASN.1 hex string";
	    }var j, p, m, k;try {
	      j = n(l, 0, [1, 0], "06");p = n(l, 0, [1, 1], "06");m = n(l, 0, [2, 0, 1], "04");try {
	        k = n(l, 0, [2, 0, 2, 0], "03").substr(2);
	      } catch (o) {}
	    } catch (o) {
	      throw "malformed PKCS#8 plain ECC private key";
	    }this.curveName = i(p);if (this.curveName === undefined) {
	      throw "unsupported curve name";
	    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(k);this.setPrivateKeyHex(m);this.isPublic = false;
	  };this.readPKCS8PubKeyHex = function (l) {
	    var n = ASN1HEX;var m = KJUR.crypto.ECDSA.getName;var p = n.getVbyList;if (n.isASN1HEX(l) === false) {
	      throw "not ASN.1 hex string";
	    }var k, i, o;try {
	      k = p(l, 0, [0, 0], "06");i = p(l, 0, [0, 1], "06");o = p(l, 0, [1], "03").substr(2);
	    } catch (j) {
	      throw "malformed PKCS#8 ECC public key";
	    }this.curveName = m(i);if (this.curveName === null) {
	      throw "unsupported curve name";
	    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(o);
	  };this.readCertPubKeyHex = function (k, p) {
	    if (p !== 5) {
	      p = 6;
	    }var m = ASN1HEX;var l = KJUR.crypto.ECDSA.getName;var o = m.getVbyList;if (m.isASN1HEX(k) === false) {
	      throw "not ASN.1 hex string";
	    }var i, n;try {
	      i = o(k, 0, [0, p, 0, 1], "06");n = o(k, 0, [0, p, 1], "03").substr(2);
	    } catch (j) {
	      throw "malformed X.509 certificate ECC public key";
	    }this.curveName = l(i);if (this.curveName === null) {
	      throw "unsupported curve name";
	    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(n);
	  };if (h !== undefined) {
	    if (h.curve !== undefined) {
	      this.curveName = h.curve;
	    }
	  }if (this.curveName === undefined) {
	    this.curveName = e;
	  }this.setNamedCurve(this.curveName);if (h !== undefined) {
	    if (h.prv !== undefined) {
	      this.setPrivateKeyHex(h.prv);
	    }if (h.pub !== undefined) {
	      this.setPublicKeyHex(h.pub);
	    }
	  }
	};KJUR.crypto.ECDSA.parseSigHex = function (a) {
	  var b = KJUR.crypto.ECDSA.parseSigHexInHexRS(a);var d = new BigInteger(b.r, 16);var c = new BigInteger(b.s, 16);return { r: d, s: c };
	};KJUR.crypto.ECDSA.parseSigHexInHexRS = function (f) {
	  var j = ASN1HEX;var i = j.getChildIdx;var g = j.getV;if (f.substr(0, 2) != "30") {
	    throw "signature is not a ASN.1 sequence";
	  }var h = i(f, 0);if (h.length != 2) {
	    throw "number of signature ASN.1 sequence elements seem wrong";
	  }var e = h[0];var d = h[1];if (f.substr(e, 2) != "02") {
	    throw "1st item of sequene of signature is not ASN.1 integer";
	  }if (f.substr(d, 2) != "02") {
	    throw "2nd item of sequene of signature is not ASN.1 integer";
	  }var c = g(f, e);var b = g(f, d);return { r: c, s: b };
	};KJUR.crypto.ECDSA.asn1SigToConcatSig = function (c) {
	  var d = KJUR.crypto.ECDSA.parseSigHexInHexRS(c);var b = d.r;var a = d.s;if (b.substr(0, 2) == "00" && b.length % 32 == 2) {
	    b = b.substr(2);
	  }if (a.substr(0, 2) == "00" && a.length % 32 == 2) {
	    a = a.substr(2);
	  }if (b.length % 32 == 30) {
	    b = "00" + b;
	  }if (a.length % 32 == 30) {
	    a = "00" + a;
	  }if (b.length % 32 != 0) {
	    throw "unknown ECDSA sig r length error";
	  }if (a.length % 32 != 0) {
	    throw "unknown ECDSA sig s length error";
	  }return b + a;
	};KJUR.crypto.ECDSA.concatSigToASN1Sig = function (a) {
	  if (a.length / 2 * 8 % (16 * 8) != 0) {
	    throw "unknown ECDSA concatinated r-s sig  length error";
	  }var c = a.substr(0, a.length / 2);var b = a.substr(a.length / 2);return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c, b);
	};KJUR.crypto.ECDSA.hexRSSigToASN1Sig = function (b, a) {
	  var d = new BigInteger(b, 16);var c = new BigInteger(a, 16);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d, c);
	};KJUR.crypto.ECDSA.biRSSigToASN1Sig = function (f, d) {
	  var c = KJUR.asn1;var b = new c.DERInteger({ bigint: f });var a = new c.DERInteger({ bigint: d });var e = new c.DERSequence({ array: [b, a] });return e.getEncodedHex();
	};KJUR.crypto.ECDSA.getName = function (a) {
	  if (a === "2a8648ce3d030107") {
	    return "secp256r1";
	  }if (a === "2b8104000a") {
	    return "secp256k1";
	  }if (a === "2b81040022") {
	    return "secp384r1";
	  }if ("|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(a) !== -1) {
	    return "secp256r1";
	  }if ("|secp256k1|".indexOf(a) !== -1) {
	    return "secp256k1";
	  }if ("|secp384r1|NIST P-384|P-384|".indexOf(a) !== -1) {
	    return "secp384r1";
	  }return null;
	};
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
	  KJUR.crypto = {};
	}KJUR.crypto.ECParameterDB = new function () {
	  var b = {};var c = {};function a(d) {
	    return new BigInteger(d, 16);
	  }this.getByName = function (e) {
	    var d = e;if (typeof c[d] != "undefined") {
	      d = c[e];
	    }if (typeof b[d] != "undefined") {
	      return b[d];
	    }throw "unregistered EC curve name: " + d;
	  };this.regist = function (A, l, o, g, m, e, j, f, k, u, d, x) {
	    b[A] = {};var s = a(o);var z = a(g);var y = a(m);var t = a(e);var w = a(j);var r = new ECCurveFp(s, z, y);var q = r.decodePointHex("04" + f + k);b[A]["name"] = A;b[A]["keylen"] = l;b[A]["curve"] = r;b[A]["G"] = q;b[A]["n"] = t;b[A]["h"] = w;b[A]["oid"] = d;b[A]["info"] = x;for (var v = 0; v < u.length; v++) {
	      c[u[v]] = A;
	    }
	  };
	}();KJUR.crypto.ECParameterDB.regist("secp128r1", 128, "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC", "E87579C11079F43DD824993C2CEE5ED3", "FFFFFFFE0000000075A30D1B9038A115", "1", "161FF7528B899B2D0C28607CA52C5B86", "CF5AC8395BAFEB13C02DA292DDED7A83", [], "", "secp128r1 : SECG curve over a 128 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160k1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73", "0", "7", "0100000000000000000001B8FA16DFAB9ACA16B6B3", "1", "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB", "938CF935318FDCED6BC28286531733C3F03C4FEE", [], "", "secp160k1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160r1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC", "1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45", "0100000000000000000001F4C8F927AED3CA752257", "1", "4A96B5688EF573284664698968C38BB913CBFC82", "23A628553168947D59DCC912042351377AC5FB32", [], "", "secp160r1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp192k1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37", "0", "3", "FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D", "1", "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D", "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D", []);KJUR.crypto.ECParameterDB.regist("secp192r1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC", "64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1", "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831", "1", "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012", "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811", []);KJUR.crypto.ECParameterDB.regist("secp224r1", 224, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE", "B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D", "1", "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21", "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34", []);KJUR.crypto.ECParameterDB.regist("secp256k1", 256, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F", "0", "7", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", "1", "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", []);KJUR.crypto.ECParameterDB.regist("secp256r1", 256, "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC", "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", "1", "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", ["NIST P-256", "P-256", "prime256v1"]);KJUR.crypto.ECParameterDB.regist("secp384r1", 384, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC", "B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973", "1", "AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7", "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", ["NIST P-384", "P-384"]);KJUR.crypto.ECParameterDB.regist("secp521r1", 521, "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC", "051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409", "1", "C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66", "011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", ["NIST P-521", "P-521"]);
	var KEYUTIL = function () {
	  var d = function d(p, r, q) {
	    return k(CryptoJS.AES, p, r, q);
	  };var e = function e(p, r, q) {
	    return k(CryptoJS.TripleDES, p, r, q);
	  };var a = function a(p, r, q) {
	    return k(CryptoJS.DES, p, r, q);
	  };var k = function k(s, x, u, q) {
	    var r = CryptoJS.enc.Hex.parse(x);var w = CryptoJS.enc.Hex.parse(u);var p = CryptoJS.enc.Hex.parse(q);var t = {};t.key = w;t.iv = p;t.ciphertext = r;var v = s.decrypt(t, w, { iv: p });return CryptoJS.enc.Hex.stringify(v);
	  };var l = function l(p, r, q) {
	    return g(CryptoJS.AES, p, r, q);
	  };var o = function o(p, r, q) {
	    return g(CryptoJS.TripleDES, p, r, q);
	  };var f = function f(p, r, q) {
	    return g(CryptoJS.DES, p, r, q);
	  };var g = function g(t, y, v, q) {
	    var s = CryptoJS.enc.Hex.parse(y);var x = CryptoJS.enc.Hex.parse(v);var p = CryptoJS.enc.Hex.parse(q);var w = t.encrypt(s, x, { iv: p });var r = CryptoJS.enc.Hex.parse(w.toString());var u = CryptoJS.enc.Base64.stringify(r);return u;
	  };var i = { "AES-256-CBC": { proc: d, eproc: l, keylen: 32, ivlen: 16 }, "AES-192-CBC": { proc: d, eproc: l, keylen: 24, ivlen: 16 }, "AES-128-CBC": { proc: d, eproc: l, keylen: 16, ivlen: 16 }, "DES-EDE3-CBC": { proc: e, eproc: o, keylen: 24, ivlen: 8 }, "DES-CBC": { proc: a, eproc: f, keylen: 8, ivlen: 8 } };var c = function c(p) {
	    return i[p]["proc"];
	  };var m = function m(p) {
	    var r = CryptoJS.lib.WordArray.random(p);var q = CryptoJS.enc.Hex.stringify(r);return q;
	  };var n = function n(v) {
	    var w = {};var q = v.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)", "m"));if (q) {
	      w.cipher = q[1];w.ivsalt = q[2];
	    }var p = v.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));if (p) {
	      w.type = p[1];
	    }var u = -1;var x = 0;if (v.indexOf("\r\n\r\n") != -1) {
	      u = v.indexOf("\r\n\r\n");x = 2;
	    }if (v.indexOf("\n\n") != -1) {
	      u = v.indexOf("\n\n");x = 1;
	    }var t = v.indexOf("-----END");if (u != -1 && t != -1) {
	      var r = v.substring(u + x * 2, t - x);r = r.replace(/\s+/g, "");w.data = r;
	    }return w;
	  };var j = function j(q, y, p) {
	    var v = p.substring(0, 16);var t = CryptoJS.enc.Hex.parse(v);var r = CryptoJS.enc.Utf8.parse(y);var u = i[q]["keylen"] + i[q]["ivlen"];var x = "";var w = null;for (;;) {
	      var s = CryptoJS.algo.MD5.create();if (w != null) {
	        s.update(w);
	      }s.update(r);s.update(t);w = s.finalize();x = x + CryptoJS.enc.Hex.stringify(w);if (x.length >= u * 2) {
	        break;
	      }
	    }var z = {};z.keyhex = x.substr(0, i[q]["keylen"] * 2);z.ivhex = x.substr(i[q]["keylen"] * 2, i[q]["ivlen"] * 2);return z;
	  };var b = function b(p, v, r, w) {
	    var s = CryptoJS.enc.Base64.parse(p);var q = CryptoJS.enc.Hex.stringify(s);var u = i[v]["proc"];var t = u(q, r, w);return t;
	  };var h = function h(p, s, q, u) {
	    var r = i[s]["eproc"];var t = r(p, q, u);return t;
	  };return { version: "1.0.0", parsePKCS5PEM: function parsePKCS5PEM(p) {
	      return n(p);
	    }, getKeyAndUnusedIvByPasscodeAndIvsalt: function getKeyAndUnusedIvByPasscodeAndIvsalt(q, p, r) {
	      return j(q, p, r);
	    }, decryptKeyB64: function decryptKeyB64(p, r, q, s) {
	      return b(p, r, q, s);
	    }, getDecryptedKeyHex: function getDecryptedKeyHex(y, x) {
	      var q = n(y);var t = q.type;var r = q.cipher;var p = q.ivsalt;var s = q.data;var w = j(r, x, p);var v = w.keyhex;var u = b(s, r, v, p);return u;
	    }, getEncryptedPKCS5PEMFromPrvKeyHex: function getEncryptedPKCS5PEMFromPrvKeyHex(x, s, A, t, r) {
	      var p = "";if (typeof t == "undefined" || t == null) {
	        t = "AES-256-CBC";
	      }if (typeof i[t] == "undefined") {
	        throw "KEYUTIL unsupported algorithm: " + t;
	      }if (typeof r == "undefined" || r == null) {
	        var v = i[t]["ivlen"];var u = m(v);r = u.toUpperCase();
	      }var z = j(t, A, r);var y = z.keyhex;var w = h(s, t, y, r);var q = w.replace(/(.{64})/g, "$1\r\n");var p = "-----BEGIN " + x + " PRIVATE KEY-----\r\n";p += "Proc-Type: 4,ENCRYPTED\r\n";p += "DEK-Info: " + t + "," + r + "\r\n";p += "\r\n";p += q;p += "\r\n-----END " + x + " PRIVATE KEY-----\r\n";return p;
	    }, parseHexOfEncryptedPKCS8: function parseHexOfEncryptedPKCS8(y) {
	      var B = ASN1HEX;var z = B.getChildIdx;var w = B.getV;var t = {};var r = z(y, 0);if (r.length != 2) {
	        throw "malformed format: SEQUENCE(0).items != 2: " + r.length;
	      }t.ciphertext = w(y, r[1]);var A = z(y, r[0]);if (A.length != 2) {
	        throw "malformed format: SEQUENCE(0.0).items != 2: " + A.length;
	      }if (w(y, A[0]) != "2a864886f70d01050d") {
	        throw "this only supports pkcs5PBES2";
	      }var p = z(y, A[1]);if (A.length != 2) {
	        throw "malformed format: SEQUENCE(0.0.1).items != 2: " + p.length;
	      }var q = z(y, p[1]);if (q.length != 2) {
	        throw "malformed format: SEQUENCE(0.0.1.1).items != 2: " + q.length;
	      }if (w(y, q[0]) != "2a864886f70d0307") {
	        throw "this only supports TripleDES";
	      }t.encryptionSchemeAlg = "TripleDES";t.encryptionSchemeIV = w(y, q[1]);var s = z(y, p[0]);if (s.length != 2) {
	        throw "malformed format: SEQUENCE(0.0.1.0).items != 2: " + s.length;
	      }if (w(y, s[0]) != "2a864886f70d01050c") {
	        throw "this only supports pkcs5PBKDF2";
	      }var x = z(y, s[1]);if (x.length < 2) {
	        throw "malformed format: SEQUENCE(0.0.1.0.1).items < 2: " + x.length;
	      }t.pbkdf2Salt = w(y, x[0]);var u = w(y, x[1]);try {
	        t.pbkdf2Iter = parseInt(u, 16);
	      } catch (v) {
	        throw "malformed format pbkdf2Iter: " + u;
	      }return t;
	    }, getPBKDF2KeyHexFromParam: function getPBKDF2KeyHexFromParam(u, p) {
	      var t = CryptoJS.enc.Hex.parse(u.pbkdf2Salt);var q = u.pbkdf2Iter;var s = CryptoJS.PBKDF2(p, t, { keySize: 192 / 32, iterations: q });var r = CryptoJS.enc.Hex.stringify(s);return r;
	    }, _getPlainPKCS8HexFromEncryptedPKCS8PEM: function _getPlainPKCS8HexFromEncryptedPKCS8PEM(x, y) {
	      var r = pemtohex(x, "ENCRYPTED PRIVATE KEY");var p = this.parseHexOfEncryptedPKCS8(r);var u = KEYUTIL.getPBKDF2KeyHexFromParam(p, y);var v = {};v.ciphertext = CryptoJS.enc.Hex.parse(p.ciphertext);var t = CryptoJS.enc.Hex.parse(u);var s = CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);var w = CryptoJS.TripleDES.decrypt(v, t, { iv: s });var q = CryptoJS.enc.Hex.stringify(w);return q;
	    }, getKeyFromEncryptedPKCS8PEM: function getKeyFromEncryptedPKCS8PEM(s, q) {
	      var p = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(s, q);var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
	    }, parsePlainPrivatePKCS8Hex: function parsePlainPrivatePKCS8Hex(s) {
	      var v = ASN1HEX;var u = v.getChildIdx;var t = v.getV;var q = {};q.algparam = null;if (s.substr(0, 2) != "30") {
	        throw "malformed plain PKCS8 private key(code:001)";
	      }var r = u(s, 0);if (r.length != 3) {
	        throw "malformed plain PKCS8 private key(code:002)";
	      }if (s.substr(r[1], 2) != "30") {
	        throw "malformed PKCS8 private key(code:003)";
	      }var p = u(s, r[1]);if (p.length != 2) {
	        throw "malformed PKCS8 private key(code:004)";
	      }if (s.substr(p[0], 2) != "06") {
	        throw "malformed PKCS8 private key(code:005)";
	      }q.algoid = t(s, p[0]);if (s.substr(p[1], 2) == "06") {
	        q.algparam = t(s, p[1]);
	      }if (s.substr(r[2], 2) != "04") {
	        throw "malformed PKCS8 private key(code:006)";
	      }q.keyidx = v.getVidx(s, r[2]);return q;
	    }, getKeyFromPlainPrivatePKCS8PEM: function getKeyFromPlainPrivatePKCS8PEM(q) {
	      var p = pemtohex(q, "PRIVATE KEY");var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
	    }, getKeyFromPlainPrivatePKCS8Hex: function getKeyFromPlainPrivatePKCS8Hex(p) {
	      var q = this.parsePlainPrivatePKCS8Hex(p);var r;if (q.algoid == "2a864886f70d010101") {
	        r = new RSAKey();
	      } else {
	        if (q.algoid == "2a8648ce380401") {
	          r = new KJUR.crypto.DSA();
	        } else {
	          if (q.algoid == "2a8648ce3d0201") {
	            r = new KJUR.crypto.ECDSA();
	          } else {
	            throw "unsupported private key algorithm";
	          }
	        }
	      }r.readPKCS8PrvKeyHex(p);return r;
	    }, _getKeyFromPublicPKCS8Hex: function _getKeyFromPublicPKCS8Hex(q) {
	      var p;var r = ASN1HEX.getVbyList(q, 0, [0, 0], "06");if (r === "2a864886f70d010101") {
	        p = new RSAKey();
	      } else {
	        if (r === "2a8648ce380401") {
	          p = new KJUR.crypto.DSA();
	        } else {
	          if (r === "2a8648ce3d0201") {
	            p = new KJUR.crypto.ECDSA();
	          } else {
	            throw "unsupported PKCS#8 public key hex";
	          }
	        }
	      }p.readPKCS8PubKeyHex(q);return p;
	    }, parsePublicRawRSAKeyHex: function parsePublicRawRSAKeyHex(r) {
	      var u = ASN1HEX;var t = u.getChildIdx;var s = u.getV;var p = {};if (r.substr(0, 2) != "30") {
	        throw "malformed RSA key(code:001)";
	      }var q = t(r, 0);if (q.length != 2) {
	        throw "malformed RSA key(code:002)";
	      }if (r.substr(q[0], 2) != "02") {
	        throw "malformed RSA key(code:003)";
	      }p.n = s(r, q[0]);if (r.substr(q[1], 2) != "02") {
	        throw "malformed RSA key(code:004)";
	      }p.e = s(r, q[1]);return p;
	    }, parsePublicPKCS8Hex: function parsePublicPKCS8Hex(t) {
	      var v = ASN1HEX;var u = v.getChildIdx;var s = v.getV;var q = {};q.algparam = null;var r = u(t, 0);if (r.length != 2) {
	        throw "outer DERSequence shall have 2 elements: " + r.length;
	      }var w = r[0];if (t.substr(w, 2) != "30") {
	        throw "malformed PKCS8 public key(code:001)";
	      }var p = u(t, w);if (p.length != 2) {
	        throw "malformed PKCS8 public key(code:002)";
	      }if (t.substr(p[0], 2) != "06") {
	        throw "malformed PKCS8 public key(code:003)";
	      }q.algoid = s(t, p[0]);if (t.substr(p[1], 2) == "06") {
	        q.algparam = s(t, p[1]);
	      } else {
	        if (t.substr(p[1], 2) == "30") {
	          q.algparam = {};q.algparam.p = v.getVbyList(t, p[1], [0], "02");q.algparam.q = v.getVbyList(t, p[1], [1], "02");q.algparam.g = v.getVbyList(t, p[1], [2], "02");
	        }
	      }if (t.substr(r[1], 2) != "03") {
	        throw "malformed PKCS8 public key(code:004)";
	      }q.key = s(t, r[1]).substr(2);return q;
	    } };
	}();KEYUTIL.getKey = function (l, k, n) {
	  var G = ASN1HEX,
	      L = G.getChildIdx,
	      v = G.getV,
	      d = G.getVbyList,
	      c = KJUR.crypto,
	      i = c.ECDSA,
	      C = c.DSA,
	      w = RSAKey,
	      M = pemtohex,
	      F = KEYUTIL;if (typeof w != "undefined" && l instanceof w) {
	    return l;
	  }if (typeof i != "undefined" && l instanceof i) {
	    return l;
	  }if (typeof C != "undefined" && l instanceof C) {
	    return l;
	  }if (l.curve !== undefined && l.xy !== undefined && l.d === undefined) {
	    return new i({ pub: l.xy, curve: l.curve });
	  }if (l.curve !== undefined && l.d !== undefined) {
	    return new i({ prv: l.d, curve: l.curve });
	  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d === undefined) {
	    var P = new w();P.setPublic(l.n, l.e);return P;
	  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.co !== undefined && l.qi === undefined) {
	    var P = new w();P.setPrivateEx(l.n, l.e, l.d, l.p, l.q, l.dp, l.dq, l.co);return P;
	  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p === undefined) {
	    var P = new w();P.setPrivate(l.n, l.e, l.d);return P;
	  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x === undefined) {
	    var P = new C();P.setPublic(l.p, l.q, l.g, l.y);return P;
	  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x !== undefined) {
	    var P = new C();P.setPrivate(l.p, l.q, l.g, l.y, l.x);return P;
	  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d === undefined) {
	    var P = new w();P.setPublic(b64utohex(l.n), b64utohex(l.e));return P;
	  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.qi !== undefined) {
	    var P = new w();P.setPrivateEx(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d), b64utohex(l.p), b64utohex(l.q), b64utohex(l.dp), b64utohex(l.dq), b64utohex(l.qi));return P;
	  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined) {
	    var P = new w();P.setPrivate(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d));return P;
	  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d === undefined) {
	    var j = new i({ curve: l.crv });var t = j.ecparams.keylen / 4;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;j.setPublicKeyHex(u);return j;
	  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d !== undefined) {
	    var j = new i({ curve: l.crv });var t = j.ecparams.keylen / 4;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;var b = ("0000000000" + b64utohex(l.d)).slice(-t);j.setPublicKeyHex(u);j.setPrivateKeyHex(b);return j;
	  }if (n === "pkcs5prv") {
	    var J = l,
	        G = ASN1HEX,
	        N,
	        P;N = L(J, 0);if (N.length === 9) {
	      P = new w();P.readPKCS5PrvKeyHex(J);
	    } else {
	      if (N.length === 6) {
	        P = new C();P.readPKCS5PrvKeyHex(J);
	      } else {
	        if (N.length > 2 && J.substr(N[1], 2) === "04") {
	          P = new i();P.readPKCS5PrvKeyHex(J);
	        } else {
	          throw "unsupported PKCS#1/5 hexadecimal key";
	        }
	      }
	    }return P;
	  }if (n === "pkcs8prv") {
	    var P = F.getKeyFromPlainPrivatePKCS8Hex(l);return P;
	  }if (n === "pkcs8pub") {
	    return F._getKeyFromPublicPKCS8Hex(l);
	  }if (n === "x509pub") {
	    return X509.getPublicKeyFromCertHex(l);
	  }if (l.indexOf("-END CERTIFICATE-", 0) != -1 || l.indexOf("-END X509 CERTIFICATE-", 0) != -1 || l.indexOf("-END TRUSTED CERTIFICATE-", 0) != -1) {
	    return X509.getPublicKeyFromCertPEM(l);
	  }if (l.indexOf("-END PUBLIC KEY-") != -1) {
	    var O = pemtohex(l, "PUBLIC KEY");return F._getKeyFromPublicPKCS8Hex(O);
	  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
	    var m = M(l, "RSA PRIVATE KEY");return F.getKey(m, null, "pkcs5prv");
	  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
	    var I = M(l, "DSA PRIVATE KEY");var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
	  }if (l.indexOf("-END PRIVATE KEY-") != -1) {
	    return F.getKeyFromPlainPrivatePKCS8PEM(l);
	  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
	    var o = F.getDecryptedKeyHex(l, k);var H = new RSAKey();H.readPKCS5PrvKeyHex(o);return H;
	  }if (l.indexOf("-END EC PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
	    var I = F.getDecryptedKeyHex(l, k);var P = d(I, 0, [1], "04");var f = d(I, 0, [2, 0], "06");var A = d(I, 0, [3, 0], "03").substr(2);var e = "";if (KJUR.crypto.OID.oidhex2name[f] !== undefined) {
	      e = KJUR.crypto.OID.oidhex2name[f];
	    } else {
	      throw "undefined OID(hex) in KJUR.crypto.OID: " + f;
	    }var j = new i({ curve: e });j.setPublicKeyHex(A);j.setPrivateKeyHex(P);j.isPublic = false;return j;
	  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
	    var I = F.getDecryptedKeyHex(l, k);var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
	  }if (l.indexOf("-END ENCRYPTED PRIVATE KEY-") != -1) {
	    return F.getKeyFromEncryptedPKCS8PEM(l, k);
	  }throw "not supported argument";
	};KEYUTIL.generateKeypair = function (a, c) {
	  if (a == "RSA") {
	    var b = c;var h = new RSAKey();h.generate(b, "10001");h.isPrivate = true;h.isPublic = true;var f = new RSAKey();var e = h.n.toString(16);var i = h.e.toString(16);f.setPublic(e, i);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
	  } else {
	    if (a == "EC") {
	      var d = c;var g = new KJUR.crypto.ECDSA({ curve: d });var j = g.generateKeyPairHex();var h = new KJUR.crypto.ECDSA({ curve: d });h.setPublicKeyHex(j.ecpubhex);h.setPrivateKeyHex(j.ecprvhex);h.isPrivate = true;h.isPublic = false;var f = new KJUR.crypto.ECDSA({ curve: d });f.setPublicKeyHex(j.ecpubhex);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
	    } else {
	      throw "unknown algorithm: " + a;
	    }
	  }
	};KEYUTIL.getPEM = function (b, D, y, m, q, j) {
	  var F = KJUR,
	      k = F.asn1,
	      z = k.DERObjectIdentifier,
	      f = k.DERInteger,
	      l = k.ASN1Util.newObject,
	      a = k.x509,
	      C = a.SubjectPublicKeyInfo,
	      e = F.crypto,
	      u = e.DSA,
	      r = e.ECDSA,
	      n = RSAKey;function A(s) {
	    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.n } }, { "int": s.e }, { "int": { bigint: s.d } }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.dmp1 } }, { "int": { bigint: s.dmq1 } }, { "int": { bigint: s.coeff } }] });return G;
	  }function B(G) {
	    var s = l({ seq: [{ "int": 1 }, { octstr: { hex: G.prvKeyHex } }, { tag: ["a0", true, { oid: { name: G.curveName } }] }, { tag: ["a1", true, { bitstr: { hex: "00" + G.pubKeyHex } }] }] });return s;
	  }function x(s) {
	    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.g } }, { "int": { bigint: s.y } }, { "int": { bigint: s.x } }] });return G;
	  }if ((n !== undefined && b instanceof n || u !== undefined && b instanceof u || r !== undefined && b instanceof r) && b.isPublic == true && (D === undefined || D == "PKCS8PUB")) {
	    var E = new C(b);var w = E.getEncodedHex();return hextopem(w, "PUBLIC KEY");
	  }if (D == "PKCS1PRV" && n !== undefined && b instanceof n && (y === undefined || y == null) && b.isPrivate == true) {
	    var E = A(b);var w = E.getEncodedHex();return hextopem(w, "RSA PRIVATE KEY");
	  }if (D == "PKCS1PRV" && r !== undefined && b instanceof r && (y === undefined || y == null) && b.isPrivate == true) {
	    var i = new z({ name: b.curveName });var v = i.getEncodedHex();var h = B(b);var t = h.getEncodedHex();var p = "";p += hextopem(v, "EC PARAMETERS");p += hextopem(t, "EC PRIVATE KEY");return p;
	  }if (D == "PKCS1PRV" && u !== undefined && b instanceof u && (y === undefined || y == null) && b.isPrivate == true) {
	    var E = x(b);var w = E.getEncodedHex();return hextopem(w, "DSA PRIVATE KEY");
	  }if (D == "PKCS5PRV" && n !== undefined && b instanceof n && y !== undefined && y != null && b.isPrivate == true) {
	    var E = A(b);var w = E.getEncodedHex();if (m === undefined) {
	      m = "DES-EDE3-CBC";
	    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", w, y, m, j);
	  }if (D == "PKCS5PRV" && r !== undefined && b instanceof r && y !== undefined && y != null && b.isPrivate == true) {
	    var E = B(b);var w = E.getEncodedHex();if (m === undefined) {
	      m = "DES-EDE3-CBC";
	    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC", w, y, m, j);
	  }if (D == "PKCS5PRV" && u !== undefined && b instanceof u && y !== undefined && y != null && b.isPrivate == true) {
	    var E = x(b);var w = E.getEncodedHex();if (m === undefined) {
	      m = "DES-EDE3-CBC";
	    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA", w, y, m, j);
	  }var o = function o(G, s) {
	    var I = c(G, s);var H = new l({ seq: [{ seq: [{ oid: { name: "pkcs5PBES2" } }, { seq: [{ seq: [{ oid: { name: "pkcs5PBKDF2" } }, { seq: [{ octstr: { hex: I.pbkdf2Salt } }, { "int": I.pbkdf2Iter }] }] }, { seq: [{ oid: { name: "des-EDE3-CBC" } }, { octstr: { hex: I.encryptionSchemeIV } }] }] }] }, { octstr: { hex: I.ciphertext } }] });return H.getEncodedHex();
	  };var c = function c(N, O) {
	    var H = 100;var M = CryptoJS.lib.WordArray.random(8);var L = "DES-EDE3-CBC";var s = CryptoJS.lib.WordArray.random(8);var I = CryptoJS.PBKDF2(O, M, { keySize: 192 / 32, iterations: H });var J = CryptoJS.enc.Hex.parse(N);var K = CryptoJS.TripleDES.encrypt(J, I, { iv: s }) + "";var G = {};G.ciphertext = K;G.pbkdf2Salt = CryptoJS.enc.Hex.stringify(M);G.pbkdf2Iter = H;G.encryptionSchemeAlg = L;G.encryptionSchemeIV = CryptoJS.enc.Hex.stringify(s);return G;
	  };if (D == "PKCS8PRV" && n != undefined && b instanceof n && b.isPrivate == true) {
	    var g = A(b);var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "rsaEncryption" } }, { "null": true }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
	      return hextopem(w, "PRIVATE KEY");
	    } else {
	      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
	    }
	  }if (D == "PKCS8PRV" && r !== undefined && b instanceof r && b.isPrivate == true) {
	    var g = new l({ seq: [{ "int": 1 }, { octstr: { hex: b.prvKeyHex } }, { tag: ["a1", true, { bitstr: { hex: "00" + b.pubKeyHex } }] }] });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "ecPublicKey" } }, { oid: { name: b.curveName } }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
	      return hextopem(w, "PRIVATE KEY");
	    } else {
	      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
	    }
	  }if (D == "PKCS8PRV" && u !== undefined && b instanceof u && b.isPrivate == true) {
	    var g = new f({ bigint: b.x });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "dsa" } }, { seq: [{ "int": { bigint: b.p } }, { "int": { bigint: b.q } }, { "int": { bigint: b.g } }] }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
	      return hextopem(w, "PRIVATE KEY");
	    } else {
	      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
	    }
	  }throw "unsupported object nor format";
	};KEYUTIL.getKeyFromCSRPEM = function (b) {
	  var a = pemtohex(b, "CERTIFICATE REQUEST");var c = KEYUTIL.getKeyFromCSRHex(a);return c;
	};KEYUTIL.getKeyFromCSRHex = function (a) {
	  var c = KEYUTIL.parseCSRHex(a);var b = KEYUTIL.getKey(c.p8pubkeyhex, null, "pkcs8pub");return b;
	};KEYUTIL.parseCSRHex = function (d) {
	  var i = ASN1HEX;var f = i.getChildIdx;var c = i.getTLV;var b = {};var g = d;if (g.substr(0, 2) != "30") {
	    throw "malformed CSR(code:001)";
	  }var e = f(g, 0);if (e.length < 1) {
	    throw "malformed CSR(code:002)";
	  }if (g.substr(e[0], 2) != "30") {
	    throw "malformed CSR(code:003)";
	  }var a = f(g, e[0]);if (a.length < 3) {
	    throw "malformed CSR(code:004)";
	  }b.p8pubkeyhex = c(g, a[2]);return b;
	};KEYUTIL.getJWKFromKey = function (d) {
	  var b = {};if (d instanceof RSAKey && d.isPrivate) {
	    b.kty = "RSA";b.n = hextob64u(d.n.toString(16));b.e = hextob64u(d.e.toString(16));b.d = hextob64u(d.d.toString(16));b.p = hextob64u(d.p.toString(16));b.q = hextob64u(d.q.toString(16));b.dp = hextob64u(d.dmp1.toString(16));b.dq = hextob64u(d.dmq1.toString(16));b.qi = hextob64u(d.coeff.toString(16));return b;
	  } else {
	    if (d instanceof RSAKey && d.isPublic) {
	      b.kty = "RSA";b.n = hextob64u(d.n.toString(16));b.e = hextob64u(d.e.toString(16));return b;
	    } else {
	      if (d instanceof KJUR.crypto.ECDSA && d.isPrivate) {
	        var a = d.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384") {
	          throw "unsupported curve name for JWT: " + a;
	        }var c = d.getPublicKeyXYHex();b.kty = "EC";b.crv = a;b.x = hextob64u(c.x);b.y = hextob64u(c.y);b.d = hextob64u(d.prvKeyHex);return b;
	      } else {
	        if (d instanceof KJUR.crypto.ECDSA && d.isPublic) {
	          var a = d.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384") {
	            throw "unsupported curve name for JWT: " + a;
	          }var c = d.getPublicKeyXYHex();b.kty = "EC";b.crv = a;b.x = hextob64u(c.x);b.y = hextob64u(c.y);return b;
	        }
	      }
	    }
	  }throw "not supported key object";
	};
	RSAKey.getPosArrayOfChildrenFromHex = function (a) {
	  return ASN1HEX.getChildIdx(a, 0);
	};RSAKey.getHexValueArrayOfChildrenFromHex = function (f) {
	  var n = ASN1HEX;var i = n.getV;var k = RSAKey.getPosArrayOfChildrenFromHex(f);var e = i(f, k[0]);var j = i(f, k[1]);var b = i(f, k[2]);var c = i(f, k[3]);var h = i(f, k[4]);var g = i(f, k[5]);var m = i(f, k[6]);var l = i(f, k[7]);var d = i(f, k[8]);var k = new Array();k.push(e, j, b, c, h, g, m, l, d);return k;
	};RSAKey.prototype.readPrivateKeyFromPEMString = function (d) {
	  var c = pemtohex(d);var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
	};RSAKey.prototype.readPKCS5PrvKeyHex = function (c) {
	  var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
	};RSAKey.prototype.readPKCS8PrvKeyHex = function (e) {
	  var c, j, l, b, a, f, d, k;var m = ASN1HEX;var g = m.getVbyList;if (m.isASN1HEX(e) === false) {
	    throw "not ASN.1 hex string";
	  }try {
	    c = g(e, 0, [2, 0, 1], "02");j = g(e, 0, [2, 0, 2], "02");l = g(e, 0, [2, 0, 3], "02");b = g(e, 0, [2, 0, 4], "02");a = g(e, 0, [2, 0, 5], "02");f = g(e, 0, [2, 0, 6], "02");d = g(e, 0, [2, 0, 7], "02");k = g(e, 0, [2, 0, 8], "02");
	  } catch (i) {
	    throw "malformed PKCS#8 plain RSA private key";
	  }this.setPrivateEx(c, j, l, b, a, f, d, k);
	};RSAKey.prototype.readPKCS5PubKeyHex = function (c) {
	  var e = ASN1HEX;var b = e.getV;if (e.isASN1HEX(c) === false) {
	    throw "keyHex is not ASN.1 hex string";
	  }var a = e.getChildIdx(c, 0);if (a.length !== 2 || c.substr(a[0], 2) !== "02" || c.substr(a[1], 2) !== "02") {
	    throw "wrong hex for PKCS#5 public key";
	  }var f = b(c, a[0]);var d = b(c, a[1]);this.setPublic(f, d);
	};RSAKey.prototype.readPKCS8PubKeyHex = function (b) {
	  var c = ASN1HEX;if (c.isASN1HEX(b) === false) {
	    throw "not ASN.1 hex string";
	  }if (c.getTLVbyList(b, 0, [0, 0]) !== "06092a864886f70d010101") {
	    throw "not PKCS8 RSA public key";
	  }var a = c.getTLVbyList(b, 0, [1, 0]);this.readPKCS5PubKeyHex(a);
	};RSAKey.prototype.readCertPubKeyHex = function (b, d) {
	  var a, c;a = new X509();a.readCertHex(b);c = a.getPublicKeyHex();this.readPKCS8PubKeyHex(c);
	};
	var _RE_HEXDECONLY = new RegExp("");_RE_HEXDECONLY.compile("[^0-9a-f]", "gi");function _rsasign_getHexPaddedDigestInfoForString(d, e, a) {
	  var b = function b(f) {
	    return KJUR.crypto.Util.hashString(f, a);
	  };var c = b(d);return KJUR.crypto.Util.getPaddedDigestInfoHex(c, a, e);
	}function _zeroPaddingOfSignature(e, d) {
	  var c = "";var a = d / 4 - e.length;for (var b = 0; b < a; b++) {
	    c = c + "0";
	  }return c + e;
	}RSAKey.prototype.sign = function (d, a) {
	  var b = function b(e) {
	    return KJUR.crypto.Util.hashString(e, a);
	  };var c = b(d);return this.signWithMessageHash(c, a);
	};RSAKey.prototype.signWithMessageHash = function (e, c) {
	  var f = KJUR.crypto.Util.getPaddedDigestInfoHex(e, c, this.n.bitLength());var b = parseBigInt(f, 16);var d = this.doPrivate(b);var a = d.toString(16);return _zeroPaddingOfSignature(a, this.n.bitLength());
	};function pss_mgf1_str(c, a, e) {
	  var b = "",
	      d = 0;while (b.length < a) {
	    b += hextorstr(e(rstrtohex(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255]))));d += 1;
	  }return b;
	}RSAKey.prototype.signPSS = function (e, a, d) {
	  var c = function c(f) {
	    return KJUR.crypto.Util.hashHex(f, a);
	  };var b = c(rstrtohex(e));if (d === undefined) {
	    d = -1;
	  }return this.signWithMessageHashPSS(b, a, d);
	};RSAKey.prototype.signWithMessageHashPSS = function (l, a, k) {
	  var b = hextorstr(l);var g = b.length;var m = this.n.bitLength() - 1;var c = Math.ceil(m / 8);var d;var o = function o(i) {
	    return KJUR.crypto.Util.hashHex(i, a);
	  };if (k === -1 || k === undefined) {
	    k = g;
	  } else {
	    if (k === -2) {
	      k = c - g - 2;
	    } else {
	      if (k < -2) {
	        throw "invalid salt length";
	      }
	    }
	  }if (c < g + k + 2) {
	    throw "data too long";
	  }var f = "";if (k > 0) {
	    f = new Array(k);new SecureRandom().nextBytes(f);f = String.fromCharCode.apply(String, f);
	  }var n = hextorstr(o(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + b + f)));var j = [];for (d = 0; d < c - k - g - 2; d += 1) {
	    j[d] = 0;
	  }var e = String.fromCharCode.apply(String, j) + "\x01" + f;var h = pss_mgf1_str(n, e.length, o);var q = [];for (d = 0; d < e.length; d += 1) {
	    q[d] = e.charCodeAt(d) ^ h.charCodeAt(d);
	  }var p = 65280 >> 8 * c - m & 255;q[0] &= ~p;for (d = 0; d < g; d++) {
	    q.push(n.charCodeAt(d));
	  }q.push(188);return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16), this.n.bitLength());
	};function _rsasign_getDecryptSignatureBI(a, d, c) {
	  var b = new RSAKey();b.setPublic(d, c);var e = b.doPublic(a);return e;
	}function _rsasign_getHexDigestInfoFromSig(a, c, b) {
	  var e = _rsasign_getDecryptSignatureBI(a, c, b);var d = e.toString(16).replace(/^1f+00/, "");return d;
	}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f) {
	  for (var e in KJUR.crypto.Util.DIGESTINFOHEAD) {
	    var d = KJUR.crypto.Util.DIGESTINFOHEAD[e];var b = d.length;if (f.substring(0, b) == d) {
	      var c = [e, f.substring(b)];return c;
	    }
	  }return [];
	}RSAKey.prototype.verify = function (f, j) {
	  j = j.replace(_RE_HEXDECONLY, "");j = j.replace(/[ \n]+/g, "");var b = parseBigInt(j, 16);if (b.bitLength() > this.n.bitLength()) {
	    return 0;
	  }var i = this.doPublic(b);var e = i.toString(16).replace(/^1f+00/, "");var g = _rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if (g.length == 0) {
	    return false;
	  }var d = g[0];var h = g[1];var a = function a(k) {
	    return KJUR.crypto.Util.hashString(k, d);
	  };var c = a(f);return h == c;
	};RSAKey.prototype.verifyWithMessageHash = function (e, a) {
	  a = a.replace(_RE_HEXDECONLY, "");a = a.replace(/[ \n]+/g, "");var b = parseBigInt(a, 16);if (b.bitLength() > this.n.bitLength()) {
	    return 0;
	  }var h = this.doPublic(b);var g = h.toString(16).replace(/^1f+00/, "");var c = _rsasign_getAlgNameAndHashFromHexDisgestInfo(g);if (c.length == 0) {
	    return false;
	  }var d = c[0];var f = c[1];return f == e;
	};RSAKey.prototype.verifyPSS = function (c, b, a, f) {
	  var e = function e(g) {
	    return KJUR.crypto.Util.hashHex(g, a);
	  };var d = e(rstrtohex(c));if (f === undefined) {
	    f = -1;
	  }return this.verifyWithMessageHashPSS(d, b, a, f);
	};RSAKey.prototype.verifyWithMessageHashPSS = function (f, s, l, c) {
	  var k = new BigInteger(s, 16);if (k.bitLength() > this.n.bitLength()) {
	    return false;
	  }var r = function r(i) {
	    return KJUR.crypto.Util.hashHex(i, l);
	  };var j = hextorstr(f);var h = j.length;var g = this.n.bitLength() - 1;var m = Math.ceil(g / 8);var q;if (c === -1 || c === undefined) {
	    c = h;
	  } else {
	    if (c === -2) {
	      c = m - h - 2;
	    } else {
	      if (c < -2) {
	        throw "invalid salt length";
	      }
	    }
	  }if (m < h + c + 2) {
	    throw "data too long";
	  }var a = this.doPublic(k).toByteArray();for (q = 0; q < a.length; q += 1) {
	    a[q] &= 255;
	  }while (a.length < m) {
	    a.unshift(0);
	  }if (a[m - 1] !== 188) {
	    throw "encoded message does not end in 0xbc";
	  }a = String.fromCharCode.apply(String, a);var d = a.substr(0, m - h - 1);var e = a.substr(d.length, h);var p = 65280 >> 8 * m - g & 255;if ((d.charCodeAt(0) & p) !== 0) {
	    throw "bits beyond keysize not zero";
	  }var n = pss_mgf1_str(e, d.length, r);var o = [];for (q = 0; q < d.length; q += 1) {
	    o[q] = d.charCodeAt(q) ^ n.charCodeAt(q);
	  }o[0] &= ~p;var b = m - h - c - 2;for (q = 0; q < b; q += 1) {
	    if (o[q] !== 0) {
	      throw "leftmost octets not zero";
	    }
	  }if (o[b] !== 1) {
	    throw "0x01 marker not found";
	  }return e === hextorstr(r(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + j + String.fromCharCode.apply(String, o.slice(-c)))));
	};RSAKey.SALT_LEN_HLEN = -1;RSAKey.SALT_LEN_MAX = -2;RSAKey.SALT_LEN_RECOVER = -2;
	function X509() {
	  var k = ASN1HEX,
	      j = k.getChildIdx,
	      h = k.getV,
	      b = k.getTLV,
	      f = k.getVbyList,
	      c = k.getTLVbyList,
	      g = k.getIdxbyList,
	      d = k.getVidx,
	      i = k.oidname,
	      a = X509,
	      e = pemtohex;this.hex = null;this.version = 0;this.foffset = 0;this.aExtInfo = null;this.getVersion = function () {
	    if (this.hex === null || this.version !== 0) {
	      return this.version;
	    }if (c(this.hex, 0, [0, 0]) !== "a003020102") {
	      this.version = 1;this.foffset = -1;return 1;
	    }this.version = 3;return 3;
	  };this.getSerialNumberHex = function () {
	    return f(this.hex, 0, [0, 1 + this.foffset], "02");
	  };this.getSignatureAlgorithmField = function () {
	    return i(f(this.hex, 0, [0, 2 + this.foffset, 0], "06"));
	  };this.getIssuerHex = function () {
	    return c(this.hex, 0, [0, 3 + this.foffset], "30");
	  };this.getIssuerString = function () {
	    return a.hex2dn(this.getIssuerHex());
	  };this.getSubjectHex = function () {
	    return c(this.hex, 0, [0, 5 + this.foffset], "30");
	  };this.getSubjectString = function () {
	    return a.hex2dn(this.getSubjectHex());
	  };this.getNotBefore = function () {
	    var l = f(this.hex, 0, [0, 4 + this.foffset, 0]);l = l.replace(/(..)/g, "%$1");l = decodeURIComponent(l);return l;
	  };this.getNotAfter = function () {
	    var l = f(this.hex, 0, [0, 4 + this.foffset, 1]);l = l.replace(/(..)/g, "%$1");l = decodeURIComponent(l);return l;
	  };this.getPublicKeyHex = function () {
	    return k.getTLVbyList(this.hex, 0, [0, 6 + this.foffset], "30");
	  };this.getPublicKeyIdx = function () {
	    return g(this.hex, 0, [0, 6 + this.foffset], "30");
	  };this.getPublicKeyContentIdx = function () {
	    var l = this.getPublicKeyIdx();return g(this.hex, l, [1, 0], "30");
	  };this.getPublicKey = function () {
	    return KEYUTIL.getKey(this.getPublicKeyHex(), null, "pkcs8pub");
	  };this.getSignatureAlgorithmName = function () {
	    return i(f(this.hex, 0, [1, 0], "06"));
	  };this.getSignatureValueHex = function () {
	    return f(this.hex, 0, [2], "03", true);
	  };this.verifySignature = function (n) {
	    var o = this.getSignatureAlgorithmName();var l = this.getSignatureValueHex();var m = c(this.hex, 0, [0], "30");var p = new KJUR.crypto.Signature({ alg: o });p.init(n);p.updateHex(m);return p.verify(l);
	  };this.parseExt = function () {
	    if (this.version !== 3) {
	      return -1;
	    }var p = g(this.hex, 0, [0, 7, 0], "30");var m = j(this.hex, p);this.aExtInfo = new Array();for (var n = 0; n < m.length; n++) {
	      var q = {};q.critical = false;var l = j(this.hex, m[n]);var r = 0;if (l.length === 3) {
	        q.critical = true;r = 1;
	      }q.oid = k.hextooidstr(f(this.hex, m[n], [0], "06"));var o = g(this.hex, m[n], [1 + r]);q.vidx = d(this.hex, o);this.aExtInfo.push(q);
	    }
	  };this.getExtInfo = function (n) {
	    var l = this.aExtInfo;var o = n;if (!n.match(/^[0-9.]+$/)) {
	      o = KJUR.asn1.x509.OID.name2oid(n);
	    }if (o === "") {
	      return undefined;
	    }for (var m = 0; m < l.length; m++) {
	      if (l[m].oid === o) {
	        return l[m];
	      }
	    }return undefined;
	  };this.getExtBasicConstraints = function () {
	    var n = this.getExtInfo("basicConstraints");if (n === undefined) {
	      return n;
	    }var l = h(this.hex, n.vidx);if (l === "") {
	      return {};
	    }if (l === "0101ff") {
	      return { cA: true };
	    }if (l.substr(0, 8) === "0101ff02") {
	      var o = h(l, 6);var m = parseInt(o, 16);return { cA: true, pathLen: m };
	    }throw "basicConstraints parse error";
	  };this.getExtKeyUsageBin = function () {
	    var o = this.getExtInfo("keyUsage");if (o === undefined) {
	      return "";
	    }var m = h(this.hex, o.vidx);if (m.length % 2 != 0 || m.length <= 2) {
	      throw "malformed key usage value";
	    }var l = parseInt(m.substr(0, 2));var n = parseInt(m.substr(2), 16).toString(2);return n.substr(0, n.length - l);
	  };this.getExtKeyUsageString = function () {
	    var n = this.getExtKeyUsageBin();var l = new Array();for (var m = 0; m < n.length; m++) {
	      if (n.substr(m, 1) == "1") {
	        l.push(X509.KEYUSAGE_NAME[m]);
	      }
	    }return l.join(",");
	  };this.getExtSubjectKeyIdentifier = function () {
	    var l = this.getExtInfo("subjectKeyIdentifier");if (l === undefined) {
	      return l;
	    }return h(this.hex, l.vidx);
	  };this.getExtAuthorityKeyIdentifier = function () {
	    var p = this.getExtInfo("authorityKeyIdentifier");if (p === undefined) {
	      return p;
	    }var l = {};var o = b(this.hex, p.vidx);var m = j(o, 0);for (var n = 0; n < m.length; n++) {
	      if (o.substr(m[n], 2) === "80") {
	        l.kid = h(o, m[n]);
	      }
	    }return l;
	  };this.getExtExtKeyUsageName = function () {
	    var p = this.getExtInfo("extKeyUsage");if (p === undefined) {
	      return p;
	    }var l = new Array();var o = b(this.hex, p.vidx);if (o === "") {
	      return l;
	    }var m = j(o, 0);for (var n = 0; n < m.length; n++) {
	      l.push(i(h(o, m[n])));
	    }return l;
	  };this.getExtSubjectAltName = function () {
	    var m = this.getExtSubjectAltName2();var l = new Array();for (var n = 0; n < m.length; n++) {
	      if (m[n][0] === "DNS") {
	        l.push(m[n][1]);
	      }
	    }return l;
	  };this.getExtSubjectAltName2 = function () {
	    var p, s, r;var q = this.getExtInfo("subjectAltName");if (q === undefined) {
	      return q;
	    }var l = new Array();var o = b(this.hex, q.vidx);var m = j(o, 0);for (var n = 0; n < m.length; n++) {
	      r = o.substr(m[n], 2);p = h(o, m[n]);if (r === "81") {
	        s = hextoutf8(p);l.push(["MAIL", s]);
	      }if (r === "82") {
	        s = hextoutf8(p);l.push(["DNS", s]);
	      }if (r === "84") {
	        s = X509.hex2dn(p, 0);l.push(["DN", s]);
	      }if (r === "86") {
	        s = hextoutf8(p);l.push(["URI", s]);
	      }if (r === "87") {
	        s = hextoip(p);l.push(["IP", s]);
	      }
	    }return l;
	  };this.getExtCRLDistributionPointsURI = function () {
	    var q = this.getExtInfo("cRLDistributionPoints");if (q === undefined) {
	      return q;
	    }var l = new Array();var m = j(this.hex, q.vidx);for (var o = 0; o < m.length; o++) {
	      try {
	        var r = f(this.hex, m[o], [0, 0, 0], "86");var p = hextoutf8(r);l.push(p);
	      } catch (n) {}
	    }return l;
	  };this.getExtAIAInfo = function () {
	    var p = this.getExtInfo("authorityInfoAccess");if (p === undefined) {
	      return p;
	    }var l = { ocsp: [], caissuer: [] };var m = j(this.hex, p.vidx);for (var n = 0; n < m.length; n++) {
	      var q = f(this.hex, m[n], [0], "06");var o = f(this.hex, m[n], [1], "86");if (q === "2b06010505073001") {
	        l.ocsp.push(hextoutf8(o));
	      }if (q === "2b06010505073002") {
	        l.caissuer.push(hextoutf8(o));
	      }
	    }return l;
	  };this.getExtCertificatePolicies = function () {
	    var o = this.getExtInfo("certificatePolicies");if (o === undefined) {
	      return o;
	    }var l = b(this.hex, o.vidx);var u = [];var s = j(l, 0);for (var r = 0; r < s.length; r++) {
	      var t = {};var n = j(l, s[r]);t.id = i(h(l, n[0]));if (n.length === 2) {
	        var m = j(l, n[1]);for (var q = 0; q < m.length; q++) {
	          var p = f(l, m[q], [0], "06");if (p === "2b06010505070201") {
	            t.cps = hextoutf8(f(l, m[q], [1]));
	          } else {
	            if (p === "2b06010505070202") {
	              t.unotice = hextoutf8(f(l, m[q], [1, 0]));
	            }
	          }
	        }
	      }u.push(t);
	    }return u;
	  };this.readCertPEM = function (l) {
	    this.readCertHex(e(l));
	  };this.readCertHex = function (l) {
	    this.hex = l;this.getVersion();try {
	      g(this.hex, 0, [0, 7], "a3");this.parseExt();
	    } catch (m) {}
	  };this.getInfo = function () {
	    var m = X509;var B, u, z;B = "Basic Fields\n";B += "  serial number: " + this.getSerialNumberHex() + "\n";B += "  signature algorithm: " + this.getSignatureAlgorithmField() + "\n";B += "  issuer: " + this.getIssuerString() + "\n";B += "  notBefore: " + this.getNotBefore() + "\n";B += "  notAfter: " + this.getNotAfter() + "\n";B += "  subject: " + this.getSubjectString() + "\n";B += "  subject public key info: \n";u = this.getPublicKey();B += "    key algorithm: " + u.type + "\n";if (u.type === "RSA") {
	      B += "    n=" + hextoposhex(u.n.toString(16)).substr(0, 16) + "...\n";B += "    e=" + hextoposhex(u.e.toString(16)) + "\n";
	    }z = this.aExtInfo;if (z !== undefined && z !== null) {
	      B += "X509v3 Extensions:\n";for (var r = 0; r < z.length; r++) {
	        var n = z[r];var A = KJUR.asn1.x509.OID.oid2name(n.oid);if (A === "") {
	          A = n.oid;
	        }var x = "";if (n.critical === true) {
	          x = "CRITICAL";
	        }B += "  " + A + " " + x + ":\n";if (A === "basicConstraints") {
	          var v = this.getExtBasicConstraints();if (v.cA === undefined) {
	            B += "    {}\n";
	          } else {
	            B += "    cA=true";if (v.pathLen !== undefined) {
	              B += ", pathLen=" + v.pathLen;
	            }B += "\n";
	          }
	        } else {
	          if (A === "keyUsage") {
	            B += "    " + this.getExtKeyUsageString() + "\n";
	          } else {
	            if (A === "subjectKeyIdentifier") {
	              B += "    " + this.getExtSubjectKeyIdentifier() + "\n";
	            } else {
	              if (A === "authorityKeyIdentifier") {
	                var l = this.getExtAuthorityKeyIdentifier();if (l.kid !== undefined) {
	                  B += "    kid=" + l.kid + "\n";
	                }
	              } else {
	                if (A === "extKeyUsage") {
	                  var w = this.getExtExtKeyUsageName();B += "    " + w.join(", ") + "\n";
	                } else {
	                  if (A === "subjectAltName") {
	                    var t = this.getExtSubjectAltName2();B += "    " + t + "\n";
	                  } else {
	                    if (A === "cRLDistributionPoints") {
	                      var y = this.getExtCRLDistributionPointsURI();B += "    " + y + "\n";
	                    } else {
	                      if (A === "authorityInfoAccess") {
	                        var p = this.getExtAIAInfo();if (p.ocsp !== undefined) {
	                          B += "    ocsp: " + p.ocsp.join(",") + "\n";
	                        }if (p.caissuer !== undefined) {
	                          B += "    caissuer: " + p.caissuer.join(",") + "\n";
	                        }
	                      } else {
	                        if (A === "certificatePolicies") {
	                          var o = this.getExtCertificatePolicies();for (var q = 0; q < o.length; q++) {
	                            if (o[q].id !== undefined) {
	                              B += "    policy oid: " + o[q].id + "\n";
	                            }if (o[q].cps !== undefined) {
	                              B += "    cps: " + o[q].cps + "\n";
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }B += "signature algorithm: " + this.getSignatureAlgorithmName() + "\n";B += "signature: " + this.getSignatureValueHex().substr(0, 16) + "...\n";return B;
	  };
	}X509.hex2dn = function (f, b) {
	  if (b === undefined) {
	    b = 0;
	  }if (f.substr(b, 2) !== "30") {
	    throw "malformed DN";
	  }var c = new Array();var d = ASN1HEX.getChildIdx(f, b);for (var e = 0; e < d.length; e++) {
	    c.push(X509.hex2rdn(f, d[e]));
	  }c = c.map(function (a) {
	    return a.replace("/", "\\/");
	  });return "/" + c.join("/");
	};X509.hex2rdn = function (f, b) {
	  if (b === undefined) {
	    b = 0;
	  }if (f.substr(b, 2) !== "31") {
	    throw "malformed RDN";
	  }var c = new Array();var d = ASN1HEX.getChildIdx(f, b);for (var e = 0; e < d.length; e++) {
	    c.push(X509.hex2attrTypeValue(f, d[e]));
	  }c = c.map(function (a) {
	    return a.replace("+", "\\+");
	  });return c.join("+");
	};X509.hex2attrTypeValue = function (d, i) {
	  var j = ASN1HEX;var h = j.getV;if (i === undefined) {
	    i = 0;
	  }if (d.substr(i, 2) !== "30") {
	    throw "malformed attribute type and value";
	  }var g = j.getChildIdx(d, i);if (g.length !== 2 || d.substr(g[0], 2) !== "06") {
	    "malformed attribute type and value";
	  }var b = h(d, g[0]);var f = KJUR.asn1.ASN1Util.oidHexToInt(b);var e = KJUR.asn1.x509.OID.oid2atype(f);var a = h(d, g[1]);var c = hextorstr(a);return e + "=" + c;
	};X509.getPublicKeyFromCertHex = function (b) {
	  var a = new X509();a.readCertHex(b);return a.getPublicKey();
	};X509.getPublicKeyFromCertPEM = function (b) {
	  var a = new X509();a.readCertPEM(b);return a.getPublicKey();
	};X509.getPublicKeyInfoPropOfCertPEM = function (c) {
	  var e = ASN1HEX;var g = e.getVbyList;var b = {};var a, f, d;b.algparam = null;a = new X509();a.readCertPEM(c);f = a.getPublicKeyHex();b.keyhex = g(f, 0, [1], "03").substr(2);b.algoid = g(f, 0, [0, 0], "06");if (b.algoid === "2a8648ce3d0201") {
	    b.algparam = g(f, 0, [0, 1], "06");
	  }return b;
	};X509.KEYUSAGE_NAME = ["digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly"];
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.jws == "undefined" || !KJUR.jws) {
	  KJUR.jws = {};
	}KJUR.jws.JWS = function () {
	  var b = KJUR,
	      a = b.jws.JWS,
	      c = a.isSafeJSONString;this.parseJWS = function (g, j) {
	    if (this.parsedJWS !== undefined && (j || this.parsedJWS.sigvalH !== undefined)) {
	      return;
	    }var i = g.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if (i == null) {
	      throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
	    }var k = i[1];var e = i[2];var l = i[3];var n = k + "." + e;this.parsedJWS = {};this.parsedJWS.headB64U = k;this.parsedJWS.payloadB64U = e;this.parsedJWS.sigvalB64U = l;this.parsedJWS.si = n;if (!j) {
	      var h = b64utohex(l);var f = parseBigInt(h, 16);this.parsedJWS.sigvalH = h;this.parsedJWS.sigvalBI = f;
	    }var d = b64utoutf8(k);var m = b64utoutf8(e);this.parsedJWS.headS = d;this.parsedJWS.payloadS = m;if (!c(d, this.parsedJWS, "headP")) {
	      throw "malformed JSON string for JWS Head: " + d;
	    }
	  };
	};KJUR.jws.JWS.sign = function (i, v, y, z, a) {
	  var w = KJUR,
	      m = w.jws,
	      q = m.JWS,
	      g = q.readSafeJSONString,
	      p = q.isSafeJSONString,
	      d = w.crypto,
	      k = d.ECDSA,
	      o = d.Mac,
	      c = d.Signature,
	      t = JSON;var s, j, n;if (typeof v != "string" && (typeof v === "undefined" ? "undefined" : _typeof(v)) != "object") {
	    throw "spHeader must be JSON string or object: " + v;
	  }if ((typeof v === "undefined" ? "undefined" : _typeof(v)) == "object") {
	    j = v;s = t.stringify(j);
	  }if (typeof v == "string") {
	    s = v;if (!p(s)) {
	      throw "JWS Head is not safe JSON string: " + s;
	    }j = g(s);
	  }n = y;if ((typeof y === "undefined" ? "undefined" : _typeof(y)) == "object") {
	    n = t.stringify(y);
	  }if ((i == "" || i == null) && j.alg !== undefined) {
	    i = j.alg;
	  }if (i != "" && i != null && j.alg === undefined) {
	    j.alg = i;s = t.stringify(j);
	  }if (i !== j.alg) {
	    throw "alg and sHeader.alg doesn't match: " + i + "!=" + j.alg;
	  }var r = null;if (q.jwsalg2sigalg[i] === undefined) {
	    throw "unsupported alg name: " + i;
	  } else {
	    r = q.jwsalg2sigalg[i];
	  }var e = utf8tob64u(s);var l = utf8tob64u(n);var b = e + "." + l;var x = "";if (r.substr(0, 4) == "Hmac") {
	    if (z === undefined) {
	      throw "mac key shall be specified for HS* alg";
	    }var h = new o({ alg: r, prov: "cryptojs", pass: z });h.updateString(b);x = h.doFinal();
	  } else {
	    if (r.indexOf("withECDSA") != -1) {
	      var f = new c({ alg: r });f.init(z, a);f.updateString(b);hASN1Sig = f.sign();x = KJUR.crypto.ECDSA.asn1SigToConcatSig(hASN1Sig);
	    } else {
	      if (r != "none") {
	        var f = new c({ alg: r });f.init(z, a);f.updateString(b);x = f.sign();
	      }
	    }
	  }var u = hextob64u(x);return b + "." + u;
	};KJUR.jws.JWS.verify = function (w, B, n) {
	  var x = KJUR,
	      q = x.jws,
	      t = q.JWS,
	      i = t.readSafeJSONString,
	      e = x.crypto,
	      p = e.ECDSA,
	      s = e.Mac,
	      d = e.Signature,
	      m;if ((typeof RSAKey === "undefined" ? "undefined" : _typeof(RSAKey)) !== undefined) {
	    m = RSAKey;
	  }var y = w.split(".");if (y.length !== 3) {
	    return false;
	  }var f = y[0];var r = y[1];var c = f + "." + r;var A = b64utohex(y[2]);var l = i(b64utoutf8(y[0]));var k = null;var z = null;if (l.alg === undefined) {
	    throw "algorithm not specified in header";
	  } else {
	    k = l.alg;z = k.substr(0, 2);
	  }if (n != null && Object.prototype.toString.call(n) === "[object Array]" && n.length > 0) {
	    var b = ":" + n.join(":") + ":";if (b.indexOf(":" + k + ":") == -1) {
	      throw "algorithm '" + k + "' not accepted in the list";
	    }
	  }if (k != "none" && B === null) {
	    throw "key shall be specified to verify.";
	  }if (typeof B == "string" && B.indexOf("-----BEGIN ") != -1) {
	    B = KEYUTIL.getKey(B);
	  }if (z == "RS" || z == "PS") {
	    if (!(B instanceof m)) {
	      throw "key shall be a RSAKey obj for RS* and PS* algs";
	    }
	  }if (z == "ES") {
	    if (!(B instanceof p)) {
	      throw "key shall be a ECDSA obj for ES* algs";
	    }
	  }if (k == "none") {}var u = null;if (t.jwsalg2sigalg[l.alg] === undefined) {
	    throw "unsupported alg name: " + k;
	  } else {
	    u = t.jwsalg2sigalg[k];
	  }if (u == "none") {
	    throw "not supported";
	  } else {
	    if (u.substr(0, 4) == "Hmac") {
	      var o = null;if (B === undefined) {
	        throw "hexadecimal key shall be specified for HMAC";
	      }var j = new s({ alg: u, pass: B });j.updateString(c);o = j.doFinal();return A == o;
	    } else {
	      if (u.indexOf("withECDSA") != -1) {
	        var h = null;try {
	          h = p.concatSigToASN1Sig(A);
	        } catch (v) {
	          return false;
	        }var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(h);
	      } else {
	        var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(A);
	      }
	    }
	  }
	};KJUR.jws.JWS.parse = function (g) {
	  var c = g.split(".");var b = {};var f, e, d;if (c.length != 2 && c.length != 3) {
	    throw "malformed sJWS: wrong number of '.' splitted elements";
	  }f = c[0];e = c[1];if (c.length == 3) {
	    d = c[2];
	  }b.headerObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));b.payloadObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));b.headerPP = JSON.stringify(b.headerObj, null, "  ");if (b.payloadObj == null) {
	    b.payloadPP = b64utoutf8(e);
	  } else {
	    b.payloadPP = JSON.stringify(b.payloadObj, null, "  ");
	  }if (d !== undefined) {
	    b.sigHex = b64utohex(d);
	  }return b;
	};KJUR.jws.JWS.verifyJWT = function (e, l, r) {
	  var d = KJUR,
	      j = d.jws,
	      o = j.JWS,
	      n = o.readSafeJSONString,
	      p = o.inArray,
	      f = o.includedArray;var k = e.split(".");var c = k[0];var i = k[1];var q = c + "." + i;var m = b64utohex(k[2]);var h = n(b64utoutf8(c));var g = n(b64utoutf8(i));if (h.alg === undefined) {
	    return false;
	  }if (r.alg === undefined) {
	    throw "acceptField.alg shall be specified";
	  }if (!p(h.alg, r.alg)) {
	    return false;
	  }if (g.iss !== undefined && _typeof(r.iss) === "object") {
	    if (!p(g.iss, r.iss)) {
	      return false;
	    }
	  }if (g.sub !== undefined && _typeof(r.sub) === "object") {
	    if (!p(g.sub, r.sub)) {
	      return false;
	    }
	  }if (g.aud !== undefined && _typeof(r.aud) === "object") {
	    if (typeof g.aud == "string") {
	      if (!p(g.aud, r.aud)) {
	        return false;
	      }
	    } else {
	      if (_typeof(g.aud) == "object") {
	        if (!f(g.aud, r.aud)) {
	          return false;
	        }
	      }
	    }
	  }var b = j.IntDate.getNow();if (r.verifyAt !== undefined && typeof r.verifyAt === "number") {
	    b = r.verifyAt;
	  }if (r.gracePeriod === undefined || typeof r.gracePeriod !== "number") {
	    r.gracePeriod = 0;
	  }if (g.exp !== undefined && typeof g.exp == "number") {
	    if (g.exp + r.gracePeriod < b) {
	      return false;
	    }
	  }if (g.nbf !== undefined && typeof g.nbf == "number") {
	    if (b < g.nbf - r.gracePeriod) {
	      return false;
	    }
	  }if (g.iat !== undefined && typeof g.iat == "number") {
	    if (b < g.iat - r.gracePeriod) {
	      return false;
	    }
	  }if (g.jti !== undefined && r.jti !== undefined) {
	    if (g.jti !== r.jti) {
	      return false;
	    }
	  }if (!o.verify(e, l, r.alg)) {
	    return false;
	  }return true;
	};KJUR.jws.JWS.includedArray = function (b, a) {
	  var c = KJUR.jws.JWS.inArray;if (b === null) {
	    return false;
	  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
	    return false;
	  }if (typeof b.length !== "number") {
	    return false;
	  }for (var d = 0; d < b.length; d++) {
	    if (!c(b[d], a)) {
	      return false;
	    }
	  }return true;
	};KJUR.jws.JWS.inArray = function (d, b) {
	  if (b === null) {
	    return false;
	  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
	    return false;
	  }if (typeof b.length !== "number") {
	    return false;
	  }for (var c = 0; c < b.length; c++) {
	    if (b[c] == d) {
	      return true;
	    }
	  }return false;
	};KJUR.jws.JWS.jwsalg2sigalg = { HS256: "HmacSHA256", HS384: "HmacSHA384", HS512: "HmacSHA512", RS256: "SHA256withRSA", RS384: "SHA384withRSA", RS512: "SHA512withRSA", ES256: "SHA256withECDSA", ES384: "SHA384withECDSA", PS256: "SHA256withRSAandMGF1", PS384: "SHA384withRSAandMGF1", PS512: "SHA512withRSAandMGF1", none: "none" };KJUR.jws.JWS.isSafeJSONString = function (c, b, d) {
	  var e = null;try {
	    e = jsonParse(c);if ((typeof e === "undefined" ? "undefined" : _typeof(e)) != "object") {
	      return 0;
	    }if (e.constructor === Array) {
	      return 0;
	    }if (b) {
	      b[d] = e;
	    }return 1;
	  } catch (a) {
	    return 0;
	  }
	};KJUR.jws.JWS.readSafeJSONString = function (b) {
	  var c = null;try {
	    c = jsonParse(b);if ((typeof c === "undefined" ? "undefined" : _typeof(c)) != "object") {
	      return null;
	    }if (c.constructor === Array) {
	      return null;
	    }return c;
	  } catch (a) {
	    return null;
	  }
	};KJUR.jws.JWS.getEncodedSignatureValueFromJWS = function (b) {
	  var a = b.match(/^[^.]+\.[^.]+\.([^.]+)$/);if (a == null) {
	    throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
	  }return a[1];
	};KJUR.jws.JWS.getJWKthumbprint = function (d) {
	  if (d.kty !== "RSA" && d.kty !== "EC" && d.kty !== "oct") {
	    throw "unsupported algorithm for JWK Thumprint";
	  }var a = "{";if (d.kty === "RSA") {
	    if (typeof d.n != "string" || typeof d.e != "string") {
	      throw "wrong n and e value for RSA key";
	    }a += '"e":"' + d.e + '",';a += '"kty":"' + d.kty + '",';a += '"n":"' + d.n + '"}';
	  } else {
	    if (d.kty === "EC") {
	      if (typeof d.crv != "string" || typeof d.x != "string" || typeof d.y != "string") {
	        throw "wrong crv, x and y value for EC key";
	      }a += '"crv":"' + d.crv + '",';a += '"kty":"' + d.kty + '",';a += '"x":"' + d.x + '",';a += '"y":"' + d.y + '"}';
	    } else {
	      if (d.kty === "oct") {
	        if (typeof d.k != "string") {
	          throw "wrong k value for oct(symmetric) key";
	        }a += '"kty":"' + d.kty + '",';a += '"k":"' + d.k + '"}';
	      }
	    }
	  }var b = rstrtohex(a);var c = KJUR.crypto.Util.hashHex(b, "sha256");var e = hextob64u(c);return e;
	};KJUR.jws.IntDate = {};KJUR.jws.IntDate.get = function (c) {
	  var b = KJUR.jws.IntDate,
	      d = b.getNow,
	      a = b.getZulu;if (c == "now") {
	    return d();
	  } else {
	    if (c == "now + 1hour") {
	      return d() + 60 * 60;
	    } else {
	      if (c == "now + 1day") {
	        return d() + 60 * 60 * 24;
	      } else {
	        if (c == "now + 1month") {
	          return d() + 60 * 60 * 24 * 30;
	        } else {
	          if (c == "now + 1year") {
	            return d() + 60 * 60 * 24 * 365;
	          } else {
	            if (c.match(/Z$/)) {
	              return a(c);
	            } else {
	              if (c.match(/^[0-9]+$/)) {
	                return parseInt(c);
	              }
	            }
	          }
	        }
	      }
	    }
	  }throw "unsupported format: " + c;
	};KJUR.jws.IntDate.getZulu = function (a) {
	  return zulutosec(a);
	};KJUR.jws.IntDate.getNow = function () {
	  var a = ~~(new Date() / 1000);return a;
	};KJUR.jws.IntDate.intDate2UTCString = function (a) {
	  var b = new Date(a * 1000);return b.toUTCString();
	};KJUR.jws.IntDate.intDate2Zulu = function (e) {
	  var i = new Date(e * 1000),
	      h = ("0000" + i.getUTCFullYear()).slice(-4),
	      g = ("00" + (i.getUTCMonth() + 1)).slice(-2),
	      b = ("00" + i.getUTCDate()).slice(-2),
	      a = ("00" + i.getUTCHours()).slice(-2),
	      c = ("00" + i.getUTCMinutes()).slice(-2),
	      f = ("00" + i.getUTCSeconds()).slice(-2);return h + g + b + a + c + f + "Z";
	};
	exports.SecureRandom = SecureRandom;
	exports.rng_seed_time = rng_seed_time;
	
	exports.BigInteger = BigInteger;
	exports.RSAKey = RSAKey;
	exports.ECDSA = KJUR.crypto.ECDSA;
	exports.DSA = KJUR.crypto.DSA;
	exports.Signature = KJUR.crypto.Signature;
	exports.MessageDigest = KJUR.crypto.MessageDigest;
	exports.Mac = KJUR.crypto.Mac;
	exports.Cipher = KJUR.crypto.Cipher;
	exports.KEYUTIL = KEYUTIL;
	exports.ASN1HEX = ASN1HEX;
	exports.X509 = X509;
	exports.CryptoJS = CryptoJS;
	
	// ext/base64.js
	exports.b64tohex = b64tohex;
	exports.b64toBA = b64toBA;
	
	// base64x.js
	exports.stoBA = stoBA;
	exports.BAtos = BAtos;
	exports.BAtohex = BAtohex;
	exports.stohex = stohex;
	exports.stob64 = stob64;
	exports.stob64u = stob64u;
	exports.b64utos = b64utos;
	exports.b64tob64u = b64tob64u;
	exports.b64utob64 = b64utob64;
	exports.hex2b64 = hex2b64;
	exports.hextob64u = hextob64u;
	exports.b64utohex = b64utohex;
	exports.utf8tob64u = utf8tob64u;
	exports.b64utoutf8 = b64utoutf8;
	exports.utf8tob64 = utf8tob64;
	exports.b64toutf8 = b64toutf8;
	exports.utf8tohex = utf8tohex;
	exports.hextoutf8 = hextoutf8;
	exports.hextorstr = hextorstr;
	exports.rstrtohex = rstrtohex;
	exports.hextob64 = hextob64;
	exports.hextob64nl = hextob64nl;
	exports.b64nltohex = b64nltohex;
	exports.hextopem = hextopem;
	exports.pemtohex = pemtohex;
	exports.hextoArrayBuffer = hextoArrayBuffer;
	exports.ArrayBuffertohex = ArrayBuffertohex;
	exports.zulutomsec = zulutomsec;
	exports.zulutosec = zulutosec;
	exports.zulutodate = zulutodate;
	exports.datetozulu = datetozulu;
	exports.uricmptohex = uricmptohex;
	exports.hextouricmp = hextouricmp;
	exports.ipv6tohex = ipv6tohex;
	exports.hextoipv6 = hextoipv6;
	exports.hextoip = hextoip;
	exports.iptohex = iptohex;
	exports.encodeURIComponentAll = encodeURIComponentAll;
	exports.newline_toUnix = newline_toUnix;
	exports.newline_toDos = newline_toDos;
	exports.hextoposhex = hextoposhex;
	exports.intarystrtohex = intarystrtohex;
	exports.strdiffidx = strdiffidx;
	
	// name spaces
	exports.KJUR = KJUR;
	exports.crypto = KJUR.crypto;
	exports.asn1 = KJUR.asn1;
	exports.jws = KJUR.jws;
	exports.lang = KJUR.lang;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))

/***/ }),
/* 13 */
/***/ (function(module, exports) {



/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _UrlUtility = __webpack_require__(15);
	
	var _UrlUtility2 = _interopRequireDefault(_UrlUtility);
	
	var _SigninState = __webpack_require__(16);
	
	var _SigninState2 = _interopRequireDefault(_SigninState);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SigninRequest = function () {
	    function SigninRequest(_ref) {
	        var url = _ref.url,
	            client_id = _ref.client_id,
	            redirect_uri = _ref.redirect_uri,
	            response_type = _ref.response_type,
	            scope = _ref.scope,
	            authority = _ref.authority,
	            data = _ref.data,
	            prompt = _ref.prompt,
	            display = _ref.display,
	            max_age = _ref.max_age,
	            ui_locales = _ref.ui_locales,
	            id_token_hint = _ref.id_token_hint,
	            login_hint = _ref.login_hint,
	            acr_values = _ref.acr_values,
	            resource = _ref.resource,
	            request = _ref.request,
	            request_uri = _ref.request_uri,
	            extraQueryParams = _ref.extraQueryParams;
	
	        _classCallCheck(this, SigninRequest);
	
	        if (!url) {
	            _Log2.default.error("No url passed to SigninRequest");
	            throw new Error("url");
	        }
	        if (!client_id) {
	            _Log2.default.error("No client_id passed to SigninRequest");
	            throw new Error("client_id");
	        }
	        if (!redirect_uri) {
	            _Log2.default.error("No redirect_uri passed to SigninRequest");
	            throw new Error("redirect_uri");
	        }
	        if (!response_type) {
	            _Log2.default.error("No response_type passed to SigninRequest");
	            throw new Error("response_type");
	        }
	        if (!scope) {
	            _Log2.default.error("No scope passed to SigninRequest");
	            throw new Error("scope");
	        }
	        if (!authority) {
	            _Log2.default.error("No authority passed to SigninRequest");
	            throw new Error("authority");
	        }
	
	        var oidc = SigninRequest.isOidc(response_type);
	        this.state = new _SigninState2.default({ nonce: oidc, data: data, client_id: client_id, authority: authority });
	
	        url = _UrlUtility2.default.addQueryParam(url, "client_id", client_id);
	        url = _UrlUtility2.default.addQueryParam(url, "redirect_uri", redirect_uri);
	        url = _UrlUtility2.default.addQueryParam(url, "response_type", response_type);
	        url = _UrlUtility2.default.addQueryParam(url, "scope", scope);
	
	        url = _UrlUtility2.default.addQueryParam(url, "state", this.state.id);
	        if (oidc) {
	            url = _UrlUtility2.default.addQueryParam(url, "nonce", this.state.nonce);
	        }
	
	        var optional = { prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values, resource: resource, request: request, request_uri: request_uri };
	        for (var key in optional) {
	            if (optional[key]) {
	                url = _UrlUtility2.default.addQueryParam(url, key, optional[key]);
	            }
	        }
	
	        for (var _key in extraQueryParams) {
	            url = _UrlUtility2.default.addQueryParam(url, _key, extraQueryParams[_key]);
	        }
	
	        this.url = url;
	    }
	
	    SigninRequest.isOidc = function isOidc(response_type) {
	        var result = response_type.split(/\s+/g).filter(function (item) {
	            return item === "id_token";
	        });
	        return !!result[0];
	    };
	
	    SigninRequest.isOAuth = function isOAuth(response_type) {
	        var result = response_type.split(/\s+/g).filter(function (item) {
	            return item === "token";
	        });
	        return !!result[0];
	    };
	
	    return SigninRequest;
	}();
	
	exports.default = SigninRequest;
	module.exports = exports['default'];

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UrlUtility = function () {
	    function UrlUtility() {
	        _classCallCheck(this, UrlUtility);
	    }
	
	    UrlUtility.addQueryParam = function addQueryParam(url, name, value) {
	        if (url.indexOf('?') < 0) {
	            url += "?";
	        }
	
	        if (url[url.length - 1] !== "?") {
	            url += "&";
	        }
	
	        url += encodeURIComponent(name);
	        url += "=";
	        url += encodeURIComponent(value);
	
	        return url;
	    };
	
	    UrlUtility.parseUrlFragment = function parseUrlFragment(value) {
	        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";
	        var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global2.default;
	
	        _Log2.default.debug("UrlUtility.parseUrlFragment");
	
	        if (typeof value !== 'string') {
	            value = global.location.href;
	        }
	
	        var idx = value.lastIndexOf(delimiter);
	        if (idx >= 0) {
	            value = value.substr(idx + 1);
	        }
	
	        var params = {},
	            regex = /([^&=]+)=([^&]*)/g,
	            m;
	
	        var counter = 0;
	        while (m = regex.exec(value)) {
	            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
	            if (counter++ > 50) {
	                _Log2.default.error("response exceeded expected number of parameters", value);
	                return {
	                    error: "Response exceeded expected number of parameters"
	                };
	            }
	        }
	
	        for (var prop in params) {
	            return params;
	        }
	
	        return {};
	    };
	
	    return UrlUtility;
	}();
	
	exports.default = UrlUtility;
	module.exports = exports['default'];

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _State2 = __webpack_require__(17);
	
	var _State3 = _interopRequireDefault(_State2);
	
	var _random = __webpack_require__(18);
	
	var _random2 = _interopRequireDefault(_random);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SigninState = function (_State) {
	    _inherits(SigninState, _State);
	
	    function SigninState() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            nonce = _ref.nonce,
	            authority = _ref.authority,
	            client_id = _ref.client_id;
	
	        _classCallCheck(this, SigninState);
	
	        var _this = _possibleConstructorReturn(this, _State.call(this, arguments[0]));
	
	        if (nonce === true) {
	            _this._nonce = (0, _random2.default)();
	        } else if (nonce) {
	            _this._nonce = nonce;
	        }
	
	        _this._authority = authority;
	        _this._client_id = client_id;
	        return _this;
	    }
	
	    SigninState.prototype.toStorageString = function toStorageString() {
	        _Log2.default.debug("SigninState.toStorageString");
	        return JSON.stringify({
	            id: this.id,
	            data: this.data,
	            created: this.created,
	            nonce: this.nonce,
	            authority: this.authority,
	            client_id: this.client_id
	        });
	    };
	
	    SigninState.fromStorageString = function fromStorageString(storageString) {
	        _Log2.default.debug("SigninState.fromStorageString");
	        var data = JSON.parse(storageString);
	        return new SigninState(data);
	    };
	
	    _createClass(SigninState, [{
	        key: 'nonce',
	        get: function get() {
	            return this._nonce;
	        }
	    }, {
	        key: 'authority',
	        get: function get() {
	            return this._authority;
	        }
	    }, {
	        key: 'client_id',
	        get: function get() {
	            return this._client_id;
	        }
	    }]);
	
	    return SigninState;
	}(_State3.default);
	
	exports.default = SigninState;
	module.exports = exports['default'];

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _random = __webpack_require__(18);
	
	var _random2 = _interopRequireDefault(_random);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var State = function () {
	    function State() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            id = _ref.id,
	            data = _ref.data,
	            created = _ref.created;
	
	        _classCallCheck(this, State);
	
	        this._id = id || (0, _random2.default)();
	        this._data = data;
	
	        if (typeof created === 'number' && created > 0) {
	            this._created = created;
	        } else {
	            this._created = parseInt(Date.now() / 1000);
	        }
	    }
	
	    State.prototype.toStorageString = function toStorageString() {
	        _Log2.default.debug("State.toStorageString");
	        return JSON.stringify({
	            id: this.id,
	            data: this.data,
	            created: this.created
	        });
	    };
	
	    State.fromStorageString = function fromStorageString(storageString) {
	        _Log2.default.debug("State.fromStorageString");
	        return new State(JSON.parse(storageString));
	    };
	
	    State.clearStaleState = function clearStaleState(storage, age) {
	        _Log2.default.debug("State.clearStaleState");
	
	        var cutoff = Date.now() / 1000 - age;
	
	        return storage.getAllKeys().then(function (keys) {
	            _Log2.default.debug("got keys", keys);
	
	            var promises = [];
	
	            var _loop = function _loop(i) {
	                var key = keys[i];
	                p = storage.get(key).then(function (item) {
	                    var remove = false;
	
	                    if (item) {
	                        try {
	                            var state = State.fromStorageString(item);
	
	                            _Log2.default.debug("got item from key: ", key, state.created);
	
	                            if (state.created <= cutoff) {
	                                remove = true;
	                            }
	                        } catch (e) {
	                            _Log2.default.error("Error parsing state for key", key, e.message);
	                            remove = true;
	                        }
	                    } else {
	                        _Log2.default.debug("no item in storage for key: ", key);
	                        remove = true;
	                    }
	
	                    if (remove) {
	                        _Log2.default.debug("removed item for key: ", key);
	                        return storage.remove(key);
	                    }
	                });
	
	
	                promises.push(p);
	            };
	
	            for (var i = 0; i < keys.length; i++) {
	                var p;
	
	                _loop(i);
	            }
	
	            _Log2.default.debug("waiting on promise count:", promises.length);
	            return Promise.all(promises);
	        });
	    };
	
	    _createClass(State, [{
	        key: 'id',
	        get: function get() {
	            return this._id;
	        }
	    }, {
	        key: 'data',
	        get: function get() {
	            return this._data;
	        }
	    }, {
	        key: 'created',
	        get: function get() {
	            return this._created;
	        }
	    }]);
	
	    return State;
	}();
	
	exports.default = State;
	module.exports = exports['default'];

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = random;
	// NOTICE: the code in this file originally developed by Microsoft
	// original source: https://github.com/AzureAD/azure-activedirectory-library-for-js/blob/master/lib/adal.js#L1029
	//----------------------------------------------------------------------
	// AdalJS v1.0.8
	// @preserve Copyright (c) Microsoft Open Technologies, Inc.
	// All Rights Reserved
	// Apache License 2.0
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	//----------------------------------------------------------------------
	
	function random() {
	    var guidHolder = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx';
	    var hex = '0123456789abcdef';
	    var r = 0;
	    var guidResponse = "";
	    for (var i = 0; i < guidHolder.length; i++) {
	        if (guidHolder[i] !== '-' && guidHolder[i] !== '4') {
	            // each x and y needs to be random
	            r = Math.random() * 16 | 0;
	        }
	
	        if (guidHolder[i] === 'x') {
	            guidResponse += hex[r];
	        } else if (guidHolder[i] === 'y') {
	            // clock-seq-and-reserved first hex is filtered and remaining hex values are random
	            r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
	            r |= 0x8; // set pos 3 to 1 as 1???
	            guidResponse += hex[r];
	        } else {
	            guidResponse += guidHolder[i];
	        }
	    }
	    return guidResponse;
	}
	module.exports = exports['default'];

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _UrlUtility = __webpack_require__(15);
	
	var _UrlUtility2 = _interopRequireDefault(_UrlUtility);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcScope = "openid";
	
	var SigninResponse = function () {
	    function SigninResponse(url) {
	        _classCallCheck(this, SigninResponse);
	
	        var values = _UrlUtility2.default.parseUrlFragment(url, "#");
	
	        this.error = values.error;
	        this.error_description = values.error_description;
	        this.error_uri = values.error_uri;
	
	        this.state = values.state;
	        this.id_token = values.id_token;
	        this.session_state = values.session_state;
	        this.access_token = values.access_token;
	        this.token_type = values.token_type;
	        this.scope = values.scope;
	        this.profile = undefined; // will be set from ResponseValidator
	
	        var expires_in = parseInt(values.expires_in);
	        if (typeof expires_in === 'number' && expires_in > 0) {
	            var now = parseInt(Date.now() / 1000);
	            this.expires_at = now + expires_in;
	        }
	    }
	
	    _createClass(SigninResponse, [{
	        key: "expires_in",
	        get: function get() {
	            if (this.expires_at) {
	                var now = parseInt(Date.now() / 1000);
	                return this.expires_at - now;
	            }
	            return undefined;
	        }
	    }, {
	        key: "expired",
	        get: function get() {
	            var expires_in = this.expires_in;
	            if (expires_in !== undefined) {
	                return expires_in <= 0;
	            }
	            return undefined;
	        }
	    }, {
	        key: "scopes",
	        get: function get() {
	            return (this.scope || "").split(" ");
	        }
	    }, {
	        key: "isOpenIdConnect",
	        get: function get() {
	            return this.scopes.indexOf(OidcScope) >= 0 || !!this.id_token;
	        }
	    }]);
	
	    return SigninResponse;
	}();
	
	exports.default = SigninResponse;
	module.exports = exports['default'];

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _UrlUtility = __webpack_require__(15);
	
	var _UrlUtility2 = _interopRequireDefault(_UrlUtility);
	
	var _State = __webpack_require__(17);
	
	var _State2 = _interopRequireDefault(_State);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SignoutRequest = function SignoutRequest(_ref) {
	    var url = _ref.url,
	        id_token_hint = _ref.id_token_hint,
	        post_logout_redirect_uri = _ref.post_logout_redirect_uri,
	        data = _ref.data;
	
	    _classCallCheck(this, SignoutRequest);
	
	    if (!url) {
	        _Log2.default.error("No url passed to SignoutRequest");
	        throw new Error("url");
	    }
	
	    if (id_token_hint) {
	        url = _UrlUtility2.default.addQueryParam(url, "id_token_hint", id_token_hint);
	    }
	
	    if (post_logout_redirect_uri) {
	        url = _UrlUtility2.default.addQueryParam(url, "post_logout_redirect_uri", post_logout_redirect_uri);
	
	        if (data) {
	            this.state = new _State2.default({ data: data });
	
	            url = _UrlUtility2.default.addQueryParam(url, "state", this.state.id);
	        }
	    }
	
	    this.url = url;
	};
	
	exports.default = SignoutRequest;
	module.exports = exports['default'];

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	        value: true
	});
	
	var _UrlUtility = __webpack_require__(15);
	
	var _UrlUtility2 = _interopRequireDefault(_UrlUtility);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SignoutResponse = function SignoutResponse(url) {
	        _classCallCheck(this, SignoutResponse);
	
	        var values = _UrlUtility2.default.parseUrlFragment(url, "?");
	
	        this.error = values.error;
	        this.error_description = values.error_description;
	        this.error_uri = values.error_uri;
	
	        this.state = values.state;
	};
	
	exports.default = SignoutResponse;
	module.exports = exports['default'];

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var InMemoryWebStorage = function () {
	    function InMemoryWebStorage() {
	        _classCallCheck(this, InMemoryWebStorage);
	
	        this._data = {};
	    }
	
	    InMemoryWebStorage.prototype.getItem = function getItem(key) {
	        _Log2.default.debug("InMemoryWebStorage.getItem", key);
	        return this._data[key];
	    };
	
	    InMemoryWebStorage.prototype.setItem = function setItem(key, value) {
	        _Log2.default.debug("InMemoryWebStorage.setItem", key);
	        this._data[key] = value;
	    };
	
	    InMemoryWebStorage.prototype.removeItem = function removeItem(key) {
	        _Log2.default.debug("InMemoryWebStorage.removeItem", key);
	        delete this._data[key];
	    };
	
	    InMemoryWebStorage.prototype.key = function key(index) {
	        return Object.getOwnPropertyNames(this._data)[index];
	    };
	
	    _createClass(InMemoryWebStorage, [{
	        key: "length",
	        get: function get() {
	            return Object.getOwnPropertyNames(this._data).length;
	        }
	    }]);
	
	    return InMemoryWebStorage;
	}();
	
	exports.default = InMemoryWebStorage;
	module.exports = exports['default'];

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _OidcClient2 = __webpack_require__(2);
	
	var _OidcClient3 = _interopRequireDefault(_OidcClient2);
	
	var _UserManagerSettings = __webpack_require__(24);
	
	var _UserManagerSettings2 = _interopRequireDefault(_UserManagerSettings);
	
	var _User = __webpack_require__(30);
	
	var _User2 = _interopRequireDefault(_User);
	
	var _UserManagerEvents = __webpack_require__(31);
	
	var _UserManagerEvents2 = _interopRequireDefault(_UserManagerEvents);
	
	var _SilentRenewService = __webpack_require__(35);
	
	var _SilentRenewService2 = _interopRequireDefault(_SilentRenewService);
	
	var _SessionMonitor = __webpack_require__(36);
	
	var _SessionMonitor2 = _interopRequireDefault(_SessionMonitor);
	
	var _TokenRevocationClient = __webpack_require__(38);
	
	var _TokenRevocationClient2 = _interopRequireDefault(_TokenRevocationClient);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UserManager = function (_OidcClient) {
	    _inherits(UserManager, _OidcClient);
	
	    function UserManager() {
	        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var SilentRenewServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _SilentRenewService2.default;
	        var SessionMonitorCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _SessionMonitor2.default;
	        var TokenRevocationClientCtor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _TokenRevocationClient2.default;
	
	        _classCallCheck(this, UserManager);
	
	        if (!(settings instanceof _UserManagerSettings2.default)) {
	            settings = new _UserManagerSettings2.default(settings);
	        }
	
	        var _this = _possibleConstructorReturn(this, _OidcClient.call(this, settings));
	
	        _this._events = new _UserManagerEvents2.default(settings);
	        _this._silentRenewService = new SilentRenewServiceCtor(_this);
	
	        // order is important for the following properties; these services depend upon the events.
	        if (_this.settings.automaticSilentRenew) {
	            _Log2.default.debug("automaticSilentRenew is configured, setting up silent renew");
	            _this.startSilentRenew();
	        }
	
	        if (_this.settings.monitorSession) {
	            _Log2.default.debug("monitorSession is configured, setting up session monitor");
	            _this._sessionMonitor = new SessionMonitorCtor(_this);
	        }
	
	        _this._tokenRevocationClient = new TokenRevocationClientCtor(_this._settings);
	        return _this;
	    }
	
	    UserManager.prototype.getUser = function getUser() {
	        var _this2 = this;
	
	        _Log2.default.debug("UserManager.getUser");
	
	        return this._loadUser().then(function (user) {
	            if (user) {
	                _Log2.default.info("user loaded");
	
	                _this2._events.load(user, false);
	
	                return user;
	            } else {
	                _Log2.default.info("user not found in storage");
	                return null;
	            }
	        });
	    };
	
	    UserManager.prototype.removeUser = function removeUser() {
	        var _this3 = this;
	
	        _Log2.default.debug("UserManager.removeUser");
	
	        return this.storeUser(null).then(function () {
	            _Log2.default.info("user removed from storage");
	            _this3._events.unload();
	        });
	    };
	
	    UserManager.prototype.signinRedirect = function signinRedirect(args) {
	        _Log2.default.debug("UserManager.signinRedirect");
	        return this._signinStart(args, this._redirectNavigator).then(function () {
	            _Log2.default.info("signinRedirect successful");
	        });
	    };
	
	    UserManager.prototype.signinRedirectCallback = function signinRedirectCallback(url) {
	        _Log2.default.debug("UserManager.signinRedirectCallback");
	        return this._signinEnd(url || this._redirectNavigator.url).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log2.default.info("signinRedirectCallback successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log2.default.info("signinRedirectCallback successful");
	                }
	            }
	
	            return user;
	        });
	    };
	
	    UserManager.prototype.signinPopup = function signinPopup() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _Log2.default.debug("UserManager.signinPopup");
	
	        var url = args.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;
	        if (!url) {
	            _Log2.default.error("No popup_redirect_uri or redirect_uri configured");
	            return Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured"));
	        }
	
	        args.redirect_uri = url;
	        args.display = "popup";
	
	        return this._signin(args, this._popupNavigator, {
	            startUrl: url,
	            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
	            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
	        }).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log2.default.info("signinPopup successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log2.default.info("signinPopup successful");
	                }
	            }
	
	            return user;
	        });
	    };
	
	    UserManager.prototype.signinPopupCallback = function signinPopupCallback(url) {
	        _Log2.default.debug("UserManager.signinPopupCallback");
	        return this._signinCallback(url, this._popupNavigator).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log2.default.info("signinPopupCallback successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log2.default.info("signinPopupCallback successful");
	                }
	            }
	
	            return user;
	        });
	    };
	
	    UserManager.prototype.signinSilent = function signinSilent() {
	        var _this4 = this;
	
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _Log2.default.debug("UserManager.signinSilent");
	
	        var url = args.redirect_uri || this.settings.silent_redirect_uri;
	        if (!url) {
	            _Log2.default.error("No silent_redirect_uri configured");
	            return Promise.reject(new Error("No silent_redirect_uri configured"));
	        }
	
	        args.redirect_uri = url;
	        args.prompt = "none";
	
	        var setIdToken = void 0;
	        if (args.id_token_hint || !this.settings.includeIdTokenInSilentRenew) {
	            setIdToken = Promise.resolve();
	        } else {
	            setIdToken = this._loadUser().then(function (user) {
	                args.id_token_hint = user && user.id_token;
	            });
	        }
	
	        return setIdToken.then(function () {
	            return _this4._signin(args, _this4._iframeNavigator, {
	                startUrl: url,
	                silentRequestTimeout: args.silentRequestTimeout || _this4.settings.silentRequestTimeout
	            });
	        }).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log2.default.info("signinSilent successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log2.default.info("signinSilent successful");
	                }
	            }
	
	            return user;
	        });
	    };
	
	    UserManager.prototype.signinSilentCallback = function signinSilentCallback(url) {
	        _Log2.default.debug("UserManager.signinSilentCallback");
	        return this._signinCallback(url, this._iframeNavigator).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log2.default.info("signinSilentCallback successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log2.default.info("signinSilentCallback successful");
	                }
	            }
	
	            return user;
	        });
	    };
	
	    UserManager.prototype.querySessionStatus = function querySessionStatus() {
	        var _this5 = this;
	
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _Log2.default.debug("UserManager.querySessionStatus");
	
	        var url = args.redirect_uri || this.settings.silent_redirect_uri;
	        if (!url) {
	            _Log2.default.error("No silent_redirect_uri configured");
	            return Promise.reject(new Error("No silent_redirect_uri configured"));
	        }
	
	        args.redirect_uri = url;
	        args.prompt = "none";
	        args.response_type = "id_token";
	        args.scope = "openid";
	
	        return this._signinStart(args, this._iframeNavigator, {
	            startUrl: url,
	            silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
	        }).then(function (navResponse) {
	            return _this5.processSigninResponse(navResponse.url).then(function (signinResponse) {
	                _Log2.default.debug("got signin response");
	
	                if (signinResponse.session_state && signinResponse.profile.sub && signinResponse.profile.sid) {
	                    _Log2.default.info("querySessionStatus success for sub: ", signinResponse.profile.sub);
	                    return {
	                        session_state: signinResponse.session_state,
	                        sub: signinResponse.profile.sub,
	                        sid: signinResponse.profile.sid
	                    };
	                } else {
	                    _Log2.default.info("querySessionStatus successful, user not authenticated");
	                }
	            });
	        });
	    };
	
	    UserManager.prototype._signin = function _signin(args, navigator) {
	        var _this6 = this;
	
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _Log2.default.debug("_signin");
	        return this._signinStart(args, navigator, navigatorParams).then(function (navResponse) {
	            return _this6._signinEnd(navResponse.url);
	        });
	    };
	
	    UserManager.prototype._signinStart = function _signinStart(args, navigator) {
	        var _this7 = this;
	
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _Log2.default.debug("_signinStart");
	
	        return navigator.prepare(navigatorParams).then(function (handle) {
	            _Log2.default.debug("got navigator window handle");
	
	            return _this7.createSigninRequest(args).then(function (signinRequest) {
	                _Log2.default.debug("got signin request");
	
	                navigatorParams.url = signinRequest.url;
	                navigatorParams.id = signinRequest.state.id;
	
	                return handle.navigate(navigatorParams);
	            }).catch(function (err) {
	                if (handle.close) {
	                    _Log2.default.debug("Error after preparing navigator, closing navigator window");
	                    handle.close();
	                }
	                throw err;
	            });
	        });
	    };
	
	    UserManager.prototype._signinEnd = function _signinEnd(url) {
	        var _this8 = this;
	
	        _Log2.default.debug("_signinEnd");
	
	        return this.processSigninResponse(url).then(function (signinResponse) {
	            _Log2.default.debug("got signin response");
	
	            var user = new _User2.default(signinResponse);
	
	            return _this8.storeUser(user).then(function () {
	                _Log2.default.debug("user stored");
	
	                _this8._events.load(user);
	
	                return user;
	            });
	        });
	    };
	
	    UserManager.prototype._signinCallback = function _signinCallback(url, navigator) {
	        _Log2.default.debug("_signinCallback");
	        return navigator.callback(url);
	    };
	
	    UserManager.prototype.signoutRedirect = function signoutRedirect() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _Log2.default.debug("UserManager.signoutRedirect");
	        var postLogoutRedirectUri = args.post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
	        if (postLogoutRedirectUri) {
	            args.post_logout_redirect_uri = postLogoutRedirectUri;
	        }
	        return this._signoutStart(args, this._redirectNavigator).then(function () {
	            _Log2.default.info("signoutRedirect successful");
	        });
	    };
	
	    UserManager.prototype.signoutRedirectCallback = function signoutRedirectCallback(url) {
	        _Log2.default.debug("UserManager.signoutRedirectCallback");
	        return this._signoutEnd(url || this._redirectNavigator.url).then(function (response) {
	            _Log2.default.info("signoutRedirectCallback successful");
	            return response;
	        });
	    };
	
	    UserManager.prototype.signoutPopup = function signoutPopup() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _Log2.default.debug("UserManager.signinPopup");
	
	        var url = args.post_logout_redirect_uri || this.settings.popup_post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
	        args.post_logout_redirect_uri = url;
	        args.display = "popup";
	        if (args.post_logout_redirect_uri) {
	            // we're putting a dummy entry in here because we 
	            // need a unique id from the state for notification
	            // to the parent window, which is necessary if we
	            // plan to return back to the client after signout
	            // and so we can close the popup after signout
	            args.state = args.state || {};
	        }
	
	        return this._signout(args, this._popupNavigator, {
	            startUrl: url,
	            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
	            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
	        }).then(function () {
	            _Log2.default.info("signoutPopup successful");
	        });
	    };
	
	    UserManager.prototype.signoutPopupCallback = function signoutPopupCallback(url, keepOpen) {
	        if (typeof keepOpen === 'undefined' && typeof url === 'boolean') {
	            url = null;
	            keepOpen = true;
	        }
	        _Log2.default.debug("UserManager.signoutPopupCallback");
	        var delimiter = '?';
	        return this._popupNavigator.callback(url, keepOpen, delimiter).then(function () {
	            _Log2.default.info("signoutPopupCallback successful");
	        });
	    };
	
	    UserManager.prototype._signout = function _signout(args, navigator) {
	        var _this9 = this;
	
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _Log2.default.debug("_signout");
	        return this._signoutStart(args, navigator, navigatorParams).then(function (navResponse) {
	            return _this9._signoutEnd(navResponse.url);
	        });
	    };
	
	    UserManager.prototype._signoutStart = function _signoutStart() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var _this10 = this;
	
	        var navigator = arguments[1];
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _Log2.default.debug("_signoutStart");
	
	        return navigator.prepare(navigatorParams).then(function (handle) {
	            _Log2.default.debug("got navigator window handle");
	
	            return _this10._loadUser().then(function (user) {
	                _Log2.default.debug("loaded current user from storage");
	
	                var revokePromise = _this10._settings.revokeAccessTokenOnSignout ? _this10._revokeInternal(user) : Promise.resolve();
	                return revokePromise.then(function () {
	
	                    var id_token = args.id_token_hint || user && user.id_token;
	                    if (id_token) {
	                        _Log2.default.debug("Setting id_token into signout request");
	                        args.id_token_hint = id_token;
	                    }
	
	                    return _this10.removeUser().then(function () {
	                        _Log2.default.debug("user removed, creating signout request");
	
	                        return _this10.createSignoutRequest(args).then(function (signoutRequest) {
	                            _Log2.default.debug("got signout request");
	
	                            navigatorParams.url = signoutRequest.url;
	                            if (signoutRequest.state) {
	                                navigatorParams.id = signoutRequest.state.id;
	                            }
	                            return handle.navigate(navigatorParams);
	                        });
	                    });
	                });
	            }).catch(function (err) {
	                if (handle.close) {
	                    _Log2.default.debug("Error after preparing navigator, closing navigator window");
	                    handle.close();
	                }
	                throw err;
	            });
	        });
	    };
	
	    UserManager.prototype._signoutEnd = function _signoutEnd(url) {
	        _Log2.default.debug("_signoutEnd");
	
	        return this.processSignoutResponse(url).then(function (signoutResponse) {
	            _Log2.default.debug("got signout response");
	
	            return signoutResponse;
	        });
	    };
	
	    UserManager.prototype.revokeAccessToken = function revokeAccessToken() {
	        var _this11 = this;
	
	        _Log2.default.debug("UserManager.revokeAccessToken");
	
	        return this._loadUser().then(function (user) {
	            return _this11._revokeInternal(user, true).then(function (success) {
	                if (success) {
	                    _Log2.default.debug("removing token properties from user and re-storing");
	
	                    user.access_token = null;
	                    user.expires_at = null;
	                    user.token_type = null;
	
	                    return _this11.storeUser(user).then(function () {
	                        _Log2.default.debug("user stored");
	                        _this11._events.load(user);
	                    });
	                }
	            });
	        }).then(function () {
	            _Log2.default.info("access token revoked successfully");
	        });
	    };
	
	    UserManager.prototype._revokeInternal = function _revokeInternal(user, required) {
	        _Log2.default.debug("checking if token revocation is necessary");
	
	        var access_token = user && user.access_token;
	
	        // check for JWT vs. reference token
	        if (!access_token || access_token.indexOf('.') >= 0) {
	            _Log2.default.debug("no need to revoke due to no user, token, or JWT format");
	            return Promise.resolve(false);
	        }
	
	        return this._tokenRevocationClient.revoke(access_token, required).then(function () {
	            return true;
	        });
	    };
	
	    UserManager.prototype.startSilentRenew = function startSilentRenew() {
	        this._silentRenewService.start();
	    };
	
	    UserManager.prototype.stopSilentRenew = function stopSilentRenew() {
	        this._silentRenewService.stop();
	    };
	
	    UserManager.prototype._loadUser = function _loadUser() {
	        _Log2.default.debug("_loadUser");
	
	        return this._userStore.get(this._userStoreKey).then(function (storageString) {
	            if (storageString) {
	                _Log2.default.debug("user storageString loaded");
	                return _User2.default.fromStorageString(storageString);
	            }
	
	            _Log2.default.debug("no user storageString");
	            return null;
	        });
	    };
	
	    UserManager.prototype.storeUser = function storeUser(user) {
	        if (user) {
	            _Log2.default.debug("storeUser storing user");
	
	            var storageString = user.toStorageString();
	            return this._userStore.set(this._userStoreKey, storageString);
	        } else {
	            _Log2.default.debug("storeUser removing user storage");
	            return this._userStore.remove(this._userStoreKey);
	        }
	    };
	
	    _createClass(UserManager, [{
	        key: '_redirectNavigator',
	        get: function get() {
	            return this.settings.redirectNavigator;
	        }
	    }, {
	        key: '_popupNavigator',
	        get: function get() {
	            return this.settings.popupNavigator;
	        }
	    }, {
	        key: '_iframeNavigator',
	        get: function get() {
	            return this.settings.iframeNavigator;
	        }
	    }, {
	        key: '_userStore',
	        get: function get() {
	            return this.settings.userStore;
	        }
	    }, {
	        key: 'events',
	        get: function get() {
	            return this._events;
	        }
	    }, {
	        key: '_userStoreKey',
	        get: function get() {
	            return 'user:' + this.settings.authority + ':' + this.settings.client_id;
	        }
	    }]);
	
	    return UserManager;
	}(_OidcClient3.default);
	
	exports.default = UserManager;
	module.exports = exports['default'];

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _OidcClientSettings2 = __webpack_require__(3);
	
	var _OidcClientSettings3 = _interopRequireDefault(_OidcClientSettings2);
	
	var _RedirectNavigator = __webpack_require__(25);
	
	var _RedirectNavigator2 = _interopRequireDefault(_RedirectNavigator);
	
	var _PopupNavigator = __webpack_require__(26);
	
	var _PopupNavigator2 = _interopRequireDefault(_PopupNavigator);
	
	var _IFrameNavigator = __webpack_require__(28);
	
	var _IFrameNavigator2 = _interopRequireDefault(_IFrameNavigator);
	
	var _WebStorageStateStore = __webpack_require__(4);
	
	var _WebStorageStateStore2 = _interopRequireDefault(_WebStorageStateStore);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var DefaultAccessTokenExpiringNotificationTime = 60;
	var DefaultCheckSessionInterval = 2000;
	
	var UserManagerSettings = function (_OidcClientSettings) {
	    _inherits(UserManagerSettings, _OidcClientSettings);
	
	    function UserManagerSettings() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            popup_redirect_uri = _ref.popup_redirect_uri,
	            popup_post_logout_redirect_uri = _ref.popup_post_logout_redirect_uri,
	            popupWindowFeatures = _ref.popupWindowFeatures,
	            popupWindowTarget = _ref.popupWindowTarget,
	            silent_redirect_uri = _ref.silent_redirect_uri,
	            silentRequestTimeout = _ref.silentRequestTimeout,
	            _ref$automaticSilentR = _ref.automaticSilentRenew,
	            automaticSilentRenew = _ref$automaticSilentR === undefined ? false : _ref$automaticSilentR,
	            _ref$includeIdTokenIn = _ref.includeIdTokenInSilentRenew,
	            includeIdTokenInSilentRenew = _ref$includeIdTokenIn === undefined ? true : _ref$includeIdTokenIn,
	            _ref$monitorSession = _ref.monitorSession,
	            monitorSession = _ref$monitorSession === undefined ? true : _ref$monitorSession,
	            _ref$checkSessionInte = _ref.checkSessionInterval,
	            checkSessionInterval = _ref$checkSessionInte === undefined ? DefaultCheckSessionInterval : _ref$checkSessionInte,
	            _ref$revokeAccessToke = _ref.revokeAccessTokenOnSignout,
	            revokeAccessTokenOnSignout = _ref$revokeAccessToke === undefined ? false : _ref$revokeAccessToke,
	            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
	            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
	            _ref$redirectNavigato = _ref.redirectNavigator,
	            redirectNavigator = _ref$redirectNavigato === undefined ? new _RedirectNavigator2.default() : _ref$redirectNavigato,
	            _ref$popupNavigator = _ref.popupNavigator,
	            popupNavigator = _ref$popupNavigator === undefined ? new _PopupNavigator2.default() : _ref$popupNavigator,
	            _ref$iframeNavigator = _ref.iframeNavigator,
	            iframeNavigator = _ref$iframeNavigator === undefined ? new _IFrameNavigator2.default() : _ref$iframeNavigator,
	            _ref$userStore = _ref.userStore,
	            userStore = _ref$userStore === undefined ? new _WebStorageStateStore2.default({ store: _Global2.default.sessionStorage }) : _ref$userStore;
	
	        _classCallCheck(this, UserManagerSettings);
	
	        var _this = _possibleConstructorReturn(this, _OidcClientSettings.call(this, arguments[0]));
	
	        _this._popup_redirect_uri = popup_redirect_uri;
	        _this._popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;
	        _this._popupWindowFeatures = popupWindowFeatures;
	        _this._popupWindowTarget = popupWindowTarget;
	
	        _this._silent_redirect_uri = silent_redirect_uri;
	        _this._silentRequestTimeout = silentRequestTimeout;
	        _this._automaticSilentRenew = !!automaticSilentRenew;
	        _this._includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;
	        _this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;
	
	        _this._monitorSession = monitorSession;
	        _this._checkSessionInterval = checkSessionInterval;
	        _this._revokeAccessTokenOnSignout = revokeAccessTokenOnSignout;
	
	        _this._redirectNavigator = redirectNavigator;
	        _this._popupNavigator = popupNavigator;
	        _this._iframeNavigator = iframeNavigator;
	
	        _this._userStore = userStore;
	        return _this;
	    }
	
	    _createClass(UserManagerSettings, [{
	        key: 'popup_redirect_uri',
	        get: function get() {
	            return this._popup_redirect_uri;
	        }
	    }, {
	        key: 'popup_post_logout_redirect_uri',
	        get: function get() {
	            return this._popup_post_logout_redirect_uri;
	        }
	    }, {
	        key: 'popupWindowFeatures',
	        get: function get() {
	            return this._popupWindowFeatures;
	        }
	    }, {
	        key: 'popupWindowTarget',
	        get: function get() {
	            return this._popupWindowTarget;
	        }
	    }, {
	        key: 'silent_redirect_uri',
	        get: function get() {
	            return this._silent_redirect_uri;
	        }
	    }, {
	        key: 'silentRequestTimeout',
	        get: function get() {
	            return this._silentRequestTimeout;
	        }
	    }, {
	        key: 'automaticSilentRenew',
	        get: function get() {
	            return !!(this.silent_redirect_uri && this._automaticSilentRenew);
	        }
	    }, {
	        key: 'includeIdTokenInSilentRenew',
	        get: function get() {
	            return this._includeIdTokenInSilentRenew;
	        }
	    }, {
	        key: 'accessTokenExpiringNotificationTime',
	        get: function get() {
	            return this._accessTokenExpiringNotificationTime;
	        }
	    }, {
	        key: 'monitorSession',
	        get: function get() {
	            return this._monitorSession;
	        }
	    }, {
	        key: 'checkSessionInterval',
	        get: function get() {
	            return this._checkSessionInterval;
	        }
	    }, {
	        key: 'revokeAccessTokenOnSignout',
	        get: function get() {
	            return this._revokeAccessTokenOnSignout;
	        }
	    }, {
	        key: 'redirectNavigator',
	        get: function get() {
	            return this._redirectNavigator;
	        }
	    }, {
	        key: 'popupNavigator',
	        get: function get() {
	            return this._popupNavigator;
	        }
	    }, {
	        key: 'iframeNavigator',
	        get: function get() {
	            return this._iframeNavigator;
	        }
	    }, {
	        key: 'userStore',
	        get: function get() {
	            return this._userStore;
	        }
	    }]);
	
	    return UserManagerSettings;
	}(_OidcClientSettings3.default);
	
	exports.default = UserManagerSettings;
	module.exports = exports['default'];

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RedirectNavigator = function () {
	    function RedirectNavigator() {
	        _classCallCheck(this, RedirectNavigator);
	    }
	
	    RedirectNavigator.prototype.prepare = function prepare() {
	        return Promise.resolve(this);
	    };
	
	    RedirectNavigator.prototype.navigate = function navigate(params) {
	        _Log2.default.debug("RedirectNavigator.navigate");
	
	        if (!params || !params.url) {
	            _Log2.default.error("No url provided");
	            return Promise.reject(new Error("No url provided"));
	        }
	
	        window.location = params.url;
	
	        return Promise.resolve();
	    };
	
	    _createClass(RedirectNavigator, [{
	        key: "url",
	        get: function get() {
	            _Log2.default.debug("RedirectNavigator.url");
	            return window.location.href;
	        }
	    }]);
	
	    return RedirectNavigator;
	}();
	
	exports.default = RedirectNavigator;
	module.exports = exports['default'];

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _PopupWindow = __webpack_require__(27);
	
	var _PopupWindow2 = _interopRequireDefault(_PopupWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var PopupNavigator = function () {
	    function PopupNavigator() {
	        _classCallCheck(this, PopupNavigator);
	    }
	
	    PopupNavigator.prototype.prepare = function prepare(params) {
	        var popup = new _PopupWindow2.default(params);
	        return Promise.resolve(popup);
	    };
	
	    PopupNavigator.prototype.callback = function callback(url, keepOpen, delimiter) {
	        _Log2.default.debug("PopupNavigator.callback");
	
	        try {
	            _PopupWindow2.default.notifyOpener(url, keepOpen, delimiter);
	            return Promise.resolve();
	        } catch (e) {
	            return Promise.reject(e);
	        }
	    };
	
	    return PopupNavigator;
	}();
	
	exports.default = PopupNavigator;
	module.exports = exports['default'];

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _UrlUtility = __webpack_require__(15);
	
	var _UrlUtility2 = _interopRequireDefault(_UrlUtility);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CheckForPopupClosedInterval = 500;
	var DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;';
	//const DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;resizable=yes';
	
	var DefaultPopupTarget = "_blank";
	
	var PopupWindow = function () {
	    function PopupWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, PopupWindow);
	
	        _Log2.default.debug("PopupWindow.ctor");
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        var target = params.popupWindowTarget || DefaultPopupTarget;
	        var features = params.popupWindowFeatures || DefaultPopupFeatures;
	
	        this._popup = window.open('', target, features);
	        if (this._popup) {
	            _Log2.default.debug("popup successfully created");
	            this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), CheckForPopupClosedInterval);
	        }
	    }
	
	    PopupWindow.prototype.navigate = function navigate(params) {
	        _Log2.default.debug("PopupWindow.navigate");
	
	        if (!this._popup) {
	            this._error("Error opening popup window");
	        } else if (!params || !params.url) {
	            this._error("No url provided");
	        } else {
	            _Log2.default.debug("Setting URL in popup");
	
	            this._id = params.id;
	            if (this._id) {
	                window["popupCallback_" + params.id] = this._callback.bind(this);
	            }
	
	            this._popup.focus();
	            this._popup.window.location = params.url;
	        }
	
	        return this.promise;
	    };
	
	    PopupWindow.prototype._success = function _success(data) {
	        this._cleanup();
	
	        _Log2.default.debug("Successful response from popup window");
	        this._resolve(data);
	    };
	
	    PopupWindow.prototype._error = function _error(message) {
	        this._cleanup();
	
	        _Log2.default.error(message);
	        this._reject(new Error(message));
	    };
	
	    PopupWindow.prototype.close = function close() {
	        this._cleanup(false);
	    };
	
	    PopupWindow.prototype._cleanup = function _cleanup(keepOpen) {
	        _Log2.default.debug("PopupWindow._cleanup");
	
	        window.clearInterval(this._checkForPopupClosedTimer);
	        this._checkForPopupClosedTimer = null;
	
	        delete window["popupCallback_" + this._id];
	
	        if (this._popup && !keepOpen) {
	            this._popup.close();
	        }
	        this._popup = null;
	    };
	
	    PopupWindow.prototype._checkForPopupClosed = function _checkForPopupClosed() {
	        _Log2.default.debug("PopupWindow._checkForPopupClosed");
	
	        if (!this._popup || this._popup.closed) {
	            this._error("Popup window closed");
	        }
	    };
	
	    PopupWindow.prototype._callback = function _callback(url, keepOpen) {
	        _Log2.default.debug("PopupWindow._callback");
	
	        this._cleanup(keepOpen);
	
	        if (url) {
	            this._success({ url: url });
	        } else {
	            this._error("Invalid response from popup");
	        }
	    };
	
	    PopupWindow.notifyOpener = function notifyOpener(url, keepOpen, delimiter) {
	        _Log2.default.debug("PopupWindow.notifyOpener");
	
	        if (window.opener) {
	            url = url || window.location.href;
	            if (url) {
	
	                var data = _UrlUtility2.default.parseUrlFragment(url, delimiter);
	
	                if (data.state) {
	                    var name = "popupCallback_" + data.state;
	                    var callback = window.opener[name];
	                    if (callback) {
	                        _Log2.default.debug("passing url message to opener");
	                        callback(url, keepOpen);
	                    } else {
	                        _Log2.default.warn("no matching callback found on opener");
	                    }
	                } else {
	                    _Log2.default.warn("no state found in response url");
	                }
	            }
	        }
	    };
	
	    _createClass(PopupWindow, [{
	        key: 'promise',
	        get: function get() {
	            return this._promise;
	        }
	    }]);
	
	    return PopupWindow;
	}();
	
	exports.default = PopupWindow;
	module.exports = exports['default'];

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _IFrameWindow = __webpack_require__(29);
	
	var _IFrameWindow2 = _interopRequireDefault(_IFrameWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var IFrameNavigator = function () {
	    function IFrameNavigator() {
	        _classCallCheck(this, IFrameNavigator);
	    }
	
	    IFrameNavigator.prototype.prepare = function prepare(params) {
	        var frame = new _IFrameWindow2.default(params);
	        return Promise.resolve(frame);
	    };
	
	    IFrameNavigator.prototype.callback = function callback(url) {
	        _Log2.default.debug("IFrameNavigator.callback");
	
	        try {
	            _IFrameWindow2.default.notifyParent(url);
	            return Promise.resolve();
	        } catch (e) {
	            return Promise.reject(e);
	        }
	    };
	
	    return IFrameNavigator;
	}();
	
	exports.default = IFrameNavigator;
	module.exports = exports['default'];

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DefaultTimeout = 10000;
	
	var IFrameWindow = function () {
	    function IFrameWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, IFrameWindow);
	
	        _Log2.default.debug("IFrameWindow.ctor");
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        this._boundMessageEvent = this._message.bind(this);
	        window.addEventListener("message", this._boundMessageEvent, false);
	
	        this._frame = window.document.createElement("iframe");
	
	        // shotgun approach
	        this._frame.style.visibility = "hidden";
	        this._frame.style.position = "absolute";
	        this._frame.style.display = "none";
	        this._frame.style.width = 0;
	        this._frame.style.height = 0;
	
	        window.document.body.appendChild(this._frame);
	    }
	
	    IFrameWindow.prototype.navigate = function navigate(params) {
	        _Log2.default.debug("IFrameWindow.navigate");
	
	        if (!params || !params.url) {
	            this._error("No url provided");
	        } else {
	            var timeout = params.silentRequestTimeout || DefaultTimeout;
	            _Log2.default.debug("Using timeout of:", timeout);
	            this._timer = window.setTimeout(this._timeout.bind(this), timeout);
	            this._frame.src = params.url;
	        }
	
	        return this.promise;
	    };
	
	    IFrameWindow.prototype._success = function _success(data) {
	        this._cleanup();
	
	        _Log2.default.debug("Successful response from frame window");
	        this._resolve(data);
	    };
	
	    IFrameWindow.prototype._error = function _error(message) {
	        this._cleanup();
	
	        _Log2.default.error(message);
	        this._reject(new Error(message));
	    };
	
	    IFrameWindow.prototype.close = function close() {
	        this._cleanup();
	    };
	
	    IFrameWindow.prototype._cleanup = function _cleanup() {
	        if (this._frame) {
	            _Log2.default.debug("IFrameWindow._cleanup");
	
	            window.removeEventListener("message", this._boundMessageEvent, false);
	            window.clearTimeout(this._timer);
	            window.document.body.removeChild(this._frame);
	
	            this._timer = null;
	            this._frame = null;
	            this._boundMessageEvent = null;
	        }
	    };
	
	    IFrameWindow.prototype._timeout = function _timeout() {
	        _Log2.default.debug("IFrameWindow._timeout");
	        this._error("Frame window timed out");
	    };
	
	    IFrameWindow.prototype._message = function _message(e) {
	        _Log2.default.debug("IFrameWindow._message");
	
	        if (this._timer && e.origin === this._origin && e.source === this._frame.contentWindow) {
	            var url = e.data;
	            if (url) {
	                this._success({ url: url });
	            } else {
	                this._error("Invalid response from frame");
	            }
	        }
	    };
	
	    IFrameWindow.notifyParent = function notifyParent(url) {
	        _Log2.default.debug("IFrameWindow.notifyParent");
	
	        if (window.parent && window !== window.parent) {
	            url = url || window.location.href;
	            if (url) {
	                _Log2.default.debug("posting url message to parent");
	                window.parent.postMessage(url, location.protocol + "//" + location.host);
	            }
	        }
	    };
	
	    _createClass(IFrameWindow, [{
	        key: "promise",
	        get: function get() {
	            return this._promise;
	        }
	    }, {
	        key: "_origin",
	        get: function get() {
	            return location.protocol + "//" + location.host;
	        }
	    }]);
	
	    return IFrameWindow;
	}();
	
	exports.default = IFrameWindow;
	module.exports = exports['default'];

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var User = function () {
	    function User(_ref) {
	        var id_token = _ref.id_token,
	            session_state = _ref.session_state,
	            access_token = _ref.access_token,
	            token_type = _ref.token_type,
	            scope = _ref.scope,
	            profile = _ref.profile,
	            expires_at = _ref.expires_at,
	            state = _ref.state;
	
	        _classCallCheck(this, User);
	
	        this.id_token = id_token;
	        this.session_state = session_state;
	        this.access_token = access_token;
	        this.token_type = token_type;
	        this.scope = scope;
	        this.profile = profile;
	        this.expires_at = expires_at;
	        this.state = state;
	    }
	
	    User.prototype.toStorageString = function toStorageString() {
	        _Log2.default.debug("User.toStorageString");
	        return JSON.stringify({
	            id_token: this.id_token,
	            session_state: this.session_state,
	            access_token: this.access_token,
	            token_type: this.token_type,
	            scope: this.scope,
	            profile: this.profile,
	            expires_at: this.expires_at
	        });
	    };
	
	    User.fromStorageString = function fromStorageString(storageString) {
	        _Log2.default.debug("User.fromStorageString");
	        return new User(JSON.parse(storageString));
	    };
	
	    _createClass(User, [{
	        key: "expires_in",
	        get: function get() {
	            if (this.expires_at) {
	                var now = parseInt(Date.now() / 1000);
	                return this.expires_at - now;
	            }
	            return undefined;
	        }
	    }, {
	        key: "expired",
	        get: function get() {
	            var expires_in = this.expires_in;
	            if (expires_in !== undefined) {
	                return expires_in <= 0;
	            }
	            return undefined;
	        }
	    }, {
	        key: "scopes",
	        get: function get() {
	            return (this.scope || "").split(" ");
	        }
	    }]);
	
	    return User;
	}();
	
	exports.default = User;
	module.exports = exports['default'];

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _AccessTokenEvents2 = __webpack_require__(32);
	
	var _AccessTokenEvents3 = _interopRequireDefault(_AccessTokenEvents2);
	
	var _Event = __webpack_require__(34);
	
	var _Event2 = _interopRequireDefault(_Event);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UserManagerEvents = function (_AccessTokenEvents) {
	    _inherits(UserManagerEvents, _AccessTokenEvents);
	
	    function UserManagerEvents(settings) {
	        _classCallCheck(this, UserManagerEvents);
	
	        var _this = _possibleConstructorReturn(this, _AccessTokenEvents.call(this, settings));
	
	        _this._userLoaded = new _Event2.default("User loaded");
	        _this._userUnloaded = new _Event2.default("User unloaded");
	        _this._silentRenewError = new _Event2.default("Silent renew error");
	        _this._userSignedOut = new _Event2.default("User signed out");
	        _this._userSessionChanged = new _Event2.default("User session changed");
	        return _this;
	    }
	
	    UserManagerEvents.prototype.load = function load(user) {
	        var raiseEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	        _Log2.default.debug("UserManagerEvents.load");
	        _AccessTokenEvents.prototype.load.call(this, user);
	        if (raiseEvent) {
	            this._userLoaded.raise(user);
	        }
	    };
	
	    UserManagerEvents.prototype.unload = function unload() {
	        _Log2.default.debug("UserManagerEvents.unload");
	        _AccessTokenEvents.prototype.unload.call(this);
	        this._userUnloaded.raise();
	    };
	
	    UserManagerEvents.prototype.addUserLoaded = function addUserLoaded(cb) {
	        this._userLoaded.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserLoaded = function removeUserLoaded(cb) {
	        this._userLoaded.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype.addUserUnloaded = function addUserUnloaded(cb) {
	        this._userUnloaded.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserUnloaded = function removeUserUnloaded(cb) {
	        this._userUnloaded.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype.addSilentRenewError = function addSilentRenewError(cb) {
	        this._silentRenewError.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeSilentRenewError = function removeSilentRenewError(cb) {
	        this._silentRenewError.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype._raiseSilentRenewError = function _raiseSilentRenewError(e) {
	        _Log2.default.debug("UserManagerEvents._raiseSilentRenewError", e.message);
	        this._silentRenewError.raise(e);
	    };
	
	    UserManagerEvents.prototype.addUserSignedOut = function addUserSignedOut(cb) {
	        this._userSignedOut.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserSignedOut = function removeUserSignedOut(cb) {
	        this._userSignedOut.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype._raiseUserSignedOut = function _raiseUserSignedOut(e) {
	        _Log2.default.debug("UserManagerEvents._raiseUserSignedOut");
	        this._userSignedOut.raise(e);
	    };
	
	    UserManagerEvents.prototype.addUserSessionChanged = function addUserSessionChanged(cb) {
	        this._userSessionChanged.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserSessionChanged = function removeUserSessionChanged(cb) {
	        this._userSessionChanged.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype._raiseUserSessionChanged = function _raiseUserSessionChanged(e) {
	        _Log2.default.debug("UserManagerEvents._raiseUserSessionChanged");
	        this._userSessionChanged.raise(e);
	    };
	
	    return UserManagerEvents;
	}(_AccessTokenEvents3.default);
	
	exports.default = UserManagerEvents;
	module.exports = exports['default'];

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Timer = __webpack_require__(33);
	
	var _Timer2 = _interopRequireDefault(_Timer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var DefaultAccessTokenExpiringNotificationTime = 60; // seconds
	
	var AccessTokenEvents = function () {
	    function AccessTokenEvents() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
	            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
	            _ref$accessTokenExpir2 = _ref.accessTokenExpiringTimer,
	            accessTokenExpiringTimer = _ref$accessTokenExpir2 === undefined ? new _Timer2.default("Access token expiring") : _ref$accessTokenExpir2,
	            _ref$accessTokenExpir3 = _ref.accessTokenExpiredTimer,
	            accessTokenExpiredTimer = _ref$accessTokenExpir3 === undefined ? new _Timer2.default("Access token expired") : _ref$accessTokenExpir3;
	
	        _classCallCheck(this, AccessTokenEvents);
	
	        this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;
	
	        this._accessTokenExpiring = accessTokenExpiringTimer;
	        this._accessTokenExpired = accessTokenExpiredTimer;
	    }
	
	    AccessTokenEvents.prototype.load = function load(container) {
	        _Log2.default.debug("AccessTokenEvents.load");
	
	        this._cancelTimers();
	
	        // only register events if there's an access token where we care about expiration
	        if (container.access_token) {
	            var duration = container.expires_in;
	            _Log2.default.debug("access token present, remaining duration:", duration);
	
	            if (duration > 0) {
	                // only register expiring if we still have time
	                var expiring = duration - this._accessTokenExpiringNotificationTime;
	                if (expiring <= 0) {
	                    expiring = 1;
	                }
	                _Log2.default.debug("registering expiring timer in:", expiring);
	                this._accessTokenExpiring.init(expiring);
	            }
	
	            // always register expired. if it's negative, it will still fire
	            var expired = duration + 1;
	            _Log2.default.debug("registering expired timer in:", expired);
	            this._accessTokenExpired.init(expired);
	        }
	    };
	
	    AccessTokenEvents.prototype.unload = function unload() {
	        _Log2.default.debug("AccessTokenEvents.unload");
	        this._cancelTimers();
	    };
	
	    AccessTokenEvents.prototype._cancelTimers = function _cancelTimers() {
	        _Log2.default.debug("canceling existing access token timers");
	        this._accessTokenExpiring.cancel();
	        this._accessTokenExpired.cancel();
	    };
	
	    AccessTokenEvents.prototype.addAccessTokenExpiring = function addAccessTokenExpiring(cb) {
	        this._accessTokenExpiring.addHandler(cb);
	    };
	
	    AccessTokenEvents.prototype.removeAccessTokenExpiring = function removeAccessTokenExpiring(cb) {
	        this._accessTokenExpiring.removeHandler(cb);
	    };
	
	    AccessTokenEvents.prototype.addAccessTokenExpired = function addAccessTokenExpired(cb) {
	        this._accessTokenExpired.addHandler(cb);
	    };
	
	    AccessTokenEvents.prototype.removeAccessTokenExpired = function removeAccessTokenExpired(cb) {
	        this._accessTokenExpired.removeHandler(cb);
	    };
	
	    return AccessTokenEvents;
	}();
	
	exports.default = AccessTokenEvents;
	module.exports = exports['default'];

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	var _Event2 = __webpack_require__(34);
	
	var _Event3 = _interopRequireDefault(_Event2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var TimerDuration = 5; // seconds
	
	var Timer = function (_Event) {
	    _inherits(Timer, _Event);
	
	    function Timer(name) {
	        var timer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global2.default.timer;
	
	        _classCallCheck(this, Timer);
	
	        var _this = _possibleConstructorReturn(this, _Event.call(this, name));
	
	        _this._timer = timer;
	        _this._nowFunc = function () {
	            return Date.now() / 1000;
	        };
	        return _this;
	    }
	
	    Timer.prototype.init = function init(duration) {
	        this.cancel();
	
	        if (duration <= 0) {
	            duration = 1;
	        }
	        duration = parseInt(duration);
	
	        _Log2.default.debug("Timer.init timer " + this._name + " for duration:", duration);
	        this._expiration = this.now + duration;
	
	        // we're using a fairly short timer and then checking the expiration in the 
	        // callback to handle scenarios where the browser device sleeps, and then 
	        // the timers end up getting delayed.
	        var timerDuration = TimerDuration;
	        if (duration < timerDuration) {
	            timerDuration = duration;
	        }
	        this._timerHandle = this._timer.setInterval(this._callback.bind(this), timerDuration * 1000);
	    };
	
	    Timer.prototype.cancel = function cancel() {
	        if (this._timerHandle) {
	            _Log2.default.debug("Timer.cancel: ", this._name);
	            this._timer.clearInterval(this._timerHandle);
	            this._timerHandle = null;
	        }
	    };
	
	    Timer.prototype._callback = function _callback() {
	        var diff = this._expiration - this.now;
	        _Log2.default.debug("Timer._callback; " + this._name + " timer expires in:", diff);
	
	        if (this._expiration <= this.now) {
	            this.cancel();
	            _Event.prototype.raise.call(this);
	        }
	    };
	
	    _createClass(Timer, [{
	        key: 'now',
	        get: function get() {
	            return parseInt(this._nowFunc());
	        }
	    }]);
	
	    return Timer;
	}(_Event3.default);
	
	exports.default = Timer;
	module.exports = exports['default'];

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var Event = function () {
	    function Event(name) {
	        _classCallCheck(this, Event);
	
	        this._name = name;
	        this._callbacks = [];
	    }
	
	    Event.prototype.addHandler = function addHandler(cb) {
	        this._callbacks.push(cb);
	    };
	
	    Event.prototype.removeHandler = function removeHandler(cb) {
	        var idx = this._callbacks.findIndex(function (item) {
	            return item === cb;
	        });
	        if (idx >= 0) {
	            this._callbacks.splice(idx, 1);
	        }
	    };
	
	    Event.prototype.raise = function raise() {
	        _Log2.default.debug("Raising event: " + this._name);
	        for (var i = 0; i < this._callbacks.length; i++) {
	            var _callbacks;
	
	            (_callbacks = this._callbacks)[i].apply(_callbacks, arguments);
	        }
	    };
	
	    return Event;
	}();
	
	exports.default = Event;
	module.exports = exports['default'];

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SilentRenewService = function () {
	    function SilentRenewService(userManager) {
	        _classCallCheck(this, SilentRenewService);
	
	        this._userManager = userManager;
	    }
	
	    SilentRenewService.prototype.start = function start() {
	        if (!this._callback) {
	            this._callback = this._tokenExpiring.bind(this);
	            this._userManager.events.addAccessTokenExpiring(this._callback);
	
	            // this will trigger loading of the user so the expiring events can be initialized
	            this._userManager.getUser().then(function (user) {
	                // deliberate nop
	            }).catch(function (err) {
	                // catch to suppress errors since we're in a ctor
	                _Log2.default.error("Error from getUser:", err.message);
	            });
	        }
	    };
	
	    SilentRenewService.prototype.stop = function stop() {
	        if (this._callback) {
	            this._userManager.events.removeAccessTokenExpiring(this._callback);
	            delete this._callback;
	        }
	    };
	
	    SilentRenewService.prototype._tokenExpiring = function _tokenExpiring() {
	        var _this = this;
	
	        _Log2.default.debug("SilentRenewService automatically renewing access token");
	
	        this._userManager.signinSilent().then(function (user) {
	            _Log2.default.debug("Silent token renewal successful");
	        }, function (err) {
	            _Log2.default.error("Error from signinSilent:", err.message);
	            _this._userManager.events._raiseSilentRenewError(err);
	        });
	    };
	
	    return SilentRenewService;
	}();
	
	exports.default = SilentRenewService;
	module.exports = exports['default'];

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _CheckSessionIFrame = __webpack_require__(37);
	
	var _CheckSessionIFrame2 = _interopRequireDefault(_CheckSessionIFrame);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SessionMonitor = function () {
	    function SessionMonitor(userManager) {
	        var _this = this;
	
	        var CheckSessionIFrameCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _CheckSessionIFrame2.default;
	
	        _classCallCheck(this, SessionMonitor);
	
	        if (!userManager) {
	            _Log2.default.error("No user manager passed to SessionMonitor");
	            throw new Error("userManager");
	        }
	
	        this._userManager = userManager;
	        this._CheckSessionIFrameCtor = CheckSessionIFrameCtor;
	
	        this._userManager.events.addUserLoaded(this._start.bind(this));
	        this._userManager.events.addUserUnloaded(this._stop.bind(this));
	
	        this._userManager.getUser().then(function (user) {
	            if (user) {
	                _this._start(user);
	            }
	        }).catch(function (err) {
	            // catch to suppress errors since we're in a ctor
	            _Log2.default.error("SessionMonitor ctor; error from getUser:", err.message);
	        });
	    }
	
	    SessionMonitor.prototype._start = function _start(user) {
	        var _this2 = this;
	
	        var session_state = user.session_state;
	
	        if (session_state) {
	            this._sub = user.profile.sub;
	            this._sid = user.profile.sid;
	            _Log2.default.debug("SessionMonitor._start; session_state:", session_state, ", sub:", this._sub);
	
	            if (!this._checkSessionIFrame) {
	                this._metadataService.getCheckSessionIframe().then(function (url) {
	                    if (url) {
	                        _Log2.default.debug("Initializing check session iframe");
	
	                        var client_id = _this2._client_id;
	                        var interval = _this2._checkSessionInterval;
	
	                        _this2._checkSessionIFrame = new _this2._CheckSessionIFrameCtor(_this2._callback.bind(_this2), client_id, url, interval);
	                        _this2._checkSessionIFrame.load().then(function () {
	                            _this2._checkSessionIFrame.start(session_state);
	                        });
	                    } else {
	                        _Log2.default.warn("No check session iframe found in the metadata");
	                    }
	                }).catch(function (err) {
	                    // catch to suppress errors since we're in non-promise callback
	                    _Log2.default.error("Error from getCheckSessionIframe:", err.message);
	                });
	            } else {
	                this._checkSessionIFrame.start(session_state);
	            }
	        }
	    };
	
	    SessionMonitor.prototype._stop = function _stop() {
	        _Log2.default.debug("SessionMonitor._stop");
	
	        this._sub = null;
	        this._sid = null;
	
	        if (this._checkSessionIFrame) {
	            this._checkSessionIFrame.stop();
	        }
	    };
	
	    SessionMonitor.prototype._callback = function _callback() {
	        var _this3 = this;
	
	        _Log2.default.debug("SessionMonitor._callback");
	
	        this._userManager.querySessionStatus().then(function (session) {
	            var raiseUserSignedOutEvent = true;
	
	            if (session) {
	                if (session.sub === _this3._sub) {
	                    raiseUserSignedOutEvent = false;
	                    _this3._checkSessionIFrame.start(session.session_state);
	
	                    if (session.sid === _this3._sid) {
	                        _Log2.default.debug("Same sub still logged in at OP, restarting check session iframe; session_state:", session.session_state);
	                    } else {
	                        _Log2.default.debug("Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:", session.session_state);
	                        _this3._userManager.events._raiseUserSessionChanged();
	                    }
	                } else {
	                    _Log2.default.debug("Different subject signed into OP:", session.sub);
	                }
	            } else {
	                _Log2.default.debug("Subject no longer signed into OP");
	            }
	
	            if (raiseUserSignedOutEvent) {
	                _Log2.default.debug("SessionMonitor._callback; raising signed out event");
	                _this3._userManager.events._raiseUserSignedOut();
	            }
	        }).catch(function (err) {
	            _Log2.default.debug("Error calling queryCurrentSigninSession; raising signed out event", err.message);
	            _this3._userManager.events._raiseUserSignedOut();
	        });
	    };
	
	    _createClass(SessionMonitor, [{
	        key: '_settings',
	        get: function get() {
	            return this._userManager.settings;
	        }
	    }, {
	        key: '_metadataService',
	        get: function get() {
	            return this._userManager.metadataService;
	        }
	    }, {
	        key: '_client_id',
	        get: function get() {
	            return this._settings.client_id;
	        }
	    }, {
	        key: '_checkSessionInterval',
	        get: function get() {
	            return this._settings.checkSessionInterval;
	        }
	    }]);
	
	    return SessionMonitor;
	}();
	
	exports.default = SessionMonitor;
	module.exports = exports['default'];

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var DefaultInterval = 2000;
	
	var CheckSessionIFrame = function () {
	    function CheckSessionIFrame(callback, client_id, url, interval) {
	        _classCallCheck(this, CheckSessionIFrame);
	
	        this._callback = callback;
	        this._client_id = client_id;
	        this._url = url;
	        this._interval = interval || DefaultInterval;
	
	        var idx = url.indexOf("/", url.indexOf("//") + 2);
	        this._frame_origin = url.substr(0, idx);
	
	        this._frame = window.document.createElement("iframe");
	
	        // shotgun approach
	        this._frame.style.visibility = "hidden";
	        this._frame.style.position = "absolute";
	        this._frame.style.display = "none";
	        this._frame.style.width = 0;
	        this._frame.style.height = 0;
	
	        this._frame.src = url;
	    }
	
	    CheckSessionIFrame.prototype.load = function load() {
	        var _this = this;
	
	        return new Promise(function (resolve) {
	            _this._frame.onload = function () {
	                resolve();
	            };
	
	            window.document.body.appendChild(_this._frame);
	            _this._boundMessageEvent = _this._message.bind(_this);
	            window.addEventListener("message", _this._boundMessageEvent, false);
	        });
	    };
	
	    CheckSessionIFrame.prototype._message = function _message(e) {
	        if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {
	            if (e.data === "error") {
	                _Log2.default.error("error message from check session op iframe");
	                this.stop();
	            } else if (e.data === "changed") {
	                _Log2.default.debug("changed message from check session op iframe");
	                this.stop();
	                this._callback();
	            } else {
	                _Log2.default.debug(e.data + " message from check session op iframe");
	            }
	        }
	    };
	
	    CheckSessionIFrame.prototype.start = function start(session_state) {
	        var _this2 = this;
	
	        if (this._session_state !== session_state) {
	            _Log2.default.debug("CheckSessionIFrame.start");
	
	            this.stop();
	
	            this._session_state = session_state;
	
	            this._timer = window.setInterval(function () {
	                _this2._frame.contentWindow.postMessage(_this2._client_id + " " + _this2._session_state, _this2._frame_origin);
	            }, this._interval);
	        }
	    };
	
	    CheckSessionIFrame.prototype.stop = function stop() {
	        _Log2.default.debug("CheckSessionIFrame.stop");
	
	        this._session_state = null;
	
	        if (this._timer) {
	            window.clearInterval(this._timer);
	            this._timer = null;
	        }
	    };
	
	    return CheckSessionIFrame;
	}();
	
	exports.default = CheckSessionIFrame;
	module.exports = exports['default'];

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _MetadataService = __webpack_require__(7);
	
	var _MetadataService2 = _interopRequireDefault(_MetadataService);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var AccessTokenTypeHint = "access_token";
	
	var TokenRevocationClient = function () {
	    function TokenRevocationClient(settings) {
	        var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global2.default.XMLHttpRequest;
	        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService2.default;
	
	        _classCallCheck(this, TokenRevocationClient);
	
	        if (!settings) {
	            _Log2.default.error("No settings provided");
	            throw new Error("No settings provided.");
	        }
	
	        this._settings = settings;
	        this._XMLHttpRequestCtor = XMLHttpRequestCtor;
	        this._metadataService = new MetadataServiceCtor(this._settings);
	    }
	
	    TokenRevocationClient.prototype.revoke = function revoke(accessToken, required) {
	        var _this = this;
	
	        _Log2.default.debug("TokenRevocationClient.revoke");
	
	        if (!accessToken) {
	            _Log2.default.error("No accessToken provided");
	            throw new Error("No accessToken provided.");
	        }
	
	        return this._metadataService.getRevocationEndpoint().then(function (url) {
	            if (!url) {
	                if (required) {
	                    _Log2.default.error("Revocation not supported");
	                    throw new Error("Revocation not supported");
	                }
	
	                // not required, so don't error and just return
	                return;
	            }
	
	            var client_id = _this._settings.client_id;
	            var client_secret = _this._settings.client_secret;
	            return _this._revoke(url, client_id, client_secret, accessToken);
	        });
	    };
	
	    TokenRevocationClient.prototype._revoke = function _revoke(url, client_id, client_secret, accessToken) {
	        var _this2 = this;
	
	        _Log2.default.debug("Calling revocation endpoint");
	
	        return new Promise(function (resolve, reject) {
	
	            var xhr = new _this2._XMLHttpRequestCtor();
	            xhr.open("POST", url);
	
	            xhr.onload = function () {
	                _Log2.default.debug("HTTP response received, status", xhr.status);
	
	                if (xhr.status === 200) {
	                    resolve();
	                } else {
	                    reject(Error(xhr.statusText + " (" + xhr.status + ")"));
	                }
	            };
	
	            var body = "client_id=" + encodeURIComponent(client_id);
	            if (client_secret) {
	                body += "&client_secret=" + encodeURIComponent(client_secret);
	            }
	            body += "&token_type_hint=" + encodeURIComponent(AccessTokenTypeHint);
	            body += "&token=" + encodeURIComponent(accessToken);
	
	            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	            xhr.send(body);
	        });
	    };
	
	    return TokenRevocationClient;
	}();
	
	exports.default = TokenRevocationClient;
	module.exports = exports['default'];

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _CordovaPopupWindow = __webpack_require__(40);
	
	var _CordovaPopupWindow2 = _interopRequireDefault(_CordovaPopupWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var CordovaPopupNavigator = function () {
	    function CordovaPopupNavigator() {
	        _classCallCheck(this, CordovaPopupNavigator);
	    }
	
	    CordovaPopupNavigator.prototype.prepare = function prepare(params) {
	        var popup = new _CordovaPopupWindow2.default(params);
	        return Promise.resolve(popup);
	    };
	
	    return CordovaPopupNavigator;
	}();
	
	exports.default = CordovaPopupNavigator;
	module.exports = exports['default'];

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DefaultPopupFeatures = 'location=no,toolbar=no,zoom=no';
	var DefaultPopupTarget = "_blank";
	
	var CordovaPopupWindow = function () {
	    function CordovaPopupWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, CordovaPopupWindow);
	
	        _Log2.default.debug("CordovaPopupWindow.ctor");
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        this.features = params.popupWindowFeatures || DefaultPopupFeatures;
	        this.target = params.popupWindowTarget || DefaultPopupTarget;
	
	        this.redirect_uri = params.startUrl;
	        _Log2.default.debug("redirect_uri: " + this.redirect_uri);
	    }
	
	    CordovaPopupWindow.prototype._isInAppBrowserInstalled = function _isInAppBrowserInstalled(cordovaMetadata) {
	        return ["cordova-plugin-inappbrowser", "cordova-plugin-inappbrowser.inappbrowser", "org.apache.cordova.inappbrowser"].some(function (name) {
	            return cordovaMetadata.hasOwnProperty(name);
	        });
	    };
	
	    CordovaPopupWindow.prototype.navigate = function navigate(params) {
	        _Log2.default.debug("CordovaPopupWindow.navigate");
	
	        if (!params || !params.url) {
	            this._error("No url provided");
	        } else {
	            if (!window.cordova) {
	                return this._error("cordova is undefined");
	            }
	
	            var cordovaMetadata = window.cordova.require("cordova/plugin_list").metadata;
	            if (this._isInAppBrowserInstalled(cordovaMetadata) === false) {
	                return this._error("InAppBrowser plugin not found");
	            }
	            this._popup = cordova.InAppBrowser.open(params.url, this.target, this.features);
	            if (this._popup) {
	                _Log2.default.debug("popup successfully created");
	
	                this._exitCallbackEvent = this._exitCallback.bind(this);
	                this._loadStartCallbackEvent = this._loadStartCallback.bind(this);
	
	                this._popup.addEventListener("exit", this._exitCallbackEvent, false);
	                this._popup.addEventListener("loadstart", this._loadStartCallbackEvent, false);
	            } else {
	                this._error("Error opening popup window");
	            }
	        }
	        return this.promise;
	    };
	
	    CordovaPopupWindow.prototype._loadStartCallback = function _loadStartCallback(event) {
	        if (event.url.indexOf(this.redirect_uri) === 0) {
	            this._success({ url: event.url });
	        }
	    };
	
	    CordovaPopupWindow.prototype._exitCallback = function _exitCallback(message) {
	        this._error(message);
	    };
	
	    CordovaPopupWindow.prototype._success = function _success(data) {
	        this._cleanup();
	
	        _Log2.default.debug("Successful response from cordova popup window");
	        this._resolve(data);
	    };
	
	    CordovaPopupWindow.prototype._error = function _error(message) {
	        this._cleanup();
	
	        _Log2.default.error(message);
	        this._reject(new Error(message));
	    };
	
	    CordovaPopupWindow.prototype.close = function close() {
	        this._cleanup();
	    };
	
	    CordovaPopupWindow.prototype._cleanup = function _cleanup() {
	        _Log2.default.debug("CordovaPopupWindow._cleanup");
	
	        if (this._popup) {
	            this._popup.removeEventListener("exit", this._exitCallbackEvent, false);
	            this._popup.removeEventListener("loadstart", this._loadStartCallbackEvent, false);
	            this._popup.close();
	        }
	        this._popup = null;
	    };
	
	    _createClass(CordovaPopupWindow, [{
	        key: 'promise',
	        get: function get() {
	            return this._promise;
	        }
	    }]);
	
	    return CordovaPopupWindow;
	}();
	
	exports.default = CordovaPopupWindow;
	module.exports = exports['default'];

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _CordovaPopupWindow = __webpack_require__(40);
	
	var _CordovaPopupWindow2 = _interopRequireDefault(_CordovaPopupWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var CordovaIFrameNavigator = function () {
	    function CordovaIFrameNavigator() {
	        _classCallCheck(this, CordovaIFrameNavigator);
	    }
	
	    CordovaIFrameNavigator.prototype.prepare = function prepare(params) {
	        params.popupWindowFeatures = 'hidden=yes';
	        var popup = new _CordovaPopupWindow2.default(params);
	        return Promise.resolve(popup);
	    };
	
	    return CordovaIFrameNavigator;
	}();
	
	exports.default = CordovaIFrameNavigator;
	module.exports = exports['default'];

/***/ })
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,